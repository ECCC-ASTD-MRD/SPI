#ifndef _tclMetObs_Sqlite_h
#define _tclMetObs_Sqlite_h
#include "tclMetObs.h"
/*
 * It would be good to have a program that does this automatically.  It
 * shouldn't be too hard with python or perl to take the output of when I do
 *    $ sqlite3 my_database.sqlite .s
 * and parse that into what this file has.
 * replace "CREATE TABLE <table_name> (" by "enum ${table_name}TableColumns {"
 * then for each "<first_word> <the rest>" replace by
 * "allcaps(${table_name})_COL_allcaps(${first_word}),"
 * until an empty line is found, then add the line "};"
 */


/*
 * NOTE: THESE NUMBERS ARE ONLY VALID IF I DO
 *
 *    SELECT * FROM <TABLE> WHERE ...;
 *
 * BECAUSE THE COLUMN NUMBERS USED IN sqlite3_column_int(stmt, col_number)
 * ARE RELATIVE TO THE QUERY RESULT.
 *
 * I may be able to do stuff if I do clever stuff if I do joins, but I'm not
 * sure about that.
 *
 * I.E. if I do
 *
 *    SELECT * FROM <TABLE1> CROSS JOIN <TABLE2 WHERE ...;
 *
 * then I can use the column numbers from table 1 and to get column numbers from
 * table2, I user the table2 column numbers but increment them by
 * TABLE1_COL_NB_COLUMNS.
 *
 * This feels very error prone and we'll have to see as I go along.
 */
enum RapportTableColumns {
   RAPPORT_COL_ID_RAPPORT,
   RAPPORT_COL_ID_STN,
   RAPPORT_COL_TYPE,
   RAPPORT_COL_CORRECTION,
   RAPPORT_COL_DATE_VALIDITE,
   RAPPORT_COL_DATE_CREATION,
   RAPPORT_COL_LAT,
   RAPPORT_COL_LON,
   RAPPORT_COL_PRESSURE_ALTITUDE,
   RAPPORT_COL_FLIGHT_LEVEL,
   RAPPORT_COL_GPS_ALTITUDE,
   RAPPORT_COL_OBS_SEQUENCE_NUMBER,
   RAPPORT_COL_TYPE_RELAIS,
   RAPPORT_COL_ANGLE_ROULEMENT,
   RAPPORT_COL_PHASE_VOL,
   RAPPORT_COL_PHASE_VOL_DETAILLEE,
   RAPPORT_COL_VALEURS_INTERPOLEES,
   RAPPORT_COL_WMO_HEADER,
   RAPPORT_COL_DEPART,
   RAPPORT_COL_ARRIVEE,
   RAPPORT_COL_NO_VOL,
   RAPPORT_COL_NO_QUEUE,
   RAPPORT_COL_NB_COLUMNS
};

enum ObservationTableColumns {
   OBSERVATION_COL_ID_OBSERVATION,
   OBSERVATION_COL_ID_RAPPORT,
   OBSERVATION_COL_ELEMENT,
   OBSERVATION_COL_VALEUR,
   OBSERVATION_COL_UNIT,
   OBSERVATION_COL_PRECISION,
   OBSERVATION_COL_QC,
   OBSERVATION_COL_NB_COLUMNS
};

enum InfoRapportTableColumns {
   INFO_RAPPORT_COL_ID_INFO_RAPPORT,
   INFO_RAPPORT_COL_ID_RAPPORT,
   INFO_RAPPORT_COL_DESCRIPTION,
   INFO_RAPPORT_COL_VALEUR,
};

enum InfoObservationTableColumns {
   INFO_OBSERVATION_COL_ID_INFO_OBSERVATION,
   INFO_OBSERVATION_COL_ID_RAPPORT,
   INFO_OBSERVATION_COL_ID_OBSERVATION,
   INFO_OBSERVATION_COL_DESCRIPTION,
   INFO_OBSERVATION_COL_VALEUR
};


enum JoinRapportObservationTableColumns{
   J_RAPPORT_OBSERVATION_COL_ID_RAPPORT,
   J_RAPPORT_OBSERVATION_COL_ID_STN,
   J_RAPPORT_OBSERVATION_COL_TYPE,
   J_RAPPORT_OBSERVATION_COL_CORRECTION,
   J_RAPPORT_OBSERVATION_COL_DATE_VALIDITE,
   J_RAPPORT_OBSERVATION_COL_DATE_CREATION,
   J_RAPPORT_OBSERVATION_COL_LAT,
   J_RAPPORT_OBSERVATION_COL_LON,
   J_RAPPORT_OBSERVATION_COL_PRESSURE_ALTITUDE,
   J_RAPPORT_OBSERVATION_COL_FLIGHT_LEVEL,
   J_RAPPORT_OBSERVATION_COL_GPS_ALTITUDE,
   J_RAPPORT_OBSERVATION_COL_OBS_SEQUENCE_NUMBER,
   J_RAPPORT_OBSERVATION_COL_TYPE_RELAIS,
   J_RAPPORT_OBSERVATION_COL_ANGLE_ROULEMENT,
   J_RAPPORT_OBSERVATION_COL_PHASE_VOL,
   J_RAPPORT_OBSERVATION_COL_PHASE_VOL_DETAILLEE,
   J_RAPPORT_OBSERVATION_COL_VALEURS_INTERPOLEES,
   J_RAPPORT_OBSERVATION_COL_WMO_HEADER,
   J_RAPPORT_OBSERVATION_COL_DEPART,
   J_RAPPORT_OBSERVATION_COL_ARRIVEE,
   J_RAPPORT_OBSERVATION_COL_NO_VOL,
   J_RAPPORT_OBSERVATION_COL_NO_QUEUE,
   J_RAPPORT_OBSERVATION_COL_ID_OBSERVATION,
   J_RAPPORT_OBSERVATION_COL_ELEMENT,
   J_RAPPORT_OBSERVATION_COL_VALEUR,
   J_RAPPORT_OBSERVATION_COL_UNIT,
   J_RAPPORT_OBSERVATION_COL_PRECISION,
   J_RAPPORT_OBSERVATION_COL_QC
};

int MetObs_LoadSQLite(Tcl_Interp *Interp, const char *database_filename, TMetObs *obs);

#endif // _tclMetObs_Sqlite_h
