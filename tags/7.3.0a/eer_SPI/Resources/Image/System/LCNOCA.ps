%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Jean-Philippe Gauthier
%%Title: Window .proj.canvas.map
%%CreationDate: Thu Feb 15 15:55:26 2001
%%BoundingBox: 46 107 567 686
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Courier-Bold
%%EndComments

%%BeginProlog
50 dict begin

% This is a standard prolog for Postscript generated by Tk's canvas
% widget.

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def

% Define the array ISOLatin1Encoding (which specifies how characters are
% encoded for ISO-8859-1 fonts), if it isn't already present (Postscript
% level 2 is supposed to define it, but level 1 doesn't).

systemdict /ISOLatin1Encoding known not {
    /ISOLatin1Encoding [
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /exclam /quotedbl /numbersign /dollar /percent /ampersand
	    /quoteright
	/parenleft /parenright /asterisk /plus /comma /minus /period /slash
	/zero /one /two /three /four /five /six /seven
	/eight /nine /colon /semicolon /less /equal /greater /question
	/at /A /B /C /D /E /F /G
	/H /I /J /K /L /M /N /O
	/P /Q /R /S /T /U /V /W
	/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
	/quoteleft /a /b /c /d /e /f /g
	/h /i /j /k /l /m /n /o
	/p /q /r /s /t /u /v /w
	/x /y /z /braceleft /bar /braceright /asciitilde /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
	/dieresis /space /ring /cedilla /space /hungarumlaut /ogonek /caron
	/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
	/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen
	    /registered /macron
	/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
	    /periodcentered
	/cedillar /onesuperior /ordmasculine /guillemotright /onequarter
	    /onehalf /threequarters /questiondown
	/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
	/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex
	    /Idieresis
	/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
	/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
	    /germandbls
	/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
	/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex
	    /idieresis
	/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
	/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn
	    /ydieresis
    ] def
} if

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to ISOLatin1.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding ISOLatin1Encoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	stringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	stipple {

	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		char 0 3 -1 roll put
		currentpoint
		gsave
		char true charpath clip StippleText
		grestore
		char stringwidth translate
		moveto
	    } forall
	    grestore
	} {show} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Courier-Bold
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
0.9602 0.9602 scale
-270 -300 translate
0 601 moveto 541 601 lineto 541 0 lineto 0 0 lineto closepath clip newpath
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
45 556 moveto
495 556 lineto
495 156 lineto
45 156 lineto
closepath fill
45 556 moveto
495 556 lineto
495 156 lineto
45 156 lineto
closepath clip newpath
45.000000 156.000000 translate

% Postscript de la geographie
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinewidth 1 setlinecap 1 setlinejoin
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinewidth 1 setlinecap 1 setlinejoin
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinewidth 1 setlinecap 1 setlinejoin
grestore
gsave
45 556 moveto 450 0 rlineto 0 -400 rlineto -450 0 rlineto closepath
0 setlinejoin 2 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
1 600 moveto 539 0 rlineto 0 -599 rlineto -539 0 rlineto closepath
0 setlinejoin 2 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
111 588 translate
0 -18 translate
18 18 true matrix {
<00000001e00007f8000ffc0007f80003300000000000c00079e78079e78078
c7807c0f803e1f003e1f001c0e000c0c00000000000000>
} imagemask
grestore
gsave
grestore
gsave
grestore
gsave
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
10 393 translate
0 -237 translate
24 237 true matrix {
<ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffff00000000000000c000007800007c0000fe80007f80073f8003ff00
07ff001ffff80fff0003ff00073f80007f8000fe80007c0000780000c000
000000000000ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffff0000000000000000007847fffc67ffcc6380cc61f8
cfe0fe47c1f80003800fc7ff1fe7ff1b60001b607e1f60ff0f40db0000db
1fe0fb0fe07a1800001000c00003fe1c03ff1f80c303e00003e07e1f80ff
1c00db0000dbdfe0fbdfe07a0000000fc07e1fe0ff1860c31860c31ce0ff
0cc07e0000000fc0ff1fe07f1b60c01b60801f60800f407e0000ff0000c3
0000c3ffe0ffffe07e7000003f03ff1fc3ff3f000070007effe0ffffe0c3
0000c30fc0ff1fe07e5b6000db60799f60fd0f40cd0000cd1800ff7fc07f
7fe0001866ff0006ff0fc0001fe07e5b60ffdb60c39f60c30f40e7000066
0fc0001fe06e1860df1860db1fe0db0fc0fe00007f1fe0000fe3ff1803ff
1000001000000fc0001fe3c21867e31866631fe6630fc67f00023e7fe000
7fe00000007e0fc0ff1fe0db1860db1860fb1fe07a0fc0000000ff0f207f
1fb0c019b08019b0001ff0e00fe0fc00001f6fe01f6fe0fc0000e00fc000
1fe6ff1866ff1870001ff87e0fc0ff0000c31fc0c31fe0e70060661fe000
1fc07e0000ff0fc0db1fe0db1b60fb1b607a1f60000f400000000000007e
0000ff0fc0c31fe0c31860ff08607effe000ffe07f0000ff1fc0d81fe0d8
0060401fe0001fc0000000000003fe0007ff7fc603ffe603c06707c06306
e0e00060c06e0000df0dc0db1be0db1b60fe1b607f1fc0000fe0ff0000ff
1fe0601fe0c00c00ff18007f1fe0000fe06e0000df0dc0db1be0db1b60fe
1b607f1fc0000fe07e0000ff0fc0c31fe0431867ff0867ffffe000ffe06e
0000df0dc0db1be0db1b60fe1b607f1fc0000fe000>
} imagemask
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
10 490 translate
0 -84 translate
24 84 true matrix {
<7fc7ffffe7ffc06670c0667ce0e7ef60c3c3000000ffe3c2ffe7e3700663
3f06631fc67f3f023e700000ffe7ffffe7ff000380ffe1f8ffe0fece01f8
cf8380fde7ff7867ff0000007843fefc67ffcc6603cc6603cfe70747c306
000000000000000000000000ffe7ffffe7ff7003803f01f81fc0fe3f01f8
700380ffe7ffffe7ff0000000fc07e1fe0ff1860c31860c31fe0ff0fc07e
0000001fe0ff1fe0ff0c00601800c01fe0ff0fe07f0000001800c07fc3fe
7fe3ff1860c30000001fe0ff0fe07f1800c01000801000800fc07e1fe0ff
5b62dbdb66db9f64fb0f407a0000000dc06e1be0df1b60db1b60db1fc0fe
0fe07f0000007fe3ff7fe3ff>
} imagemask
grestore
gsave
grestore
gsave
grestore
gsave
/Courier-Bold findfont 16 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
270 81 [
(Release scenario)
] 19 -0.5 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
10 61 [
(Isotope                :)
] 10 -0 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
10 51 [
(Time function          :)
] 10 -0 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
10 41 [
(Duration               :)
] 10 -0 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
10 31 [
(Horizontal distribution:)
] 10 -0 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
10 21 [
(Grid length            :)
] 10 -0 1 0 false DrawText
grestore
gsave
grestore
gsave
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
280 61 [
(Total release           :)
] 10 -0 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
280 51 [
(Height of release       :)
] 10 -0 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
280 41 [
(Vertical distribution   :)
] 10 -0 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
280 31 [
(Standard deviation \050Hor\051:)
] 10 -0 1 0 false DrawText
grestore
gsave
/Courier-Bold findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
280 21 [
(Maximum value at o      :)
] 10 -0 1 0 false DrawText
grestore
gsave
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
506 551 translate
0 -174 translate
22 174 true matrix {
<3f00847f80844083fc4087fc7384843304840004000f00841f80fc10807c10
80c41f80840f00c01080001f80780f80fc1880841000841f80fc0f807800
00841000fc7f007c7f80c010807c1080c011007c0000000f00001f800010
80001080001f80000f00001000001f00781f80fc0080841080841f00cc1f
80c80084041087fc1f87fc0f80401880841080fc18007c00000000001800
00bc0000a40000a40000fc00007c1000041800841e00fc17807c0380c41e
00841800c01000000300801783f81483fc1480841f80840f808800800080
8000808000ff8000ff80000080000080001000001f00801f83f80083fc10
80841f00841f80880080000f00781f80fc1480841480841d80fc0d007800
00000900001d80001c80001680001780001b00000000000000780000fc00
00840000840000cc0000c81084041f87fc0f87fc1800400f80841800fc0f
807c0000000300181780bc1480a41480a41f80fc0f807c1080041c10841f
70fc13f07c0390c41e00841800c01000000000800003f80003fc00008400
00840000880000000f00001f8000108000108000198000190000808000ff
8000ff80000800001080001f80000f800000000003000017800014800014
80001f80000f80001080001f80000f80001880001000001f80000f800000
00000f00001f90001090001090000ff0001fe0001000000f00001f800014
80001480001d80000d0000>
} imagemask
grestore
gsave
/Courier-Bold findfont 24 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
217.726192 469.2658 [
(Product)
] 28 -0 0.5 0 false DrawText
grestore
gsave
/Courier-Bold findfont 24 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
240.975577 389.166786 [
(not)
] 28 -0 0.5 0 false DrawText
grestore
gsave
/Courier-Bold findfont 24 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
203.621971 297.753575 [
(available)
] 28 -0 0.5 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
