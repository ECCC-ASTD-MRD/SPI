#============================================================================
# Environnement Canada - Service meteorologique du Canada
# Centre meteorologique canadien
# 2121 Route Trans-canadienne
# Dorval, Quebec
# H9P 1J3
#
# Projet     : Interface pour la gestion des experiences.
# Fichier    : <MLDP1.int>
# Creation   : Octobre 1999 - J.P. Gauthier - CMC/CMOE
#
# Description: Description des interfaces et procedures relatives a
#              celles-ci pour le module MLDP1.
#
# Remarques  :
#   Aucune.
#
# Modifications :
#
#   Nom         : -
#   Date        : -
#   Description : -
#
#============================================================================

#----------------------------------------------------------------------------
# Nom        : <MLDP1::New>
# Creation   : Octobre 1999 - J.P. Gauthier - CMC/CMOE -
#
# But        : Creation d'une nouvelle simulation MLDP1.
#
# Parametres :
#   <Parent> : Identificateur de la fenetre parent.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::New { Parent } {
   global GDefs
   variable Sim
   variable Msg
   variable Lbl
   variable Bubble

   if { [winfo exists .mldp1new] } {
      Dialog::CreateInfo .mldp1new "[lindex $Msg(Exist) $GDefs(Lang)]"
      return
   }

   toplevel     .mldp1new
   wm title     .mldp1new "MLDP1: $Exp::Data(Name)"
   wm transient .mldp1new $Parent
   wm resizable .mldp1new 0 0
   wm geom      .mldp1new =320x380+[winfo rootx $Parent]+[expr [winfo rooty $Parent]+30]
   wm protocol  .mldp1new WM_DELETE_WINDOW { }

   MLDP1::SimInitNew
   MLDP1::GridDef

   TabFrame::Create .mldp1new.opt 1 "MLDP1::SimLaunchInit"
   pack .mldp1new.opt -side top -fill both -expand true -padx 5 -pady 5

   #----- Model Tab.

   set tabframe [TabFrame::Add .mldp1new.opt 1 "[lindex $Lbl(Model) $GDefs(Lang)]" False]

   #----- Simulation Starting Time.

   labelframe $tabframe.time -text "[lindex $Lbl(Start) $GDefs(Lang)]"

      #----- Simulation Date Hour and minutes.

      Calendar::Create $tabframe.time.date [lindex $Lbl(Date) $GDefs(Lang)] MLDP1::Sim(AccSeconds) 24 "MLDP1::SetAccidentDate"
      Clock::Create $tabframe.time.hour "" MLDP1::Sim(AccHour) MLDP1::Sim(AccMin)
      pack $tabframe.time.date -side left -anchor w -padx 2 -fill x
      pack $tabframe.time.hour -side left -padx 2

      Bubble::Create $tabframe.time.date "[lindex $Bubble(StartDate) $GDefs(Lang)]"
      Bubble::Create $tabframe.time.hour "[lindex $Bubble(StartHour) $GDefs(Lang)]"

   pack $tabframe.time -side top -padx 5 -pady 5 -fill x
   Bubble::Create $tabframe.time "[lindex $Bubble(StartTime) $GDefs(Lang)]"

   #----- Model Integration (data output time step and model time step).

   labelframe $tabframe.integ -text "[lindex $Lbl(Integration) $GDefs(Lang)]"
      frame $tabframe.integ.opt

      #----- Simulation duration [hr].

      Option::Create $tabframe.integ.opt.dur [lindex $Lbl(SimDuration) $GDefs(Lang)] MLDP1::Sim(Duration) 1 -1 $MLDP1::Sim(ListSimDuration) "MLDP1::CheckFileSize"
      pack $tabframe.integ.opt.dur -side top -fill x
      Bubble::Create $tabframe.integ.opt.dur "[lindex $Bubble(SimDuration) $GDefs(Lang)]"
      set MLDP1::Sim(SimDurationEnt) $tabframe.integ.opt.dur.e

      #----- Data output time step [min].

      Option::Create $tabframe.integ.opt.ots [lindex $Lbl(OutputTimeStepMin) $GDefs(Lang)] MLDP1::Sim(OutputTimeStepMin) 1 -1 $MLDP1::Sim(ListOutputTimeStep) "MLDP1::CheckFileSize" ; # "puts stderr \$MLDP1::Sim(OutputTimeStepMin)"
      pack $tabframe.integ.opt.ots -side top -fill x
      Bubble::Create $tabframe.integ.opt.ots "[lindex $Bubble(OutputTimeStepMin) $GDefs(Lang)]"
      set MLDP1::Sim(OutputTimeStepEnt) $tabframe.integ.opt.ots.e

      #----- Model time step [min].

      Option::Create $tabframe.integ.opt.mts [lindex $Lbl(ModelTimeStepMin) $GDefs(Lang)] MLDP1::Sim(ModelTimeStepMin) 1 -1 $MLDP1::Sim(ListModelTimeStep) "set Sim(IsScenarioValid) 0" ; # "puts stderr \$MLDP1::Sim(ModelTimeStepMin)"
      pack $tabframe.integ.opt.mts -side top -fill x
      Bubble::Create $tabframe.integ.opt.mts "[lindex $Bubble(ModelTimeStepMin) $GDefs(Lang)]"
      set MLDP1::Sim(ModelTimeStepEnt) $tabframe.integ.opt.mts.e

      pack $tabframe.integ.opt -side top -fill x -padx 2
   pack $tabframe.integ -side top -padx 5 -fill x
   Bubble::Create $tabframe.integ "[lindex $Bubble(SimIntegration) $GDefs(Lang)]"


   #----- Other parameters.

   labelframe $tabframe.others -text "[lindex $Lbl(OtherParameters) $GDefs(Lang)]"
      frame $tabframe.others.opt

         #----- Event Type.
         Option::Create $tabframe.others.opt.event [lindex $Lbl(Event) $GDefs(Lang)] MLDP1::Sim(Event) 1 -1 $MLDP1::Sim(ListEvent) ""
         pack $tabframe.others.opt.event -side top -ipady 1 -fill x

         #----- Virus Source Type.
         if { $Sim(SrcType) == "virus" } {
            Option::Create $tabframe.others.opt.virus [lindex $Lbl(Virus) $GDefs(Lang)] { MLDP1::Sim(Species) MLDP1::Sim(VirusID) } 0 -1 [lindex $MLDP1::Sim(ListVirusName) $GDefs(Lang)] "set MLDP1::Sim(VirusType) \[lindex \$MLDP1::Sim(ListVirusType) \$MLDP1::Sim(VirusID)\]"
            pack $tabframe.others.opt.virus -side top -ipady 1 -fill x
            Bubble::Create $tabframe.others.opt.virus "[lindex $Bubble(Virus) $GDefs(Lang)]"
         }

         #----- Grid Resolution.
         frame $tabframe.others.opt.grid
         Option::Create $tabframe.others.opt.grid.res [lindex $Lbl(Scale) $GDefs(Lang)] MLDP1::Sim(Scale) 0 7 $MLDP1::Sim(ListScale) "MLDP1::SetGridScaleRes ; MLDP1::GridDef"
         Option::Create $tabframe.others.opt.grid.src "" MLDP1::Sim(Src) 0 14 $MLDP1::Sim(Names) "MLDP1::SetSrc"
         checkbutton $tabframe.others.opt.grid.sel -variable Page::Data(ToolMode) -onvalue MLDP1 -offvalue SPI \
            -image ARROW -indicatoron 0 -relief sunken -bd 1 -overrelief raised -offrelief flat \
            -command { SPI::ToolMode $Page::Data(ToolMode) Data True } -selectcolor $GDefs(ColorFrame)
         pack $tabframe.others.opt.grid.res -side left -ipady 1
         pack $tabframe.others.opt.grid.src -side left -ipady 1
         pack $tabframe.others.opt.grid.sel -side left
         pack $tabframe.others.opt.grid     -side top -fill x

         #----- Meteorological Model.
         frame $tabframe.others.opt.met
         Option::Create $tabframe.others.opt.met.model [lindex $Lbl(Meteo) $GDefs(Lang)] MLDP1::Sim(Meteo) 0 7 $MLDP1::Sim(ListMeteoModel) "MLDP1::ReloadLaunchParams"
         Option::Create $tabframe.others.opt.met.delta [lindex $Lbl(MeteoDelta) $GDefs(Lang)] MLDP1::Sim(Delta) 0 6 $MLDP1::Sim(ListMeteoDelta) "MLDP1::CheckFileSize"
         button $tabframe.others.opt.met.path -image OPEN -relief flat -bd 0 -overrelief raised \
                -command "Model::GetMetPath .mldp1new MLDP1::Sim(DBaseDiag) MLDP1::Sim(DBaseProg)"
         pack $tabframe.others.opt.met.model -side left -ipady 1
         pack $tabframe.others.opt.met.delta -side left -ipady 1
         pack $tabframe.others.opt.met.path  -side left
         pack $tabframe.others.opt.met       -side top -fill x

         #----- Vertical levels [m].
         Option::Create $tabframe.others.opt.levels [lindex $Lbl(VerticalLevels) $GDefs(Lang)] MLDP1::Sim(VerticalLevels) 1 -1 $MLDP1::Sim(ListVerticalLevels) ""
         set MLDP1::Sim(VerticalLevelsFrm) $tabframe.others.opt.levels
         set MLDP1::Sim(VerticalLevelsEnt) $tabframe.others.opt.levels.e
         pack $tabframe.others.opt.levels -side top -ipady 1 -fill x

         #----- Horizontal wind velocity variance for mesoscale fluctuations [m2/s2].
         Option::Create $tabframe.others.opt.varmesoscale [lindex $Lbl(VarMesoscale) $GDefs(Lang)] MLDP1::Sim(VarMesoscale) 1 -1 $MLDP1::Sim(ListVarMesoscale) ""
         set MLDP1::Sim(VarMesoscaleEnt) $tabframe.others.opt.varmesoscale.e
         pack $tabframe.others.opt.varmesoscale -side top -ipady 1 -fill x

         #----- Lagrangian time scale for mesoscale fluctuations [s].
         Option::Create $tabframe.others.opt.timescale [lindex $Lbl(Timescale) $GDefs(Lang)] MLDP1::Sim(Timescale) 1 -1 $MLDP1::Sim(ListTimescale) ""
         set MLDP1::Sim(TimescaleEnt) $tabframe.others.opt.timescale.e
         pack $tabframe.others.opt.timescale -side top -ipady 1 -fill x

         #----- Reflection level [hyb|eta|sig].
         Option::Create $tabframe.others.opt.reflect [lindex $Lbl(ReflectionLevel) $GDefs(Lang)] MLDP1::Sim(ReflectionLevel) 1 -1 $MLDP1::Sim(ListReflectionLevel) ""
         set MLDP1::Sim(ReflectionLevelEnt) $tabframe.others.opt.reflect.e
         pack $tabframe.others.opt.reflect -side top -ipady 1 -fill x

      pack $tabframe.others.opt -side top -fill x -padx 2
   pack $tabframe.others -side top -padx 5 -pady 5 -fill x

   Bubble::Create $tabframe.others                    "[lindex $Bubble(OtherParameters) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.event          "[lindex $Bubble(Event) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.grid.res       "[lindex $Bubble(Scale) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.grid.src       "[lindex $Bubble(MoveGrid1) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.grid.sel       "[lindex $Bubble(MoveGrid2) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.met.model      "[lindex $Bubble(Meteo) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.met.delta      "[lindex $Bubble(MeteoDelta) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.met.path       "[lindex $Bubble(ModifyPath) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.levels         "[lindex $Bubble(VerticalLevels) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.varmesoscale   "[lindex $Bubble(VarMesoscale) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.timescale      "[lindex $Bubble(Timescale) $GDefs(Lang)]"
   Bubble::Create $tabframe.others.opt.reflect        "[lindex $Bubble(ReflectionLevel) $GDefs(Lang)]"

   #----- Emission Tab.

   set tabframe [TabFrame::Add .mldp1new.opt 1 "[lindex $Lbl(Emission) $GDefs(Lang)]" False]

   #----- Emission column.

   labelframe $tabframe.column -text "[lindex $Lbl(Column) $GDefs(Lang)]"

   set MLDP1::Sim(EmissionColumnFrame) $tabframe.column

   #----- Number of particles.

   frame $tabframe.column.nbpart
      label $tabframe.column.nbpart.lbl -relief flat -anchor w -text "[lindex $Lbl(EmNumberParticles) $GDefs(Lang)]"
      entry $tabframe.column.nbpart.ent -relief sunken -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Sim(EmNumberParticles) -width 60
      bind $tabframe.column.nbpart.ent <Button-1> "MLDP1::ComputeMass"
      pack $tabframe.column.nbpart.lbl $tabframe.column.nbpart.ent -side left
   pack $tabframe.column.nbpart -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.column.nbpart "[lindex $Bubble(EmNumberParticles) $GDefs(Lang)]"

   #----- Density [microgram/m3].

   if { $MLDP1::Sim(SrcType) == "volcano" } {
      frame $tabframe.column.density
         label $tabframe.column.density.lbl -relief flat -anchor w -text "[lindex $Lbl(EmDensity) $GDefs(Lang)]"
         entry $tabframe.column.density.ent -relief sunken -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Sim(EmDensity) -width 60
         bind $tabframe.column.density.ent <Key-Tab> "MLDP1::ComputeMass"
         bind $tabframe.column.density.ent <Button-1> "MLDP1::ComputeMass"
         pack $tabframe.column.density.lbl $tabframe.column.density.ent -side left
      pack $tabframe.column.density -side top -anchor w -padx 2 -fill x
      Bubble::Create $tabframe.column.density "[lindex $Bubble(EmDensity) $GDefs(Lang)]"
   }

   #----- Maximum plume height [m].

   frame $tabframe.column.height
      label $tabframe.column.height.lbl -relief flat -anchor w -text "[lindex $Lbl(EmHeight) $GDefs(Lang)]"
      entry $tabframe.column.height.ent -relief sunken -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Sim(EmHeight) -width 60
      if { $MLDP1::Sim(SrcType) == "volcano" } {
         bind $tabframe.column.height.ent <Key-Tab> "MLDP1::ComputeMass"
         bind $tabframe.column.height.ent <Button-1> "MLDP1::ComputeMass"
      }
      pack $tabframe.column.height.lbl $tabframe.column.height.ent -side left
   pack $tabframe.column.height -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.column.height "[lindex $Bubble(EmHeight) $GDefs(Lang)]"

   #----- Total released mass [microgram].
   if { $MLDP1::Sim(SrcType) == "volcano" } {
      set Sim(EmMassOld) $Sim(EmMass)
      Option::Create  $tabframe.column.mass [lindex $Lbl(EmMass) $GDefs(Lang)] { MLDP1::Sim(EmMass) MLDP1::Sim(EmMassMode) } \
          0 -1 [lindex $MLDP1::Sim(ListEmMassMode) $GDefs(Lang)] "MLDP1::EnableDisableMass"
      #----- Configure background and foreground entry wigdet when disabled.
      $tabframe.column.mass.e configure -state disabled -disabledbackground $GDefs(ColorFrame) -disabledforeground $GDefs(ColorOff)
      bind $tabframe.column.mass.e <Button-1> "MLDP1::ComputeMass"
      bind $tabframe.column.mass.b <Button-1> "MLDP1::ComputeMass"
      pack $tabframe.column.mass -side top -anchor w -padx 2 -fill x
      Bubble::Create $tabframe.column.mass  "[lindex $Bubble(MassMode) $GDefs(Lang)]"
   }

   #----- Column radius [m].
   frame $tabframe.column.radius
      label $tabframe.column.radius.lbl -relief flat -anchor w -text "[lindex $Lbl(EmRadius) $GDefs(Lang)]"
      entry $tabframe.column.radius.ent -relief sunken -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Sim(EmRadius) -width 60
      bind $tabframe.column.radius.ent <Button-1> "MLDP1::ComputeMass"
      pack $tabframe.column.radius.lbl $tabframe.column.radius.ent -side left
   pack $tabframe.column.radius -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.column.radius "[lindex $Bubble(Radius) $GDefs(Lang)]"

   #----- Particles size distribution.
   if { $MLDP1::Sim(SrcType) == "volcano" } {
      Option::Create  $tabframe.column.size [lindex $Lbl(EmSizeDist) $GDefs(Lang)] { MLDP1::Sim(EmSizeDist) MLDP1::Sim(EmSizeDistValue) } \
         0 -1 [lindex $MLDP1::Sim(ListEmSizeDist) $GDefs(Lang)] ""
      bind $tabframe.column.size.e <Button-1> "MLDP1::ComputeMass"
      bind $tabframe.column.size.b <Button-1> "MLDP1::ComputeMass"
      pack $tabframe.column.size -side top -anchor w -padx 2 -fill x
      Bubble::Create $tabframe.column.size  "[lindex $Bubble(EmSizeDist) $GDefs(Lang)]"
   }

   #----- Plume vertical distribution.
   Option::Create  $tabframe.column.vertical [lindex $Lbl(EmVerticalDist) $GDefs(Lang)] { MLDP1::Sim(EmVerticalDist) MLDP1::Sim(EmVerticalDistValue) } \
      0 -1 [lindex $MLDP1::Sim(ListEmVerticalDist) $GDefs(Lang)] ""
   bind $tabframe.column.vertical.e <Button-1> "MLDP1::ComputeMass"
   bind $tabframe.column.vertical.b <Button-1> "MLDP1::ComputeMass"
   pack $tabframe.column.vertical -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.column.vertical  "[lindex $Bubble(EmVerticalDist) $GDefs(Lang)]"

   pack $tabframe.column -side top -padx 5 -pady 5 -fill x
   Bubble::Create $tabframe.column "[lindex $Bubble(Column) $GDefs(Lang)]"

   #----- Emission scenario.
   labelframe $tabframe.scenario -text "[lindex $Lbl(Scenario) $GDefs(Lang)]"

   set MLDP1::Sim(ScenarioFrame) $tabframe.scenario

   #----- Release scenario name.
   frame $tabframe.scenario.name
      label $tabframe.scenario.name.lbl -relief flat -anchor w -text "[lindex $Lbl(ScenarioName) $GDefs(Lang)]"
      ComboBox::Create $tabframe.scenario.name.ent MLDP1::Sim(EmScenario) noedit sorted nodouble -1 $MLDP1::Sim(EmList) 10 3 "MLDP1::EmissionSelect"
   bind $tabframe.scenario.name.ent <Button-1> "MLDP1::ComputeMass"
   pack $tabframe.scenario.name.lbl -side left -padx 2
   pack $tabframe.scenario.name.ent -side left -padx 2 -fill x -expand true
   pack $tabframe.scenario.name -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.scenario.name.lbl "[lindex $Bubble(ScenarioName) $GDefs(Lang)]"
   Bubble::Create $tabframe.scenario.name.ent "[lindex $Bubble(ScenarioSelect) $GDefs(Lang)]"

   #----- Number of intervals.
   frame $tabframe.scenario.nbint
      label $tabframe.scenario.nbint.lbl -relief flat -anchor w -text "[lindex $Lbl(NbIntervals) $GDefs(Lang)]"
      entry $tabframe.scenario.nbint.ent -relief sunken -bd 1 -textvariable MLDP1::Sim(EmNbIntervals) -width 60 -state disabled
      pack $tabframe.scenario.nbint.lbl $tabframe.scenario.nbint.ent -side left -padx 2
   pack $tabframe.scenario.nbint -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.scenario.nbint "[lindex $Bubble(NbIntervals) $GDefs(Lang)]"

   #----- Number of isotopes.
   if { $MLDP1::Sim(SrcType) == "accident" } {
      frame $tabframe.scenario.nbiso
         label $tabframe.scenario.nbiso.lbl -relief flat -anchor w -text "[lindex $Lbl(NbIsotopes) $GDefs(Lang)]"
         entry $tabframe.scenario.nbiso.ent -relief sunken -bd 1 -textvariable MLDP1::Sim(EmNbIso) -width 60 -state disabled
         pack $tabframe.scenario.nbiso.lbl $tabframe.scenario.nbiso.ent -side left -padx 2
      pack $tabframe.scenario.nbiso -side top -anchor w -padx 2 -fill x
      Bubble::Create $tabframe.scenario.nbiso "[lindex $Bubble(NbIsotopes) $GDefs(Lang)]"
   }

   #----- Total emission duration [s].
   frame $tabframe.scenario.totdur
      label $tabframe.scenario.totdur.lbl -relief flat -anchor w -text "[lindex $Lbl(TotalDuration) $GDefs(Lang)]"
      entry $tabframe.scenario.totdur.ent -relief sunken -bd 1 -textvariable MLDP1::Sim(EmTotalDuration) -width 60 -state disabled
      pack $tabframe.scenario.totdur.lbl $tabframe.scenario.totdur.ent -side left -padx 2
   pack $tabframe.scenario.totdur -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.scenario.totdur "[lindex $Bubble(TotalDuration) $GDefs(Lang)]"

   #----- Effective emission duration [s].
   frame $tabframe.scenario.effdur
      label $tabframe.scenario.effdur.lbl -relief flat -anchor w -text "[lindex $Lbl(EffectiveDuration) $GDefs(Lang)]"
      entry $tabframe.scenario.effdur.ent -relief sunken -bd 1 -textvariable MLDP1::Sim(EmEffectiveDuration) -width 60 -state disabled
      pack $tabframe.scenario.effdur.lbl $tabframe.scenario.effdur.ent -side left -padx 2
   pack $tabframe.scenario.effdur -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.scenario.effdur "[lindex $Bubble(EffectiveDuration) $GDefs(Lang)]"

   #----- Buttons.
   frame $tabframe.scenario.button
      button $tabframe.scenario.button.edit -text "[lindex $Lbl(Edit) $GDefs(Lang)]" -bd 1 -command "MLDP1::NewScenario .mldp1new"
      button $tabframe.scenario.button.delete -text "[lindex $Lbl(Suppress) $GDefs(Lang)]" -bd 1 -command "MLDP1::EmissionDelete"
      pack $tabframe.scenario.button.edit $tabframe.scenario.button.delete -side right
   pack $tabframe.scenario.button -side top -anchor w -padx 5 -pady 10 -fill x -expand true
   Bubble::Create $tabframe.scenario.button.edit "[lindex $Bubble(EditScenario) $GDefs(Lang)]"
   Bubble::Create $tabframe.scenario.button.delete "[lindex $Bubble(DeleteScenario) $GDefs(Lang)]"


   pack $tabframe.scenario -side top -padx 5 -fill x
   Bubble::Create $tabframe.scenario "[lindex $Bubble(Scenario) $GDefs(Lang)]"

   #----- Launching Tab.

   set tabframe [TabFrame::Add .mldp1new.opt 1 "[lindex $Lbl(Launch) $GDefs(Lang)]" False]

   labelframe $tabframe.params -text "[lindex $Lbl(Params) $GDefs(Lang)]"

   #----- Host.
   Option::Create $tabframe.params.host [lindex $Lbl(Host) $GDefs(Lang)] MLDP1::Sim(Host) 0 -1 $MLDP1::Sim(Hosts) "MLDP1::ReloadMetData ; MLDP1::UpdateListNbCPUsMeteo"
   pack $tabframe.params.host -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.params.host "[lindex $Bubble(Host) $GDefs(Lang)]"
   set MLDP1::Sim(HostFrm) $tabframe.params.host

   #----- Queue.
   Option::Create $tabframe.params.queue [lindex $Lbl(Queue) $GDefs(Lang)] MLDP1::Sim(Queue) 0 -1 $MLDP1::Sim(Queues) ""
   pack $tabframe.params.queue -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.params.queue "[lindex $Bubble(Queue) $GDefs(Lang)]"
   set MLDP1::Sim(QueueFrm) $tabframe.params.queue

   #----- Nb CPUs for meteorological preprocessing.
   Option::Create $tabframe.params.metcpu [lindex $Lbl(MetCPU) $GDefs(Lang)] MLDP1::Sim(NbCPUsMeteo) 0 -1 $MLDP1::Sim(ListNbCPUsMeteo) "MLDP1::SetNbOMPthreads"
   pack $tabframe.params.metcpu -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.params.metcpu "[lindex $Bubble(MetCPU) $GDefs(Lang)]"
   set MLDP1::Sim(NbCPUsMeteoFrm) $tabframe.params.metcpu

   #----- Nb MPI tasks for model.
   Option::Create $tabframe.params.mpi [lindex $Lbl(NbMPItasks) $GDefs(Lang)] MLDP1::Sim(NbMPItasks) 0 -1 $MLDP1::Sim(ListNbMPItasks) ""
   pack $tabframe.params.mpi -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.params.mpi "[lindex $Bubble(NbMPItasks) $GDefs(Lang)]"
   set MLDP1::Sim(NbMPItasksFrm) $tabframe.params.mpi

   #----- Nb OMP threads for model.
   Option::Create $tabframe.params.omp [lindex $Lbl(NbOMPthreads) $GDefs(Lang)] MLDP1::Sim(NbOMPthreads) 0 -1 $MLDP1::Sim(ListNbOMPthreads) ""
   pack $tabframe.params.omp -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.params.omp "[lindex $Bubble(NbOMPthreads) $GDefs(Lang)]"
   set MLDP1::Sim(NbOMPthreadsFrm) $tabframe.params.omp

   #----- OMP thread factor.
   Option::Create $tabframe.params.smt [lindex $Lbl(OMPthreadFact) $GDefs(Lang)] MLDP1::Sim(OMPthreadFact) 0 -1 $MLDP1::Sim(ListOMPthreadFact) ""
   pack $tabframe.params.smt -side top -anchor w -padx 2 -fill x
   Bubble::Create $tabframe.params.smt "[lindex $Bubble(OMPthreadFact) $GDefs(Lang)]"
   set MLDP1::Sim(OMPthreadFactFrm) $tabframe.params.smt

   #----- Enabling/Disabling email monitoring option.
   checkbutton $tabframe.params.emonitor -anchor w -text "[lindex $Lbl(IsEmailAddress) $GDefs(Lang)]" -offvalue 0 -onvalue 1 \
       -variable MLDP1::Sim(IsEmailAddress) -indicatoron true -command "MLDP1::UpdateEmail"
   pack $tabframe.params.emonitor -side top -anchor w
   Bubble::Create $tabframe.params.emonitor "[lindex $Bubble(IsEmailAddress) $GDefs(Lang)]"

   #----- Email address.
   Option::Create $tabframe.params.email [lindex $Lbl(Email) $GDefs(Lang)] MLDP1::Sim(EmailAddress) 1 -1 $MLDP1::Sim(ListEmailAddress) ""
   if { $Sim(IsEmailAddress) } {
      pack $tabframe.params.email -side top -anchor w -padx 2 -fill x
   }
   Bubble::Create $tabframe.params.email "[lindex $Bubble(EmailAddress) $GDefs(Lang)]"
   set MLDP1::Sim(EmailFrm) $tabframe.params.email
   set MLDP1::Sim(EmailEnt) $tabframe.params.email.e

   #----- Button.
   frame $tabframe.params.button
      button $tabframe.params.button.launch -text "[lindex $Lbl(LaunchModel) $GDefs(Lang)]" -bd 1 -command "MLDP1::SimLaunchCheck"
      pack $tabframe.params.button.launch -side right
   pack $tabframe.params.button -side top -anchor w -padx 5 -pady 10 -fill x -expand true
   Bubble::Create $tabframe.params.button.launch "[lindex $Bubble(LaunchModel) $GDefs(Lang)]"
   set MLDP1::Sim(LaunchFrm) $tabframe.params.button

   pack $tabframe.params -side top -padx 5 -pady 5 -fill x

   #----- Button "Close"

   button .mldp1new.close -text "[lindex $Lbl(Close) $GDefs(Lang)]" -bd 1 -command { destroy .mldp1new ; MLDP1::ModeLeave }
   pack .mldp1new.close -side right -padx 5 -pady 5

   TabFrame::Select .mldp1new.opt 0 3
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::EnableDisableMass>
# Creation   : 27 September 2005 - A. Malo - CMC/CMOE
#
# But        : Enable or disable total mass released entry widget according
#              on which mode is selected for mass calculation.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::EnableDisableMass { } {
   global GDefs
   variable Sim

   if { $Sim(EmMassMode) == 0 } {

      #----- Total released mass is calculated according to empirical
      #----- formula of Sparks et al. (1997), so disable entry widget.
      $Sim(EmissionColumnFrame).mass.e configure -state disabled -disabledbackground $GDefs(ColorFrame) -disabledforeground $GDefs(ColorOff)

   } elseif { $Sim(EmMassMode) == 1 } {

      #----- Total released mass can be edited so enable entry widget.
      set Sim(EmMass) $Sim(EmMassOld)        ; #----- Update mass with temporary one.
      focus $Sim(EmissionColumnFrame).mass.e ; #----- Focus on this entry widget.
      $Sim(EmissionColumnFrame).mass.e configure -state normal -disabledbackground $GDefs(ColorFrame) -disabledforeground $GDefs(ColorOff)

   }

   #----- Compute total mass according to empirical formula of Sparks et al. (1997).
   MLDP1::ComputeMass

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::NewScenario>
# Creation   : 25 February 2003 - A. Malo - CMC/CMOE
#
# But        : Create new window for a specific source type
#              (accident release, volcano eruption, virus).
#
# Parametres :
#   <Parent> : Parent window.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::NewScenario { Parent } {
   variable Sim

   switch $Sim(SrcType) {
      "volcano"  { MLDP1::NewScenarioVolcan $Parent }
      "accident" { MLDP1::NewScenarioAccident $Parent }
      "virus"    { MLDP1::NewScenarioVirus $Parent }
   }

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::NewScenarioAccident>
# Creation   : 25 February 2003 - A. Malo - CMC/CMOE
#
# But        : Create new window to edit a selected (or add a new)
#              emission scenario for an accident release.
#
# Parametres :
#   <Parent> : Parent window.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::NewScenarioAccident { Parent } {
   global GDefs
   variable Sim
   variable Tmp
   variable Msg
   variable Lbl
   variable Bubble

   toplevel     .newscenario
   wm title     .newscenario "MLDP1: $Exp::Data(Name) - [lindex $Lbl(Scenario) $GDefs(Lang)]"
   wm transient .newscenario $Parent
   wm resizable .newscenario 0 0
   wm geom      .newscenario =715x435+[expr [winfo rootx $Parent]+330]+[expr [winfo rooty $Parent]+30]
   wm protocol  .newscenario WM_DELETE_WINDOW { }

   #----- Initialize variables for new accident type release scenario.
   MLDP1::NewScenarioAccidentInit

   #----- Emission scenario.
   frame .newscenario.emint

   labelframe .newscenario.emint.fr -text "[lindex $Lbl(Scenario) $GDefs(Lang)]"
   Bubble::Create .newscenario.emint.fr     "[lindex $Bubble(Scenario) $GDefs(Lang)]"

   frame .newscenario.emint.fr.box1
   frame .newscenario.emint.fr.box1.data

   #----- Release scenario name.
   frame .newscenario.emint.fr.box1.data.name
      label .newscenario.emint.fr.box1.data.name.lbl -relief flat -anchor w -text "[lindex $Lbl(ScenarioName) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.name.ent -relief sunken -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Tmp(Scenario) -width 20
      pack .newscenario.emint.fr.box1.data.name.lbl .newscenario.emint.fr.box1.data.name.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.name -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.name "[lindex $Bubble(ScenarioName) $GDefs(Lang)]"
   set MLDP1::Sim(ScenarioNameEntry) .newscenario.emint.fr.box1.data.name.ent

   #----- Total emission duration [s].
   frame .newscenario.emint.fr.box1.data.totdur
      label .newscenario.emint.fr.box1.data.totdur.lbl -relief flat -anchor w -text "[lindex $Lbl(TotalDuration) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.totdur.ent -relief sunken -bd 1 -textvariable MLDP1::Tmp(TotalDuration) -width 20 -state disabled
      pack .newscenario.emint.fr.box1.data.totdur.lbl .newscenario.emint.fr.box1.data.totdur.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.totdur -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.totdur "[lindex $Bubble(TotalDuration2) $GDefs(Lang)]"

   #----- Effective emission duration [s].
   frame .newscenario.emint.fr.box1.data.effdur
      label .newscenario.emint.fr.box1.data.effdur.lbl -relief flat -anchor w -text "[lindex $Lbl(EffectiveDuration) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.effdur.ent -relief sunken -bd 1 -textvariable MLDP1::Tmp(EffectiveDuration) -width 20 -state disabled
      pack .newscenario.emint.fr.box1.data.effdur.lbl .newscenario.emint.fr.box1.data.effdur.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.effdur -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.effdur "[lindex $Bubble(EffectiveDuration2) $GDefs(Lang)]"

   pack .newscenario.emint.fr.box1.data -side left
   pack .newscenario.emint.fr.box1 -side top


   frame .newscenario.emint.fr.box2 -bd 1 -relief sunken
   set MLDP1::Sim(ReleaseRatesFrame) .newscenario.emint.fr.box2

   #----- Headers.

   frame .newscenario.emint.fr.box2.header
      label .newscenario.emint.fr.box2.header.dur -relief raised -width 20 -bd 1 -text "[lindex $Lbl(Duration) $GDefs(Lang)]"
      pack .newscenario.emint.fr.box2.header.dur -side left -fill x -fill y
      Bubble::Create .newscenario.emint.fr.box2.header.dur "[lindex $Bubble(DurationInter) $GDefs(Lang)]"

      frame .newscenario.emint.fr.box2.header.rates
         label .newscenario.emint.fr.box2.header.rates.lbl -relief raised -height 3 -width 40 -bd 1 -text "[lindex $Lbl(ReleaseRateAccident) $GDefs(Lang)]"
         button .newscenario.emint.fr.box2.header.rates.add -text "[lindex $Lbl(Add) $GDefs(Lang)]" -relief raised -bd 1 -width 10 -state active -command "MLDP1::SpeciesStart"
         pack .newscenario.emint.fr.box2.header.rates.lbl .newscenario.emint.fr.box2.header.rates.add -side top -fill x -expand true
         Bubble::Create .newscenario.emint.fr.box2.header.rates.add "[lindex $Bubble(AddIso) $GDefs(Lang)]"
         Bubble::Create .newscenario.emint.fr.box2.header.rates.lbl "[lindex $Bubble(ReleaseRate) $GDefs(Lang)]"

         frame .newscenario.emint.fr.box2.header.rates.iso
         set MLDP1::Sim(IsotopeLabels) .newscenario.emint.fr.box2.header.rates.iso
         for { set j 0 } { $j < $Sim(EmMaxIso) } { incr j } {
            button .newscenario.emint.fr.box2.header.rates.iso.name$j -relief raised -width 11 -bd 1 -textvariable MLDP1::Tmp(Iso$j) \
               -command "MLDP1::SpeciesDelete $j"
            label .newscenario.emint.fr.box2.header.rates.iso.kill$j -bitmap @$GDefs(Dir)/Resources/Bitmap/cvdel.xbm -bd 0
            pack .newscenario.emint.fr.box2.header.rates.iso.name$j -side left -ipadx 2 -fill x -expand true
            place .newscenario.emint.fr.box2.header.rates.iso.kill$j -in .newscenario.emint.fr.box2.header.rates.iso.name$j \
               -relx 1 -rely 0 -anchor ne -width 15 -height 15
            Bubble::Create .newscenario.emint.fr.box2.header.rates.iso.name$j "[lindex $Bubble(DeleteIso) $GDefs(Lang)]"
         }
         pack .newscenario.emint.fr.box2.header.rates.iso -side top -fill x -expand true
      pack .newscenario.emint.fr.box2.header.rates -side left -fill x -expand true
   pack .newscenario.emint.fr.box2.header -side top -anchor w -fill x -expand true

   #----- Entries.

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      frame .newscenario.emint.fr.box2.entry$i
         entry .newscenario.emint.fr.box2.entry$i.dur -relief sunken -width 20 -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Tmp(Duration$i)
         pack .newscenario.emint.fr.box2.entry$i.dur -side left
         Bubble::Create .newscenario.emint.fr.box2.entry$i.dur "[lindex $Bubble(DurationInter) $GDefs(Lang)]"

      frame .newscenario.emint.fr.box2.entry$i.rates
         for { set j 0 } { $j < $Sim(EmMaxIso) } { incr j } {
            entry .newscenario.emint.fr.box2.entry$i.rates.iso$j -relief sunken -width 15 -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Tmp(ReleaseRate$i.$j)
            pack .newscenario.emint.fr.box2.entry$i.rates.iso$j -side left
         }

      pack .newscenario.emint.fr.box2.entry$i.rates -side left -fill y
      pack .newscenario.emint.fr.box2.entry$i -side top -anchor w -fill x -expand true
      Bubble::Create .newscenario.emint.fr.box2.entry$i.rates "[lindex $Bubble(ReleaseRate2) $GDefs(Lang)]"
   }

   #----- Total released quantity.
   frame .newscenario.emint.fr.box2.quant -relief raised -bd 1
      label .newscenario.emint.fr.box2.quant.lbl -width 20 -pady 4 -bd 0 -text "[lindex $Lbl(TotalQuantity) $GDefs(Lang)]"
      pack .newscenario.emint.fr.box2.quant.lbl -side left -fill x -fill y

      frame .newscenario.emint.fr.box2.quant.tot
      for { set j 0 } { $j < $Sim(EmMaxIso) } { incr j } {
         entry .newscenario.emint.fr.box2.quant.tot.iso$j -relief sunken -width 15 -bd 1 -textvariable MLDP1::Tmp(ReleaseQuantity$j) -state disabled
         pack .newscenario.emint.fr.box2.quant.tot.iso$j -side left -fill y
      }
      pack .newscenario.emint.fr.box2.quant.tot -side left -fill y
   pack .newscenario.emint.fr.box2.quant -side top -anchor w -fill x -fill y -expand true
   Bubble::Create .newscenario.emint.fr.box2.quant "[lindex $Bubble(TotalQuantityAccident) $GDefs(Lang)]"

   pack .newscenario.emint.fr.box2 -side top -anchor w -padx 5 -pady 10
   pack .newscenario.emint.fr -side top -anchor w -fill x
   pack .newscenario.emint -side top -anchor w -padx 5 -pady 5 -fill x

   frame .newscenario.button
      button .newscenario.button.cancel -text "[lindex $Lbl(Cancel) $GDefs(Lang)]" -bd 1 -command { destroy .newscenario }
      button .newscenario.button.apply -text "[lindex $Lbl(Apply) $GDefs(Lang)]" -bd 1 -command "MLDP1::EmissionUpdate"
      pack .newscenario.button.apply .newscenario.button.cancel -side right
   pack .newscenario.button -side top -anchor w -padx 7 -fill x
   Bubble::Create .newscenario.button.cancel "[lindex $Bubble(Cancel) $GDefs(Lang)]"
   Bubble::Create .newscenario.button.apply "[lindex $Bubble(Apply) $GDefs(Lang)]"

   grab .newscenario
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::NewScenarioAccidentInit>
# Creation   : 25 February 2003 - A. Malo - CMC/CMOE
#
# But        : Initialize variables for new accident type release scenario.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::NewScenarioAccidentInit { } {
   variable Tmp
   variable Sim

   #----- Reset variables.

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
      set Tmp(Duration$i) ""
      for { set j 0 } { $j < $Sim(EmMaxIso) } { incr j } {
         set Tmp(ReleaseRate$i.$j)  ""
      }
   }

   for { set j 0 } { $j < $Sim(EmMaxIso) } { incr j } {
      set Tmp(ReleaseQuantity$j) ""
      set Tmp(Iso$j)             ""
   }

   #----- Initialize variables.

   set Tmp(Scenario)          $Sim(EmScenario)
   set Tmp(NbIntervals)       $Sim(EmNbIntervals)
   set Tmp(TotalDuration)     $Sim(EmTotalDuration)
   set Tmp(EffectiveDuration) $Sim(EmEffectiveDuration)
   set Tmp(Iso)               $Sim(EmIso.$Sim(EmScenario))
   set Tmp(Inter)             $Sim(EmInter.$Sim(EmScenario))

   set i 0
   foreach inter $Tmp(Inter) {
      set Tmp(Duration$i) [lindex $inter 0]
      for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
         set Tmp(ReleaseRate$i.$j) [lindex $inter [expr $j+1]]
      }
      incr i
   }

   for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
      set Tmp(Iso$j) [lindex [lindex $Tmp(Iso) $j] 0]
   }

   #----- Update (total and effective) emission durations and total released quantities for each isotope.

   MLDP1::UpdateEmissionDurationsTotalQuantityAccident

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::NewScenarioVirus>
# Creation   : 3 March 2004 - A. Malo - CMC/CMOE
#
# But        : Create new window to edit a selected (or add a new)
#              emission scenario for a virus release.
#
# Parametres :
#   <Parent> : Parent window.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::NewScenarioVirus { Parent } {
   global GDefs
   variable Sim
   variable Tmp
   variable Msg
   variable Lbl
   variable Bubble

   toplevel     .newscenario
   wm title     .newscenario "MLDP1: $Exp::Data(Name) - [lindex $Lbl(Scenario) $GDefs(Lang)]"
   wm transient .newscenario $Parent
   wm resizable .newscenario 0 0
   wm geom      .newscenario =320x385+[expr [winfo rootx $Parent]+330]+[expr [winfo rooty $Parent]+30]
   wm protocol  .newscenario WM_DELETE_WINDOW { }

   #----- Initialize variables for new virus type release scenario.
   MLDP1::NewScenarioVirusInit

   #----- Emission scenario.
   frame .newscenario.emint

   labelframe .newscenario.emint.fr -text "[lindex $Lbl(Scenario) $GDefs(Lang)]"
   Bubble::Create .newscenario.emint.fr     "[lindex $Bubble(Scenario) $GDefs(Lang)]"

   frame .newscenario.emint.fr.box1
   frame .newscenario.emint.fr.box1.data

   #----- Release scenario name.
   frame .newscenario.emint.fr.box1.data.name
      label .newscenario.emint.fr.box1.data.name.lbl -relief flat -anchor w -text "[lindex $Lbl(ScenarioName) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.name.ent -relief sunken -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Tmp(Scenario) -width 20
      pack .newscenario.emint.fr.box1.data.name.lbl .newscenario.emint.fr.box1.data.name.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.name -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.name "[lindex $Bubble(ScenarioName) $GDefs(Lang)]"
   set MLDP1::Sim(ScenarioNameEntry) .newscenario.emint.fr.box1.data.name.ent

   #----- Total emission duration [s].
   frame .newscenario.emint.fr.box1.data.totdur
      label .newscenario.emint.fr.box1.data.totdur.lbl -relief flat -anchor w -text "[lindex $Lbl(TotalDuration) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.totdur.ent -relief sunken -bd 1 -textvariable MLDP1::Tmp(TotalDuration) -width 20 -state disabled
      pack .newscenario.emint.fr.box1.data.totdur.lbl .newscenario.emint.fr.box1.data.totdur.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.totdur -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.totdur "[lindex $Bubble(TotalDuration2) $GDefs(Lang)]"

   #----- Effective emission duration [s].
   frame .newscenario.emint.fr.box1.data.effdur
      label .newscenario.emint.fr.box1.data.effdur.lbl -relief flat -anchor w -text "[lindex $Lbl(EffectiveDuration) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.effdur.ent -relief sunken -bd 1 -textvariable MLDP1::Tmp(EffectiveDuration) -width 20 -state disabled
      pack .newscenario.emint.fr.box1.data.effdur.lbl .newscenario.emint.fr.box1.data.effdur.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.effdur -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.effdur "[lindex $Bubble(EffectiveDuration2) $GDefs(Lang)]"

   pack .newscenario.emint.fr.box1.data -side left
   pack .newscenario.emint.fr.box1 -side top


   frame .newscenario.emint.fr.box2 -bd 1 -relief sunken
   set MLDP1::Sim(ReleaseRatesFrame) .newscenario.emint.fr.box2

   #----- Headers.

   frame .newscenario.emint.fr.box2.header
      label .newscenario.emint.fr.box2.header.dur -relief raised -width 20 -bd 1 -text "[lindex $Lbl(Duration) $GDefs(Lang)]"
      pack .newscenario.emint.fr.box2.header.dur -side left -fill x -fill y
      Bubble::Create .newscenario.emint.fr.box2.header.dur "[lindex $Bubble(DurationInter) $GDefs(Lang)]"

      label .newscenario.emint.fr.box2.header.rates -relief raised -height 3 -width 30 -bd 1 -text "[lindex $Lbl(ReleaseRateVirus) $GDefs(Lang)]"
      pack .newscenario.emint.fr.box2.header.rates -side left -fill x -expand true
      Bubble::Create .newscenario.emint.fr.box2.header.rates "[lindex $Bubble(ReleaseRateVirus) $GDefs(Lang)]"
   pack .newscenario.emint.fr.box2.header -side top -anchor w -fill x -expand true

   #----- Entries.

    for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

       frame .newscenario.emint.fr.box2.entry$i
          entry .newscenario.emint.fr.box2.entry$i.dur -relief sunken -width 20 -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Tmp(Duration$i)
          pack .newscenario.emint.fr.box2.entry$i.dur -side left
          Bubble::Create .newscenario.emint.fr.box2.entry$i.dur "[lindex $Bubble(DurationInter) $GDefs(Lang)]"

          entry .newscenario.emint.fr.box2.entry$i.rates -relief sunken -width 20 -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Tmp(ReleaseRate$i)
          pack .newscenario.emint.fr.box2.entry$i.rates -side left -fill x -expand true
          Bubble::Create .newscenario.emint.fr.box2.entry$i.rates "[lindex $Bubble(ReleaseRateVirus) $GDefs(Lang)]"
       pack .newscenario.emint.fr.box2.entry$i -side top -anchor w -fill x -expand true

    }

   #----- Total released quantity.
   frame .newscenario.emint.fr.box2.quant -relief raised -bd 1
      label .newscenario.emint.fr.box2.quant.lbl -width 20 -pady 4 -bd 0 -text "[lindex $Lbl(TotalQuantity) $GDefs(Lang)]"
      pack .newscenario.emint.fr.box2.quant.lbl -side left -fill x -fill y

      entry .newscenario.emint.fr.box2.quant.tot -relief sunken -width 30 -bd 1 -textvariable MLDP1::Tmp(ReleaseQuantity) -state disabled
      pack .newscenario.emint.fr.box2.quant.tot -side left -fill y

    pack .newscenario.emint.fr.box2.quant -side top -anchor w -fill x -fill y -expand true
    Bubble::Create .newscenario.emint.fr.box2.quant "[lindex $Bubble(TotalQuantityVirus) $GDefs(Lang)]"

    pack .newscenario.emint.fr.box2 -side top -anchor w -padx 5 -pady 10
    pack .newscenario.emint.fr -side top -anchor w -fill x
    pack .newscenario.emint -side top -anchor w -padx 5 -pady 5 -fill x

    frame .newscenario.button
       button .newscenario.button.cancel -text "[lindex $Lbl(Cancel) $GDefs(Lang)]" -bd 1 -command { destroy .newscenario }
       button .newscenario.button.apply -text "[lindex $Lbl(Apply) $GDefs(Lang)]" -bd 1 -command "MLDP1::EmissionUpdate"
       pack .newscenario.button.apply .newscenario.button.cancel -side right
    pack .newscenario.button -side top -anchor w -padx 7 -fill x
    Bubble::Create .newscenario.button.cancel "[lindex $Bubble(Cancel) $GDefs(Lang)]"
    Bubble::Create .newscenario.button.apply "[lindex $Bubble(Apply) $GDefs(Lang)]"

   grab .newscenario
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::NewScenarioVirusInit>
# Creation   : 3 March 2004 - A. Malo - CMC/CMOE
#
# But        : Initialize variables for new virus type release scenario.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::NewScenarioVirusInit { } {
   variable Tmp
   variable Sim

   #----- Reset variables.

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
      set Tmp(Duration$i)     ""
      set Tmp(ReleaseRate$i)  ""
   }
   set Tmp(ReleaseQuantity) ""

   #----- Initialize variables.

   set Tmp(Scenario)          $Sim(EmScenario)
   set Tmp(NbIntervals)       $Sim(EmNbIntervals)
   set Tmp(TotalDuration)     $Sim(EmTotalDuration)
   set Tmp(EffectiveDuration) $Sim(EmEffectiveDuration)
   set Tmp(Iso)               $Sim(EmIso.$Sim(EmScenario))
   set Tmp(Inter)             $Sim(EmInter.$Sim(EmScenario))

   set i 0
   foreach inter $Tmp(Inter) {
      set Tmp(Duration$i)    [lindex $inter 0]
      set Tmp(ReleaseRate$i) [lindex $inter 1]
      incr i
   }

   #----- Update (total and effective) emission durations and total released quantity.

   MLDP1::UpdateEmissionDurationsTotalQuantityVirus

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::NewScenarioVolcan>
# Creation   : 25 February 2003 - A. Malo - CMC/CMOE
#
# But        : Create new window to edit a selected (or add a new)
#              emission scenario for a volcano eruption.
#
# Parametres :
#   <Parent> : Parent window.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::NewScenarioVolcan { Parent } {
   global GDefs
   variable Sim
   variable Tmp
   variable Msg
   variable Lbl
   variable Bubble

   toplevel     .newscenario
   wm title     .newscenario "MLDP1: $Exp::Data(Name) - [lindex $Lbl(Scenario) $GDefs(Lang)]"
   wm transient .newscenario $Parent
   wm resizable .newscenario 0 0
   wm geom      .newscenario =320x370+[expr [winfo rootx $Parent]+330]+[expr [winfo rooty $Parent]+30]
   wm protocol  .newscenario WM_DELETE_WINDOW { }

   #----- Initialize variables for new volcano type release scenario.
   MLDP1::NewScenarioVolcanInit

   frame .newscenario.emint
   labelframe .newscenario.emint.fr -text "[lindex $Lbl(Scenario) $GDefs(Lang)]"

   frame .newscenario.emint.fr.box1
   frame .newscenario.emint.fr.box1.data

   #----- Release scenario name.
   frame .newscenario.emint.fr.box1.data.name
      label .newscenario.emint.fr.box1.data.name.lbl -relief flat -anchor w -text "[lindex $Lbl(ScenarioName) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.name.ent -relief sunken -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Tmp(Scenario) -width 60
      pack .newscenario.emint.fr.box1.data.name.lbl .newscenario.emint.fr.box1.data.name.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.name -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.name "[lindex $Bubble(ScenarioName) $GDefs(Lang)]"
   set MLDP1::Sim(ScenarioNameEntry) .newscenario.emint.fr.box1.data.name.ent

   #----- Total emission duration [s].
   frame .newscenario.emint.fr.box1.data.totdur
      label .newscenario.emint.fr.box1.data.totdur.lbl -relief flat -anchor w -text "[lindex $Lbl(TotalDuration) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.totdur.ent -relief sunken -bd 1 -textvariable MLDP1::Tmp(TotalDuration) -width 60 -state disabled
      pack .newscenario.emint.fr.box1.data.totdur.lbl .newscenario.emint.fr.box1.data.totdur.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.totdur -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.totdur "[lindex $Bubble(TotalDuration) $GDefs(Lang)]"

   #----- Effective emission duration [s].
   frame .newscenario.emint.fr.box1.data.effdur
      label .newscenario.emint.fr.box1.data.effdur.lbl -relief flat -anchor w -text "[lindex $Lbl(EffectiveDuration) $GDefs(Lang)]"
      entry .newscenario.emint.fr.box1.data.effdur.ent -relief sunken -bd 1 -textvariable MLDP1::Tmp(EffectiveDuration) -width 60 -state disabled
      pack .newscenario.emint.fr.box1.data.effdur.lbl .newscenario.emint.fr.box1.data.effdur.ent -side left -padx 2
   pack .newscenario.emint.fr.box1.data.effdur -side top -anchor w -padx 2 -fill x
   Bubble::Create .newscenario.emint.fr.box1.data.effdur "[lindex $Bubble(EffectiveDuration) $GDefs(Lang)]"

   pack .newscenario.emint.fr.box1.data -side left
   pack .newscenario.emint.fr.box1 -side top


   frame .newscenario.emint.fr.box2 -bd 1 -relief sunken
   set MLDP1::Sim(ReleaseRatesFrame) .newscenario.emint.fr.box2

   #----- Header.
   frame .newscenario.emint.fr.box2.header
      label .newscenario.emint.fr.box2.header.dur -relief raised -width 20 -bd 1 -text "[lindex $Lbl(Duration) $GDefs(Lang)]"
      pack .newscenario.emint.fr.box2.header.dur -side left -fill x -fill y
      Bubble::Create .newscenario.emint.fr.box2.header.dur "[lindex $Bubble(DurationInter) $GDefs(Lang)]"

      label .newscenario.emint.fr.box2.header.em  -relief raised -height 3 -width 30 -bd 1 -text "[lindex $Lbl(Period) $GDefs(Lang)]"
      pack .newscenario.emint.fr.box2.header.em -side left -fill x -expand true
      Bubble::Create .newscenario.emint.fr.box2.header.em  "[lindex $Bubble(Period) $GDefs(Lang)]"
   pack .newscenario.emint.fr.box2.header -side top -anchor w -fill x -expand true

   #----- Entries.
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      frame .newscenario.emint.fr.box2.entry$i
         entry .newscenario.emint.fr.box2.entry$i.dur -relief sunken -width 20 -bd 1 -bg $GDefs(ColorLight) -textvariable MLDP1::Tmp(Duration$i)
         pack .newscenario.emint.fr.box2.entry$i.dur -side left
         Bubble::Create .newscenario.emint.fr.box2.entry$i.dur "[lindex $Bubble(DurationInter) $GDefs(Lang)]"

         Option::Create .newscenario.emint.fr.box2.entry$i.em "" [list MLDP1::Tmp(Label$i) MLDP1::Tmp(Value$i)] \
            0 -1 [lindex $Sim(ListEmissionLabel) $GDefs(Lang)] "" $Sim(ListEmissionValue)
      pack .newscenario.emint.fr.box2.entry$i.em -side left -fill x -expand true
         Bubble::Create .newscenario.emint.fr.box2.entry$i.em "[lindex $Bubble(Period) $GDefs(Lang)]"
      pack .newscenario.emint.fr.box2.entry$i -side top -anchor w -fill x -expand true
   }

   pack .newscenario.emint.fr.box2 -side top -anchor w -padx 5 -pady 10
   pack .newscenario.emint.fr -side top -anchor w -fill x
   pack .newscenario.emint -side top -anchor w -padx 5 -pady 5 -fill x

   frame .newscenario.button
      button .newscenario.button.cancel -text "[lindex $Lbl(Cancel) $GDefs(Lang)]" -bd 1 -command { destroy .newscenario }
      button .newscenario.button.apply -text "[lindex $Lbl(Apply) $GDefs(Lang)]" -bd 1 -command "MLDP1::EmissionUpdate"
      pack .newscenario.button.apply .newscenario.button.cancel -side right
   pack .newscenario.button -side top -anchor w -padx 7 -fill x
   Bubble::Create .newscenario.button.cancel "[lindex $Bubble(Cancel) $GDefs(Lang)]"
   Bubble::Create .newscenario.button.apply "[lindex $Bubble(Apply) $GDefs(Lang)]"

   grab .newscenario
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::NewScenarioVolcanInit>
# Creation   : 4 March 2004 - A. Malo - CMC/CMOE
#
# But        : Initialize variables for new volcano type release scenario.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::NewScenarioVolcanInit { } {
   global   GDefs
   variable Tmp
   variable Sim

   #----- Reset variables.

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
      set Tmp(Duration$i) ""
      set Tmp(Label$i)    ""
      set Tmp(Value$i)    ""
   }

   #----- Initialize variables.

   set Tmp(Scenario)          $Sim(EmScenario)
   set Tmp(NbIntervals)       $Sim(EmNbIntervals)
   set Tmp(TotalDuration)     $Sim(EmTotalDuration)
   set Tmp(EffectiveDuration) $Sim(EmEffectiveDuration)
   set Tmp(Iso)               $Sim(EmIso.$Sim(EmScenario))
   set Tmp(Inter)             $Sim(EmInter.$Sim(EmScenario))

   set i      0
   set labels [lindex $Sim(ListEmissionLabel) $GDefs(Lang)]

   foreach inter $Tmp(Inter) {
      set Tmp(Duration$i) [lindex $inter 0]
      set Tmp(Value$i)    [lindex $inter 1]

      if { $Tmp(Value$i) == 1 } {
         set Tmp(Label$i) [lindex $labels 0]
      } elseif { $Tmp(Value$i) == 0 } {
         set Tmp(Label$i) [lindex $labels 1]
      }

      incr i
   }

   #----- Update (total and effective) emission durations.

   MLDP1::UpdateEmissionDurationsVolcano

}

#----------------------------------------------------------------------------
# Nom      : <MLDP1::Product>
# Creation : Septembre 2005 - J.P. Gauthier - CMC/CMOE
#
# But      : Lire les donnees et initialiser le produit
#
# Parametres  :
#    <Frame>  : Page
#    <Type>   : Type de donnees
#    <Layout> : Layout (produit)
#
# Retour :
#   Aucun.
#
# Remarques :
#    Aucune.
#
# Modifications  :
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::CallProduct { Frame Type Layout } {

   foreach box [FieldBox::Get] {
      FieldBox::Close $box
   }
   foreach box [TrajBox::Get] {
      TrajBox::Close $box
   }
   MLDP1::Result $Type
   SPI::LayoutLoad $Frame $Layout
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::PopUp>
# Creation   : Aout 2001 - J.P. Gauthier - CMC/CMOE
#
# But        : Afficher le popup contextuel des simulations.
#
# Parametres :
#    <X>        : ...
#    <Y>        : ...
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::PopUp { X Y } {
   global   GDefs
   variable Sim
   variable Tmp
   variable Lbl

   if { ![winfo exists .mldp1popup] } {
      menu .mldp1popup -tearoff 0 -bd 1 -type normal -activeborderwidth 1
         .mldp1popup add command -label MLDP1 -background $GDefs(ColorHighLight) \
            -activebackground $GDefs(ColorHighLight)
         .mldp1popup add cascade -label [lindex $Lbl(Product) $GDefs(Lang)] -menu .mldp1popup.product
         .mldp1popup add cascade -label [lindex $Lbl(Result) $GDefs(Lang)] -menu .mldp1popup.res
         .mldp1popup add separator
         .mldp1popup add command -label [lindex $Lbl(Suppress) $GDefs(Lang)] \
             -command "MLDP1::SimSuppress True \$Exp::Data(SelectSim)"

      menu .mldp1popup.product -tearoff 0 -bd 1 -type normal -activeborderwidth 1
          .mldp1popup.product add command -label "VAAC" -command { MLDP1::CallProduct $Page::Data(Frame) result VAAC }
          .mldp1popup.product add command -label "RSMC" -command { MLDP1::CallProduct $Page::Data(Frame) all    RSMC }
          .mldp1popup.product add command -label "INFO" -command { MLDP1::CallProduct $Page::Data(Frame) result INFO }
          .mldp1popup.product add command -label "METF" -command { MLDP1::CallProduct $Page::Data(Frame) metf   METF }

      menu .mldp1popup.res -tearoff 0 -bd 1 -type normal -activeborderwidth 1
         .mldp1popup.res add command -label "All" -command "MLDP1::Result all"
         .mldp1popup.res add separator
         .mldp1popup.res add command -label "Standard" -command "MLDP1::Result result"
#         .mldp1popup.res add command -label "Post" -command "MLDP1::Result post"
#         .mldp1popup.res add command -label "MetField" -command "MLDP1::Result metf"
#         .mldp1popup.res add separator
         .mldp1popup.res add command -label "Meteo" -command "MLDP1::Result meteo"
   }

   Info::Decode ::MLDP1::Tmp $Sim(Info) $Exp::Data(SelectSim)

   #----- Verifier l'etat de la simulation et
   #      configurer le menu en consequence

   switch $Tmp(State) {

      0 {                                              #----- Continuable
         .mldp1popup entryconfigure 1 -state normal     ;#Product
         .mldp1popup entryconfigure 2 -state normal     ;#Data
         .mldp1popup entryconfigure 4 -state disabled   ;#Launch
         .mldp1popup entryconfigure 6 -state normal     ;#Suppress
      }
      1 {                                              #----- Etat Termine
         .mldp1popup entryconfigure 1 -state normal     ;#Product
         .mldp1popup entryconfigure 2 -state normal     ;#Data
         .mldp1popup entryconfigure 4 -state disabled   ;#Launch
         .mldp1popup entryconfigure 6 -state normal     ;#Suppress
      }
      2 {                                              #----- Etat d'execution
         .mldp1popup entryconfigure 1 -state disabled   ;#Product
         .mldp1popup entryconfigure 2 -state disabled   ;#Data
         .mldp1popup entryconfigure 4 -state disabled   ;#Launch
         .mldp1popup entryconfigure 6 -state normal     ;#Suppress
      }
      3 {                                              #----- Etat suspendu
         .mldp1popup entryconfigure 1 -state disabled   ;#Product
         .mldp1popup entryconfigure 2 -state disabled   ;#Data
         .mldp1popup entryconfigure 1 -state disabled   ;#Map
         .mldp1popup entryconfigure 4 -state normal     ;#Launch
         .mldp1popup entryconfigure 6 -state normal     ;#Suppress
      }
   }

   tk_popup .mldp1popup $X $Y 0
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::UpdateEmail>
# Creation   : 2 November 2007 - A. Malo - CMC/CMOE
#
# But        : Update email option interface.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::UpdateEmail { } {
   global GDefs
   variable Sim

   if { $Sim(IsEmailAddress) } {
      pack forget $Sim(LaunchFrm).launch
      pack forget $Sim(LaunchFrm)
      pack $Sim(EmailFrm) -side top -anchor w -padx 2 -fill x
      pack $Sim(LaunchFrm).launch -side right
      pack $Sim(LaunchFrm) -side top -anchor w -padx 5 -pady 10 -fill x -expand true
   } else {
      pack forget $Sim(EmailFrm)
      set Sim(EmailAddress) [lindex $Sim(ListEmailAddress) 0]
   }

   set Sim(FlagEmailAddress) [lindex [lindex $Sim(ListOptOnOff) $GDefs(Lang)] $Sim(IsEmailAddress)]

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::UpdateEmissionDurationsTotalQuantityAccident>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Update (total and effective) emission durations and
#              total released quantities for each isotope.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::UpdateEmissionDurationsTotalQuantityAccident { } {
   variable Sim
   variable Tmp
   variable Quant

   #----- Initialize variables.
   set total     0
   set effective 0
   set nbint     0

   for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
      set Quant($j) 0
   }

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } { #----- Loop over number of emission durations.

      set j 0

      if { $Tmp(Duration$i) != "" && $Tmp(Duration$i) > 0 } {

         #----- Increment total duration by emission duration value.
         set total                      [expr $total + $Tmp(Duration$i)]
         set hasFoundPositiveRate       0
         set hasFoundPositiveOrNullRate 0

         for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } { #----- Loop over isotopes.

            if { $Tmp(ReleaseRate$i.$j) != "" && $Tmp(ReleaseRate$i.$j) >= 0.0 } {

               if { !$hasFoundPositiveRate } {
                  if { $Tmp(ReleaseRate$i.$j) > 0.0 } {
                     #----- Increment effective duration by emission duration value.
                     set effective            [expr $effective + $Tmp(Duration$i)]
                     set hasFoundPositiveRate 1
                  }
               }

               if { !$hasFoundPositiveOrNullRate } {
                  if { $Tmp(ReleaseRate$i.$j) >= 0.0 } {
                     #----- Increment number of emission intervals.
                     incr nbint
                     set hasFoundPositiveOrNullRate 1
                  }
               }

               #----- Compute total released quantity.
               set Quant($j) [expr $Quant($j) + double($Tmp(Duration$i))/3600.0 * double($Tmp(ReleaseRate$i.$j))]

            }
         }

      }

      #-----  Clear release rates fields for remaining empty isotpes buttons.
      for { set j $j } { $j < $Sim(EmMaxIso) } { incr j } {
         set Tmp(ReleaseRate$i.$j) ""
      }

   }

   #----- Clear total release quantity fields for remaining empty isotpes buttons.
   for { set j [llength $Tmp(Iso)] } { $j < $Sim(EmMaxIso) } { incr j } {
      set Tmp(ReleaseQuantity$j) ""
   }

   #----- Update total and effective emission durations, number of intervals and total released quantities.
   set Tmp(TotalDuration)     $total
   set Tmp(EffectiveDuration) $effective
   set Tmp(NbIntervals)       $nbint

   for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
      set Tmp(ReleaseQuantity$j) [format "%.7e" $Quant($j)]
   }
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::UpdateEmissionDurationsTotalQuantityVirus>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Update (total and effective) emission durations and
#              total released quantity.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::UpdateEmissionDurationsTotalQuantityVirus { } {
   variable Sim
   variable Tmp

   #----- Initialize variables.
   set total     0
   set effective 0
   set nbint     0
   set quant     0

   #----- Compute total and effective emission durations, number of intervals and total released quantity.
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      if { $Tmp(Duration$i) != "" && $Tmp(Duration$i) > 0 } {

         if { $Tmp(ReleaseRate$i) != "" && $Tmp(ReleaseRate$i) > 0.0 } {
            #----- Increment effective duration by emission duration value.
            set effective [expr $effective + $Tmp(Duration$i)]

            #----- Compute total released quantity.
            set quant [expr $quant + double($Tmp(Duration$i))/3600.0 * double($Tmp(ReleaseRate$i))]
         }

         if { $Tmp(ReleaseRate$i) != "" && $Tmp(ReleaseRate$i) >= 0.0 } {
            #----- Increment total duration by emission duration value.
            set total [expr $total + $Tmp(Duration$i)]

            #----- Increment number of emission intervals.
            incr nbint
         }

      }

   }

   #----- Update total and effective emission durations, number of intervals and total released quantity.
   set Tmp(TotalDuration)     $total
   set Tmp(EffectiveDuration) $effective
   set Tmp(NbIntervals)       $nbint
   set Tmp(ReleaseQuantity)   [format "%.7e" $quant]

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::UpdateEmissionDurationsVolcano>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Update (total and effective) emission durations.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::UpdateEmissionDurationsVolcano { } {
   variable Tmp
   variable Sim

   #----- Initialize variables.
   set total     0
   set effective 0
   set nbint     0

   #----- Update emission durations.

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      if { $Tmp(Duration$i) != "" && $Tmp(Duration$i) > 0 } {

         if { $Tmp(Value$i) == 1 } {
            #----- Increment effective duration by emission duration value.
            set effective [expr $effective + $Tmp(Duration$i)]
         }

         if { $Tmp(Value$i) != -1 } {
            #----- Increment total duration by emission duration value.
            set total [expr $total + $Tmp(Duration$i)]

            #----- Increment number of emission intervals.
            incr nbint
         }

      }

   }

   #----- Update total and effective emission durations and number of intervals.

   set Tmp(TotalDuration)     $total
   set Tmp(EffectiveDuration) $effective
   set Tmp(NbIntervals)       $nbint
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::UpdateEmissionStartingTime>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Update emission starting time.
#
# Parametres :
#    Aucun.
#
# Retour     :
#    Aucun.
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::UpdateEmissionStartingTime { } {
   variable Sim

   set sec [clock scan "$Sim(AccYear)$Sim(AccMonth)$Sim(AccDay) $Sim(AccHour):00" -gmt true]

   set min [string trimleft $Sim(AccMin) 0]
   if { $min == "" } {
      set min 0
   }
   set min [expr int(double($min)/double($Sim(ModelTimeStepMin))+0.5) * $Sim(ModelTimeStepMin)]

   set Sim(AccSeconds) [expr $sec + $min*60]
   set Sim(AccMin)     [clock format $Sim(AccSeconds) -format "%M" -gmt true]
   set Sim(AccHour)    [clock format $Sim(AccSeconds) -format "%H" -gmt true]
   set Sim(AccDay)     [clock format $Sim(AccSeconds) -format "%d" -gmt true]
   set Sim(AccMonth)   [clock format $Sim(AccSeconds) -format "%m" -gmt true]
   set Sim(AccYear)    [clock format $Sim(AccSeconds) -format "%Y" -gmt true]
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateDurations>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate durations for each release interval.
#
# Parametres :
#   <Parent> : Parent window.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateDurations { Parent } {
   variable Sim
   variable Tmp

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } { #----- Loop over intervals.

      if { ![MLDP1::ValidateDurationValue $Tmp(Duration$i) $Parent $i] } {
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.dur
         return 0
      }

   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateDurationValue>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate duration value.
#
# Parametres :
# <Duration> : Duration value.
# <Parent>   : Parent window.
# <Idx>      : Index of value in scenario interface (optional argument).
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateDurationValue { Duration Parent { Idx -1 } } {
   global GDefs
   variable Sim
   variable Error
   variable Tmp

   #----- Verify if duration is positive.

   set number [string is integer -failindex idx $Duration]

   if { $number == 0 && $idx == -1 } {
      Dialog::CreateError $Parent "[lindex $Error(DurationOutRange) $GDefs(Lang)] $Duration [lindex $Error(UnitSeconds) $GDefs(Lang)]" $GDefs(Lang) 600
      return 0
   } elseif { $number == 0 || ($number == 1 && $Duration <= 0 && $Duration != "") } {
      Dialog::CreateError $Parent "[lindex $Error(Duration) $GDefs(Lang)] $Duration $Error(UnitSeconds)" $GDefs(Lang) 600
      return 0
   }

   #----- If the duration has a value.
   if { $Duration != "" } {

      #----- Verify if duration is greater or equal to the model time step.
      if { $Duration < $Sim(ModelTimeStepSec) } {
         Dialog::CreateError $Parent "[lindex $Error(Duration2) $GDefs(Lang)][lindex $Error(Duration4) $GDefs(Lang)] $Duration $Error(UnitSeconds)\n[lindex $Error(Duration5) $GDefs(Lang)] $Sim(ModelTimeStepSec) $Error(UnitSeconds) ($Sim(ModelTimeStepMin) $Error(UnitMinutes))" $GDefs(Lang) 600

         if { $Idx > -1 } {

            #----- Modify the emission duration to the nearest multiple of internal model time step.
            set Tmp(Duration$Idx) [expr int(double($Duration)/double($Sim(ModelTimeStepSec))+0.5) * $Sim(ModelTimeStepSec)]

            if { $Tmp(Duration$Idx) < $Sim(ModelTimeStepSec) } {
               set Tmp(Duration$Idx) $Sim(ModelTimeStepSec)
            }

         }

         return 0
      }

      #----- Verify if duration is an integer multiple of the model time step.
      if { [expr fmod($Duration, $Sim(ModelTimeStepSec))] > $Sim(EmEpsilon) } {
         Dialog::CreateError $Parent "[lindex $Error(Duration3) $GDefs(Lang)][lindex $Error(Duration4) $GDefs(Lang)] $Duration $Error(UnitSeconds)\n[lindex $Error(Duration5) $GDefs(Lang)] $Sim(ModelTimeStepSec) $Error(UnitSeconds) ($Sim(ModelTimeStepMin) $Error(UnitMinutes))" $GDefs(Lang) 600

         if { $Idx > -1 } {

            #----- Modify the emission duration to the nearest multiple of internal model time step.
            set Tmp(Duration$Idx) [expr int(double($Duration)/double($Sim(ModelTimeStepSec))+0.5) * $Sim(ModelTimeStepSec)]

            if { $Tmp(Duration$Idx) < $Sim(ModelTimeStepSec) } {
               set Tmp(Duration$Idx) $Sim(ModelTimeStepSec)
            }

         }

         return 0
      }
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateDurationsRatesAccident>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Verify if emission durations and release rate fields
#              are filled simultaneously. Verify if there is no empty
#              fields in interface (Number of intervals > 0).
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateDurationsRatesAccident { } {
   global   GDefs
   variable Sim
   variable Tmp
   variable Error
   variable hasFoundRate

   #----- Verify if emission durations and release rate fields are filled simultaneously.

   for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {    #----- Loop over isotopes.

      for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } { #----- Loop over emission durations.

         if { $Tmp(Duration$i) != "" && $Tmp(ReleaseRate$i.$j) == "" } {
            #----- Release rate field for this isotope is empty while emission duration field is filled.
            Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
            focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates.iso$j
            return 0
         } elseif { $Tmp(Duration$i) == "" && $Tmp(ReleaseRate$i.$j) != "" } {
            #----- Emission duration field is empty while release rate field for this isotope is filled.
            Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
            focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.dur
            return 0
         }

      }

   }

   #----- Verify if there is no empty fields (Number of intervals > 0).

   set hasFoundDuration 0
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
      if { $Tmp(Duration$i) != "" } {
         set hasFoundDuration 1
         break
      }
   }

   for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
      set hasFoundRate($j) 0
   }

   for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
      for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
         if { $Tmp(ReleaseRate$i.$j) != "" } {
            set hasFoundRate($j) 1
            break
         }
      }
   }

   for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
      if { !$hasFoundDuration && !$hasFoundRate($j) } {
         #----- Emission duration and release rate for this isotope fields are both empty.
         Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
         focus $MLDP1::Sim(ReleaseRatesFrame).entry0.dur
         return 0
      }
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateDurationsRatesVirus>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Verify if emission durations and release rate fields
#              are filled simultaneously. Verify if there is no empty
#              fields in interface (Number of intervals > 0).
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateDurationsRatesVirus { } {
   global   GDefs
   variable Sim
   variable Tmp
   variable Error

   #----- Verify if emission durations and release rate fields are filled simultaneously.

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      if { $Tmp(Duration$i) != "" && $Tmp(ReleaseRate$i) == "" } {
         #----- Release rate field is empty while emission duration field is filled.
         Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates
         return 0
      } elseif { $Tmp(Duration$i) == "" && $Tmp(ReleaseRate$i) != "" } {
         #----- Emission duration field is empty while release rate field is filled.
         Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.dur
         return 0
      }

   }

   #----- Verify if there is no empty fields (Number of intervals > 0).

   set hasFoundDuration 0
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
      if { $Tmp(Duration$i) != "" } {
         set hasFoundDuration 1
         break
      }
   }

   set hasFoundRate 0
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
      if { $Tmp(ReleaseRate$i) != "" } {
         set hasFoundRate 1
         break
      }
   }

   if { !$hasFoundDuration && !$hasFoundRate } {
      #----- Emission duration and release rate fields are both empty.
      Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
      focus $MLDP1::Sim(ReleaseRatesFrame).entry0.dur
      return 0
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateDurationsReleasesVolcano>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Verify if emission durations and emission period type
#              fields are filled simultaneously. Verify if there is no
#              empty fields in interface (Number of intervals > 0).
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateDurationsReleasesVolcano { } {
   global   GDefs
   variable Sim
   variable Tmp
   variable Error

   #----- Verify if emission durations and emission period type fields are filled simultaneously.

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      if { $Tmp(Duration$i) == "" } {

         if { $Tmp(Value$i) == 1 || $Tmp(Value$i) == 0 } {
            #----- Emission duration field is empty while emission period type field is filled.
            Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
            focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.dur
            return 0
         }

      } else {

         if { $Tmp(Value$i) == "" || $Tmp(Value$i) == -1 } {
            #----- Emission duration field is filled while emission period type field is empty.
            Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
            focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.dur
            return 0
         }

      }

   }

   #----- Verify if there is no empty fields (Number of intervals > 0).

   set hasFoundDuration 0
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
      if { $Tmp(Duration$i) != "" } {
         set hasFoundDuration 1
         break
      }
   }

   set hasFoundReleasePeriodType 0
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
      if { $Tmp(Value$i) == 1 || $Tmp(Value$i) == 0 } {
         set hasFoundReleasePeriodType 1
         break
      }
   }

   if { !$hasFoundDuration && !$hasFoundReleasePeriodType } {
      #----- Emission duration and release period type fields are both empty.
      Dialog::CreateError .newscenario "[lindex $Error(Scenario) $GDefs(Lang)]" $GDefs(Lang) 600
      focus $MLDP1::Sim(ReleaseRatesFrame).entry0.dur
      return 0
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateDurationsVsModelTimeStep>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate durations for each release interval according to
#              internal model time step.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateDurationsVsModelTimeStep { } {
   variable Sim

   foreach interval $Sim(EmInter.$Sim(EmScenario)) { #----- Loop over emission intervals.
      set duration [lindex $interval 0]

      #----- Validate emission duration value.
      if { ![MLDP1::ValidateDurationValue $duration .mldp1new] } {
         return 0
      }

   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateLullPeriods>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate lull periods at the beginning and at the end of
#              the release scenario for specific source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateLullPeriods { } {
   variable Sim

   #----- Validate lull periods at the beginning and at the end of the release scenario.

   switch $Sim(SrcType) {
      "accident" {
         if { ![ValidateLullPeriodsStartAccident] } {
            return 0
         }

         if { ![ValidateLullPeriodsEndAccident] } {
            return 0
         }
      }
      "volcano"   {
         if { ![ValidateLullPeriodsStartVolcan] } {
            return 0
         }

         if { ![ValidateLullPeriodsEndVolcan] } {
            return 0
         }
      }
      "virus"    {
         if { ![ValidateLullPeriodsStartVirus] } {
            return 0
         }

         if { ![ValidateLullPeriodsEndVirus] } {
            return 0
         }
      }
   }

   return 1

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateLullPeriodsEndAccident>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate lull periods at the end of the release scenario
#              for accident source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateLullPeriodsEndAccident { } {
   global   GDefs
   variable Sim
   variable Error
   variable Tmp

   #----- Validate lull periods at the end of the release scenario.
   for { set i [expr $Sim(EmMaxInterval) - 1] } { $i >= 0 } { incr i -1 } {

      if { $Tmp(Duration$i) != "" } {

         for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
            if { $Tmp(ReleaseRate$i.$j) > 0 } {
               return 1 ; #----- No lull periods.
            }
         }

         Dialog::CreateError .newscenario "[lindex $Error(LullPeriodEndAccident) $GDefs(Lang)] $Tmp(Duration$i) $Error(UnitSeconds)" $GDefs(Lang) 400
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates.iso0
         return 0

      }

   }

   return 0
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateLullPeriodsEndVirus>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate lull periods at the end of the release scenario
#              for virus source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateLullPeriodsEndVirus { } {
   global   GDefs
   variable Sim
   variable Error
   variable Tmp

   #----- Validate lull periods at the end of the release scenario.
   for { set i [expr $Sim(EmMaxInterval) - 1] } { $i >= 0 } { incr i -1 } {

      if { $Tmp(Duration$i) != "" } {

         if { $Tmp(ReleaseRate$i) > 0 } {
            return 1 ; #----- No lull periods.
         }

         Dialog::CreateError .newscenario "[lindex $Error(LullPeriodEndVirus) $GDefs(Lang)] $Tmp(Duration$i) $Error(UnitSeconds)" $GDefs(Lang) 400
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates
         return 0

      }

   }

   return 0
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateLullPeriodsEndVolcan>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate lull periods at the end of the release scenario
#              for volcano source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateLullPeriodsEndVolcan { } {
   global   GDefs
   variable Sim
   variable Error
   variable Tmp

   #----- Validate lull periods at the end of the release scenario.
   for { set i [expr $Sim(EmMaxInterval) - 1] } { $i >= 0 } { incr i -1 } {

      if { $Tmp(Duration$i) != "" } {

         if { $Tmp(Value$i) == 1 } {
            return 1 ; #----- No lull periods.
         }

         Dialog::CreateError .newscenario "[lindex $Error(LullPeriodEndVolcan) $GDefs(Lang)] $Tmp(Duration$i) $Error(UnitSeconds)" $GDefs(Lang) 400
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.dur
         return 0

      }
   }

   return 0
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateLullPeriodsStartAccident>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate lull periods at the beginning of the release
#              scenario for accident source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateLullPeriodsStartAccident { } {
   global   GDefs
   variable Sim
   variable Error
   variable Tmp

   #----- Validate lull periods at the beginning of the release scenario.
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      if { $Tmp(Duration$i) != "" } {

         for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {
            if { $Tmp(ReleaseRate$i.$j) > 0 } {
               return 1 ; #----- No lull periods.
            }
         }

         Dialog::CreateError .newscenario "[lindex $Error(LullPeriodStartAccident) $GDefs(Lang)] $Tmp(Duration$i) $Error(UnitSeconds)" $GDefs(Lang) 400
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates.iso0
         return 0

      }
   }

   return 0
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateLullPeriodsStartVirus>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate lull periods at the beginning of the release
#              scenario for virus source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateLullPeriodsStartVirus { } {
   global   GDefs
   variable Sim
   variable Error
   variable Tmp

   #----- Validate lull periods at the beginning of the release scenario.
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      if { $Tmp(Duration$i) != "" } {

         if { $Tmp(ReleaseRate$i) > 0 } {
            return 1 ; #----- No lull periods.
         }

         Dialog::CreateError .newscenario "[lindex $Error(LullPeriodStartVirus) $GDefs(Lang)] $Tmp(Duration$i) $Error(UnitSeconds)" $GDefs(Lang) 400
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates
         return 0

      }
   }

   return 0
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateLullPeriodsStartVolcan>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate lull periods at the beginning of the release
#              scenario for volcano source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateLullPeriodsStartVolcan { } {
   global   GDefs
   variable Sim
   variable Error
   variable Tmp

   #----- Validate lull periods at the beginning of the release scenario.
   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      if { $Tmp(Duration$i) != "" } {

         if { $Tmp(Value$i) == 1 } {
            return 1 ; #----- No lull periods.
         }

         Dialog::CreateError .newscenario "[lindex $Error(LullPeriodStartVolcan) $GDefs(Lang)] $Tmp(Duration$i) $Error(UnitSeconds)" $GDefs(Lang) 400
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.dur
         return 0

      }

   }

   return 0
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateNameScenario>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate name of release scenario.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateNameScenario { } {
   global GDefs
   variable Tmp
   variable Error

   #----- Verify if release scenario name is not empty.
   if { $Tmp(Scenario) == "" } {
      Dialog::CreateError .newscenario "[lindex $Error(ScenarioName) $GDefs(Lang)]" $GDefs(Lang) 600
      focus .newscenario.emint.fr.box1.data.name.ent
      return 0
   }

   return 1

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateNbIsotopes>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate number of isotopes.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateNbIsotopes { } {
   global   GDefs
   variable Sim
   variable Tmp
   variable Error

   #----- Verify if number of isotopes is greater than 0.

   if { [llength $Tmp(Iso)] < 1 } {

      Dialog::CreateError .newscenario "[lindex $Error(NbIsotopes) $GDefs(Lang)]" $GDefs(Lang) 600

      for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
         if { $Tmp(Duration$i) != "" } {
            focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates.iso0
            return 0
         }
      }

      focus $MLDP1::Sim(ReleaseRatesFrame).entry0.rates.iso0
      return 0
   }

   return 1

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateReleaseRatesAccident>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate rates for each release interval and each isotope
#              for accident source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateReleaseRatesAccident { } {
   variable Sim
   variable Tmp

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {    #----- Loop over emission intervals.
      for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } { #----- Loop over isotopes.

         #----- Validate release rate value for each interval and each isotope.
         if { [MLDP1::ValidateReleaseRateValue $i $j] } {
            if { $Tmp(ReleaseRate$i.$j) != "" } {
               set Tmp(ReleaseRate$i.$j) [format "%.7e" $Tmp(ReleaseRate$i.$j)]
            }
         } else {
            focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates.iso$j
            return 0
         }
      }
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateReleaseRatesVirus>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate rates for each release interval and
#              for virus source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateReleaseRatesVirus { } {
   variable Sim
   variable Tmp

   for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {

      #----- Validate release rate value for each interval.
      if { [MLDP1::ValidateReleaseRateValue $i] } {
         if { $Tmp(ReleaseRate$i) != "" } {
            set Tmp(ReleaseRate$i) [format "%.7e" $Tmp(ReleaseRate$i)]
         }
      } else {
         focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates
         return 0
      }

   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateReleaseRateValue>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate release rate value.
#
# Parametres :
# <Interval> : Index of release interval in interface.
# <Isotope>  : Index of isotope in interface (optional argument).
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateReleaseRateValue { Interval { Isotope -1 } } {
   global GDefs
   variable Tmp
   variable Error

   if { $Isotope > -1 } { #----- Accident.
      set rate $Tmp(ReleaseRate$Interval.$Isotope)
   } else {               #----- Virus.
      set rate $Tmp(ReleaseRate$Interval)
   }

   #----- Verify if release rate is positive.
   set number [string is double -failindex idx $rate]
   if { $number == 0 && $idx == -1 } {
      Dialog::CreateError .newscenario "[lindex $Error(ReleaseRateRange) $GDefs(Lang)] $rate [lindex $Error(UnitRate) $GDefs(Lang)]" $GDefs(Lang) 600
      return 0
   } elseif { $number == 0 || ($rate < 0 && $rate != "") } {
      Dialog::CreateError .newscenario "[lindex $Error(ReleaseRate) $GDefs(Lang)] $rate [lindex $Error(UnitRate) $GDefs(Lang)]" $GDefs(Lang) 600
      return 0
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateScenario>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate release scenario for specific source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateScenario { } {
   variable Sim

   switch $Sim(SrcType) {
      "accident" {
         if { ![MLDP1::ValidateScenarioAccident] } {
            #----- Emission scenario has not been validated successfully yet.
            set Sim(IsScenarioValid) 0
            return 0
         }
      }
      "volcano"   {
         if { ![MLDP1::ValidateScenarioVolcan] } {
            #----- Emission scenario has not been validated successfully yet.
            set Sim(IsScenarioValid) 0
            return 0
         }
      }
      "virus"    {
         if { ![MLDP1::ValidateScenarioVirus] } {
            #----- Emission scenario has not been validated successfully yet.
            set Sim(IsScenarioValid) 0
            return 0
         }
      }
   }

   #----- Emission scenario has been validated successfully.
   set Sim(IsScenarioValid) 1

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateScenarioAccident>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate release scenario for accident source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateScenarioAccident { } {

   #----- Validate name of release scenario.
   if { ![MLDP1::ValidateNameScenario] } {
      return 0
   }

   #----- Validate emission durations.
   if { ![MLDP1::ValidateDurations .newscenario] } {
      return 0
   }

   #-----Validate release rates.
   if { ![MLDP1::ValidateReleaseRatesAccident] } {
      return 0
   }

   #----- Validate number of isotopes.
   if { ![MLDP1::ValidateNbIsotopes] } {
      return 0
   }

   #----- Validate emission durations and release rates fields simultaneously.
   if { ![MLDP1::ValidateDurationsRatesAccident] } {
      return 0
   }

   #----- Update (total and effective) emission durations and total released quantities for each isotope.
   MLDP1::UpdateEmissionDurationsTotalQuantityAccident

   #----- Validate total released quantity.
   if { ![MLDP1::ValidateTotalReleasedQuantityAccident] } {
      return 0
   }

   #----- Validate if there is no lull periods at the beginning and end of the release scenario.
   if { ![ValidateLullPeriods] } {
      return 0
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateScenarioVirus>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate release scenario for virus source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateScenarioVirus { } {

   #----- Validate name of release scenario.
   if { ![MLDP1::ValidateNameScenario] } {
      return 0
   }

   #----- Validate emission durations.
   if { ![MLDP1::ValidateDurations .newscenario] } {
      return 0
   }

   #-----Validate release rates.
   if { ![MLDP1::ValidateReleaseRatesVirus] } {
      return 0
   }

   #----- Validate emission durations and release rates fields simultaneously.
   if { ![MLDP1::ValidateDurationsRatesVirus] } {
      return 0
   }

   #----- Update (total and effective) emission durations and total released quantity.
   MLDP1::UpdateEmissionDurationsTotalQuantityVirus

   #----- Validate total released quantity.
   if { ![MLDP1::ValidateTotalReleasedQuantityVirus] } {
      return 0
   }

   #----- Validate if there is no lull periods at the beginning and end of the release scenario.
   if { ![ValidateLullPeriods] } {
      return 0
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateScenarioVolcan>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate release scenario for volcano source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateScenarioVolcan { } {

   #----- Validate name of release scenario.
   if { ![MLDP1::ValidateNameScenario] } {
      return 0
   }

   #----- Validate emission durations.
   if { ![MLDP1::ValidateDurations .newscenario] } {
      return 0
   }

   #----- Validate emission durations durations and release periods type fields simultaneously.
   if { ![MLDP1::ValidateDurationsReleasesVolcano] } {
      return 0
   }

   #----- Update (total and effective) emission durations.
   MLDP1::UpdateEmissionDurationsVolcano

   #----- Validate if there is no lull periods at the beginning and end of the release scenario.
   if { ![ValidateLullPeriods] } {
      return 0
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateSimulationDuration>
# Creation   : 27 August 2007 - A. Malo - CMC/CMOE
#
# But        : Validate simulation duration according to time interval
#              between meteorological data files.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateSimulationDuration { } {
   global GDefs
   variable Sim
   variable Error
   variable Warning
   variable Lbl

   #----- Verify if output time step is positive.
   set number [string is integer -strict -failindex idx $Sim(Duration)]
   if { $number == 0 && $idx == -1 } {
      Dialog::CreateError .mldp1new "[lindex $Error(SimDurationOutRange) $GDefs(Lang)] $Sim(Duration) $Error(UnitHours)" $GDefs(Lang) 600
      focus $Sim(SimDurationEnt)
      return 0
   } elseif { $number == 0 || ($number == 1 && $Sim(Duration) < 1) } {
      Dialog::CreateError .mldp1new "[lindex $Error(SimDuration) $GDefs(Lang)] $Sim(Duration) $Error(UnitHours)" $GDefs(Lang) 600
      focus $Sim(SimDurationEnt)
      return 0
   }

   #----- Verify if simulation duration is greater than (or equal to) time interval between met data files.
   if { $Sim(Duration) < $Sim(Delta) } {
      Dialog::CreateError .mldp1new "[lindex $Error(SimDurationDelta) $GDefs(Lang)][lindex $Error(SimDurationDelta2) $GDefs(Lang)] $Sim(Duration) $Error(UnitHours)\n[lindex $Error(SimDurationDelta3) $GDefs(Lang)] $Sim(Delta) $Error(UnitHours)" $GDefs(Lang) 600
      focus $Sim(SimDurationEnt)
      return 0
   }

   #----- Verify if simulation duration is greater than output time step.
   set ots [expr double($Sim(OutputTimeStepMin))/double(60.0)] ; #----- Output time step [hr].
   if { $Sim(Duration) < $ots } {
      Dialog::CreateError .mldp1new "[lindex $Error(SimDurationOutputTimeStep) $GDefs(Lang)][lindex $Error(SimDurationOutputTimeStep2) $GDefs(Lang)] $Sim(Duration) $Error(UnitHours)\n[lindex $Error(SimDurationOutputTimeStep3) $GDefs(Lang)] $ots $Error(UnitHours)" $GDefs(Lang) 600
      focus $Sim(SimDurationEnt)
      return 0
   }

   #----- Display warning if simulation duration > 48 hrs and output time step <= 60 min.
   if { !$Sim(IsResFileSizeChecked) } {
      if { $Sim(Duration) > 48 && $Sim(OutputTimeStepMin) <= 60 } {
         set yes [Dialog::CreateDefault .mldp1new 400 "[lindex $Lbl(Warning) $GDefs(Lang)]" "[lindex $Warning(SimDuration4) $GDefs(Lang)]\n\n[lindex $Warning(SimDuration5) $GDefs(Lang)] $Sim(Duration) $Error(UnitHours)\n[lindex $Warning(SimDuration6) $GDefs(Lang)] $Sim(OutputTimeStepMin) $Error(UnitMinutes)" warning 0 [lindex $Lbl(No) $GDefs(Lang)] [lindex $Lbl(Yes) $GDefs(Lang)]]
         if { $yes } {
            focus $Sim(OutputTimeStepEnt)
            return 0
         } else {
            set Sim(IsResFileSizeChecked) 1
         }
      }
   }

   #----- Display warning if simulation duration > 48 hrs and time interval between met data files < 6.
   if { !$Sim(IsMetFileSizeChecked) } {
      if { $Sim(Duration) > 48 && $Sim(Delta) < 6 } {
         set yes [Dialog::CreateDefault .mldp1new 400 "[lindex $Lbl(Warning) $GDefs(Lang)]" "[lindex $Warning(SimDuration7) $GDefs(Lang)]\n\n[lindex $Warning(SimDuration8) $GDefs(Lang)] $Sim(Duration) $Error(UnitHours)\n[lindex $Warning(SimDuration9) $GDefs(Lang)] $Sim(Delta) $Error(UnitHours)" warning 0 [lindex $Lbl(No) $GDefs(Lang)] [lindex $Lbl(Yes) $GDefs(Lang)]]
         if { $yes } {
            focus $Sim(SimDurationEnt)
            return 0
         } else {
            set Sim(IsMetFileSizeChecked) 1
         }
      }
   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateTimeSteps>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate output and model time steps.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateTimeSteps { } {
   global GDefs
   variable Sim
   variable Error

   #----- Verify if output time step is positive.
   set number [string is integer -strict -failindex idx $MLDP1::Sim(OutputTimeStepMin)]
   if { $number == 0 && $idx == -1 } {
      Dialog::CreateError .mldp1new "[lindex $Error(OutputTimeStepMinOutRange) $GDefs(Lang)] $MLDP1::Sim(OutputTimeStepMin) $Error(UnitMinutes)" $GDefs(Lang) 600
      focus $Sim(OutputTimeStepEnt)
      return 0
   } elseif { $number == 0 || ($number == 1 && $MLDP1::Sim(OutputTimeStepMin) <= 0) } {
      Dialog::CreateError .mldp1new "[lindex $Error(OutputTimeStepMin) $GDefs(Lang)] $MLDP1::Sim(OutputTimeStepMin) $Error(UnitMinutes)" $GDefs(Lang) 600
      focus $Sim(OutputTimeStepEnt)
      return 0
   }

   #----- Verify if model time step is positive.
   set number [string is integer -strict -failindex idx $MLDP1::Sim(ModelTimeStepMin)]
   if { $number == 0 && $idx == -1 } {
      Dialog::CreateError .mldp1new "[lindex $Error(ModelTimeStepMinOutRange) $GDefs(Lang)] $MLDP1::Sim(ModelTimeStepMin) $Error(UnitMinutes)" $GDefs(Lang) 600
      focus $Sim(ModelTimeStepEnt)
      return 0
   } elseif { $number == 0 || ($number == 1 && $MLDP1::Sim(ModelTimeStepMin) <= 0) } {
      Dialog::CreateError .mldp1new "[lindex $Error(ModelTimeStepMin) $GDefs(Lang)] $MLDP1::Sim(ModelTimeStepMin) $Error(UnitMinutes)" $GDefs(Lang) 600
      focus $Sim(ModelTimeStepEnt)
      return 0
   }

   #----- Compute output time step [s].
   set MLDP1::Sim(OutputTimeStepSec) [expr $MLDP1::Sim(OutputTimeStepMin)*60]

   #----- Compute model time step [s].
   set MLDP1::Sim(ModelTimeStepSec) [expr $MLDP1::Sim(ModelTimeStepMin)*60]

   #----- Verify if model time step is lower or equal to an hour (60 minutes).
   if { $MLDP1::Sim(ModelTimeStepMin) > 60 } {
      Dialog::CreateError .mldp1new "[lindex $Error(ModelTimeStep1hour) $GDefs(Lang)] $MLDP1::Sim(ModelTimeStepMin) $Error(UnitMinutes)" $GDefs(Lang) 600
      focus $Sim(ModelTimeStepEnt)
      return 0
   }

   #----- Verify if model time step is an integer divisor of an hour (60 minutes).
   if { [expr fmod( 60, $MLDP1::Sim(ModelTimeStepMin) )] > $MLDP1::Sim(EmEpsilon) } {
      Dialog::CreateError .mldp1new "[lindex $Error(ModelTimeStep1hourDiv) $GDefs(Lang)] $MLDP1::Sim(ModelTimeStepMin) $Error(UnitMinutes)" $GDefs(Lang) 600
      focus $Sim(ModelTimeStepEnt)
      return 0
   }

   #----- Verify if model time step is lower or equal to the output time step.
   if { $MLDP1::Sim(ModelTimeStepMin) > $MLDP1::Sim(OutputTimeStepMin) } {
      Dialog::CreateError .mldp1new "[lindex $Error(ModelTimeStepOutputTimeStep) $GDefs(Lang)][lindex $Error(ModelTimeStepOutputTimeStep2) $GDefs(Lang)] $MLDP1::Sim(ModelTimeStepMin) $Error(UnitMinutes)\n[lindex $Error(ModelTimeStepOutputTimeStep3) $GDefs(Lang)] $MLDP1::Sim(OutputTimeStepMin) $Error(UnitMinutes)" $GDefs(Lang) 600
      focus $Sim(ModelTimeStepEnt)
      return 0
   }

   #----- Verify if output time step is an integer multiple of the model time step.
   if { [expr fmod( $MLDP1::Sim(OutputTimeStepMin), $MLDP1::Sim(ModelTimeStepMin) )] > $MLDP1::Sim(EmEpsilon) } {
      Dialog::CreateError .mldp1new "[lindex $Error(OutputTimeStepModelTimeStep) $GDefs(Lang)][lindex $Error(OutputTimeStepModelTimeStep2) $GDefs(Lang)] $MLDP1::Sim(OutputTimeStepMin) $Error(UnitMinutes)\n[lindex $Error(OutputTimeStepModelTimeStep3) $GDefs(Lang)] $MLDP1::Sim(ModelTimeStepMin) $Error(UnitMinutes)" $GDefs(Lang) 600
      focus $Sim(OutputTimeStepEnt)
      return 0
   }

   #----- Update emission starting time.
   MLDP1::UpdateEmissionStartingTime

   return 1

}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateTotalReleasedQuantityAccident>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate total released quantity for accident source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateTotalReleasedQuantityAccident { } {
   global   GDefs
   variable Sim
   variable Error
   variable Tmp

   for { set j 0 } { $j < [llength $Tmp(Iso)] } { incr j } {

      if { $Tmp(ReleaseQuantity$j) == 0 } {

         #----- Total released quantity is null for this isotope.
         for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
            if { $Tmp(ReleaseRate$i.$j) == 0 } {
               Dialog::CreateError .newscenario "[lindex $Error(TotalQuantityAccident) $GDefs(Lang)][lindex $Error(TotalQuantity2) $GDefs(Lang)] $Tmp(Iso$j).\n[lindex $Error(TotalQuantity3) $GDefs(Lang)] $Tmp(Duration$i) $Error(UnitSeconds)" $GDefs(Lang) 400
               focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates.iso$j
               return 0
            }
         }

      }

   }

   return 1
}

#----------------------------------------------------------------------------
# Nom        : <MLDP1::ValidateTotalReleasedQuantityVirus>
# Creation   : 22 March 2004 - A. Malo - CMC/CMOE
#
# But        : Validate total released quantity for virus source type.
#
# Parametres :
#    Aucun.
#
# Retour     :
#   <Idx>    : Flag indicating if validation has succeeded (1) or not (0).
#
# Remarques  :
#    Aucune.
#
# Modifications  :
#
#    Nom         : -
#    Date        : -
#    Description : -
#----------------------------------------------------------------------------

proc MLDP1::ValidateTotalReleasedQuantityVirus { } {
   global   GDefs
   variable Sim
   variable Error
   variable Tmp

   if { $Tmp(ReleaseQuantity) == 0 } {

      #----- Total released quantity is null.
      for { set i 0 } { $i < $Sim(EmMaxInterval) } { incr i } {
         if { $Tmp(ReleaseRate$i) == 0 } {
            Dialog::CreateError .newscenario "[lindex $Error(TotalQuantityVirus) $GDefs(Lang)][lindex $Error(TotalQuantity3) $GDefs(Lang)] $Tmp(Duration$i) $Error(UnitSeconds)" $GDefs(Lang) 400
            focus $MLDP1::Sim(ReleaseRatesFrame).entry$i.rates
            return 0
         }
      }

   }

   return 1
}
