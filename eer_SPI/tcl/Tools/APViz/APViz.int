#===============================================================================
# Environnement Canada
# Centre Meteorologique Canadian
# 2100 Trans-Canadienne
# Dorval, Quebec
#
# Projet   : Package d'interface pour SPI
# Fichier  : APViz.ctes
# Creation : Mai 2018
#
# Description:
#    Coquille vide demontrant les points d'entree pour la creation de nouveaux outils
#    a l'interface SPI
#
#    Description des interfaces
#
#===============================================================================

#----------------------------------------------------------------------------
# Nom      : <APViz::Window>
# Creation : Mai 2018 - C. Nguyen - CMC/CMOE
#
# But      : Initialise le package de l'outil et son interface
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#----------------------------------------------------------------------------

proc APViz::Window { } { 
   global GDefs
   variable Data
   variable Lbl
   variable Bubble
   variable Param

   set Data(Active) 1
   set Data(Canvas) $Page::Data(Canvas)
   set Data(Frame)  $Page::Data(Frame)
   set ::FSTD::Param(Mode) FLD
   
   #----- Close FieldBox
   ::FieldBox::CloseAll
   
   set Param(Window) .apviz

   if { ![winfo exists .APViz] } {

      if { $Param(Dock) } {
         frame .apviz
         SPI::Dock .apviz
      } else {
         toplevel         .apviz
         wm title         .apviz "[lindex $SPI::Title(SPI) $GDefs(Lang)] $GDefs(Version) ([lindex $Param(Title) $GDefs(Lang)]] $Param(Version))"
         eval wm geometry .apviz $Param(Geom)
         wm resizable     .apviz 1 1
         wm protocol      .apviz WM_DELETE_WINDOW { APViz::Close }

         if { $SPI::Param(Window) } { wm transient .apviz . }
      }
      
      #APViz::FetchConfigPaths
      #----- Fetch config files and folders and populate lists
      APViz::FetchConfigFiles
      
      if {[info exists APViz::Data(Operational,Folders)]} {
	set Data(MacroCategories) $APViz::Data(Operational,Folders)
      }
      
      if {[info exists APViz::Data(Config,Folders)]} {
	set Data(Folders) $APViz::Data(Config,Folders)
      }

      TabFrame::Create .apviz.tab 1 ""
      set Data(Tab) [TabFrame::Add .apviz.tab 1 [lindex $Param(Title) $GDefs(Lang)] True]
      pack .apviz.tab -side top -fill both -expand true
      
      #----- Outils
      frame $Data(Tab).head
         checkbutton $Data(Tab).head.mode -variable Page::Data(ToolMode) -onvalue APViz -offvalue SPI \
            -image ARROW -indicatoron 0 -relief sunken -bd 1 -overrelief raised -offrelief flat -selectcolor $GDefs(ColorFrame) \
            -command { SPI::ToolMode $Page::Data(ToolMode) Data True }
         button $Data(Tab).head.save -image SAVE -bd 1 -relief flat -overrelief raised -command { APViz::SaveAsWindow }
         pack $Data(Tab).head.mode $Data(Tab).head.save -side left -padx 2
         
         #----- Configurable date
         frame $Data(Tab).head.dateConfig
            label $Data(Tab).head.dateConfig.lbl -text "Date: " -anchor e 
            ComboBox::Create $Data(Tab).head.dateConfig.cb APViz::Data(Date) editclose sorted nodouble -1 {} 14 5 "APViz::InitializeVars"
            set APViz::Data(DateCBWidget) $Data(Tab).head.dateConfig.cb
            #set dateList [APViz::FetchDates $Data(CurrentProduct) "" ""]
            set dateList [APViz::FetchAllDates $Data(CurrentProduct)]
            set APViz::Data(Date) [lindex $dateList [expr [llength $dateList] - 1]]
            
            checkbutton $Data(Tab).head.dateConfig.dateLock -variable ::APViz::Data(dateLock) -onvalue True -offvalue False \
               -image VCRLOCK -indicatoron 0 -relief sunken -bd 1 -overrelief raised -offrelief flat -selectcolor IndianRed1
            Bubble::Create $Data(Tab).head.dateConfig.dateLock $APViz::Bubble(BlockDate)
            $Data(Tab).head.dateConfig.dateLock select

            pack $Data(Tab).head.dateConfig.lbl $Data(Tab).head.dateConfig.cb $Data(Tab).head.dateConfig.dateLock -side left
         pack $Data(Tab).head.dateConfig -side right
         

         bind $Data(Tab).head.dateConfig.cb.select <Return> "APViz::DateBinding"
      pack $Data(Tab).head -side top -fill x
      

      
      # PanedWindow pour ajuster taille de chaque section
      panedwindow $Data(Tab).vis -orient vertical -showhandle False -opaqueresize True -bd 0
      pack $Data(Tab).vis -side top -fill x
      
      #----- Options
      labelframe $Data(Tab).opt -text [lindex $Lbl(Options) $GDefs(Lang)]
      
      #--------- Folder
      frame $Data(Tab).opt.folder
	label $Data(Tab).opt.folder.lbl -text [lindex $Lbl(Folder) $GDefs(Lang)] -width 12 -anchor w
	ComboBox::Create $Data(Tab).opt.folder.val APViz::Data(Folder) noedit sorted nodouble -1 $APViz::Data(Folders) 1 7 { APViz::SelectFolder }
	set APViz::Data(Folder) [lindex $APViz::Data(Folders) 0]
	pack $Data(Tab).opt.folder.lbl -side left
	pack $Data(Tab).opt.folder.val -side left -fill x -expand True
      pack $Data(Tab).opt.folder -side top -fill x -expand True
      
      #--------- Category
      frame $Data(Tab).opt.cat
	label $Data(Tab).opt.cat.lbl -text [lindex $Lbl(Category) $GDefs(Lang)] -width 12 -anchor w
	ComboBox::Create $Data(Tab).opt.cat.val APViz::Data(MacroCategory) noedit sorted nodouble -1 $APViz::Data(MacroCategories) 1 7 { APViz::MacroCategory }
	set Data(MacroCatDropdown) $Data(Tab).opt.cat.val
	pack $Data(Tab).opt.cat.lbl -side left
	pack $Data(Tab).opt.cat.val -side left -fill x -expand True
      pack $Data(Tab).opt.cat -side top -fill x -expand True
      
      #--------- Type
      frame $Data(Tab).opt.type
	listbox $Data(Tab).opt.type.lst -relief sunken -bd 1 -yscrollcommand "$Data(Tab).opt.type.scrollbar set" -bg white -listvariable APViz::Data(MacroTypes) -exportselection False
	set Data(TypeListBox) $Data(Tab).opt.type.lst
	scrollbar $Data(Tab).opt.type.scrollbar -relief sunken -command "$Data(Tab).opt.type.lst yview" -bd 1 -width 10
	pack $Data(Tab).opt.type.lst -side left -fill both -expand true
	pack $Data(Tab).opt.type.scrollbar -side left -fill y
      pack $Data(Tab).opt.type -side top -fill x -expand True
      
      pack $Data(Tab).opt -side bottom -fill x -padx 2 -pady 2
      
      #--------- Description
      labelframe $Data(Tab).desc -text [lindex $Lbl(Description) $GDefs(Lang)]
	label $Data(Tab).desc.message -text [lindex $Lbl(DescriptionMSG) $GDefs(Lang)] -wraplength 250 -anchor w -bg "beige" -justify left
	pack $Data(Tab).desc.message -side top -fill x -expand true
      pack $Data(Tab).desc -side bottom -fill both -expand True

      #--------- Range
      labelframe $Data(Tab).range -text [lindex $Lbl(Variables) $GDefs(Lang)]
	set Data(RangeSection) $Data(Tab).range
	label $Data(Tab).range.message -text [lindex $Lbl(DescriptionMSG) $GDefs(Lang)] -wraplength 250 -anchor w -bg "beige" -justify left
	pack $Data(Tab).range.message -side top -fill x -expand true
      pack $Data(Tab).range -side bottom -fill both -expand True
      
      # Ajouter les sections au panedwindow
      $Data(Tab).vis add $Data(Tab).opt $Data(Tab).desc $Data(Tab).range
      
      #--------- Dock
      frame .apviz.dock -relief raised -bd 1
         button .apviz.dock.sel -image DOCK -anchor w -relief flat -bd 1 -overrelief raised -command { SPI::DockTool APViz }
         button .apviz.dock.del -image DOCKDELETE -anchor w -relief flat -bd 1 -overrelief raised -command APViz::Close
         entry .apviz.dock.coo -textvariable APViz::Data(Coo) -bg $GDefs(ColorLight) -width 50 -bd 1
         pack .apviz.dock.sel .apviz.dock.del -side left
         pack .apviz.dock.coo -side left -fill both -expand true
      pack .apviz.dock -side bottom -fill x

      Bubble::Create $Data(Tab).head.mode $Bubble(Mode)
      Bubble::Create $Data(Tab).head.save $Bubble(Save)
      
      bind $Data(Tab).opt.type.lst <ButtonRelease> "APViz::UpdateRange"
   }
   raise  .apviz
   
   APViz::CreateColormaps
}

proc APViz::SaveAsWindow { } {
   global GDefs

   variable Param
   variable Lbl
   variable Data
   variable Bubble

   if {$Data(CurrentProduct) eq ""} {
      ::Dialog::Info . $Lbl(SelectProduct)
      return
   }

   variable $Data(CurrentProduct)::Value
   variable $Data(CurrentProduct)::RowID

   APViz::DeleteWidget .saveAsBox

   toplevel .saveAsBox
   wm protocol .saveAsBox WM_DELETE_WINDOW { APViz::DeleteWidget .saveAsBox }
   wm transient .saveAsBox $Data(Frame)
   wm geom      .saveAsBox 425x120+[winfo rootx $Data(Frame)]+[winfo rooty $Data(Frame)]

   .saveAsBox configure -cursor left_ptr

   set Param(Frame) ""

   #----- Set path according to user selections
   set Param(Path) $Param(InitPath)$Data(Folder)/$Data(MacroCategory)/
   set Param(FullName) $Param(Path)$Param(Filename)

   TabFrame::Create .saveAsBox.tab 1 ""
   pack .saveAsBox.tab -side top -fill both -expand true -padx 5 -pady 5

   wm title .saveAsBox "SaveAs"
   set Param(Frame) [TabFrame::Add .saveAsBox.tab 1 [lindex $Lbl(Save) $GDefs(Lang)] False]

   labelframe $Param(Frame).config -text "Configurations"
   pack $Param(Frame).config -side top -fill x -padx 5 -ipady 2 -anchor n

   frame $Param(Frame).config.folder
      label $Param(Frame).config.folder.lbl -text [lindex $Lbl(Folder) $GDefs(Lang)] -width 12 -anchor w
      button $Param(Frame).config.folder.sel -image OPEN -relief flat -bd 0 -overrelief raised \
         -command { APViz::FilePathDefine [FileBox::Create .saveAsBox $APViz::Param(Path) Save $APViz::Param(Formats) $APViz::Param(Filename)] }
      entry $Param(Frame).config.folder.name -width 10 -bg $GDefs(ColorLight) -bd 1 -justify left -textvariable APViz::Param(FullName)
      $Param(Frame).config.folder.name xview moveto 1
      pack $Param(Frame).config.folder.lbl -side left 
      pack $Param(Frame).config.folder.name -side left -fill both -expand True
      pack $Param(Frame).config.folder.sel -side left -fill y
   pack $Param(Frame).config.folder -side top -fill x -expand True

   frame .saveAsBox.par -relief raised -bd 1
   pack .saveAsBox.par -side top -padx 5 -fill x

   frame .saveAsBox.command
      button .saveAsBox.command.ok -text "Sauvegarder" -bd 1 -command "APViz::SaveConfigFile ; APViz::DeleteWidget .saveAsBox"
      button .saveAsBox.command.cancel -text [lindex $Lbl(Close) $GDefs(Lang)] -command "APViz::DeleteWidget .saveAsBox" -bd 1
      pack .saveAsBox.command.ok .saveAsBox.command.cancel -side left -fill x -expand true
   pack .saveAsBox.command -side top -fill x -pady 5 -padx 5

   raise .saveAsBox
   grab .saveAsBox
}

