#============================================================================
# Environnement Canada
# Centre Meteorologique Canadien
# 2100 Trans-Canadienne
# Dorval, Quebec
#
# Projet     : Interface pour la gestion des experiences.
# Fichier    : <SPI.int>
# Creation   : Mai 2000 - J.P. Gauthier - CMC/CMOE
#
# Description: Interface de visualisation et de manipulation des champs et
#              autres types de donnees.
#
# Remarques  :
#
#============================================================================

#-------------------------------------------------------------------------------
# Nom      : <SPI::Splash>
# Creation : Fevrier 2005 - J.P. Gauthier - CMC/CMOE
#
# But      : Splash screen
#
# Parametres :
#    <Msg>   : Message a afficher
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::Splash { { Msg "" } } {
   global GDefs

   set SPI::Param(Loading) $Msg

   if { $Msg!="" } {

      if { ![winfo exists .splash] } {
         toplevel     .splash
         wm overrideredirect .splash true

         image create photo SPLASH -file $GDefs(Dir)/Apps/SPI.gif
         label .splash.img -image SPLASH -relief raised -bd 2 -bg #FFFFFF
         label .splash.info -relief flat -bd 0 -font -*-arial-bold-*-*-*-18-*-*-*-*-* -bg #FFFFFF -fg #666666 -textvariable SPI::Param(Loading) -anchor w

         set h [winfo screenheight .]
         set w [winfo screenwidth  .]

         #----- Test for multiple screens
         if  { [expr $w/2]>$h } {
            set w [expr $w/2]
         }
         set x [expr int($w/2.0-[image width  SPLASH]/2.0)]
         set y [expr int($h/2.0-[image height SPLASH]/2.0)]

         wm geometry .splash +$x+$y
         pack .splash.img -side top -fill x
         place .splash.info -in .splash.img -x 0 -y 35

         wm withdraw .
      }
   } else {
      destroy .splash
   }
   update idletasks
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::About>
# Creation : Octobre 2002 - J.P. Gauthier - CMC/CMOE
#
# But      : Fenetre d'informations
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::About { } {
   global GDefs
   variable Lbl
   variable Msg

   toplevel     .about
   wm title     .about [lindex $Lbl(About) $GDefs(Lang)]
   wm geometry  .about 650x450+[winfo rootx .]+[winfo rooty .]

   frame .about.info -relief raised -bd 1
      label .about.info.flag -bitmap @$GDefs(Dir)/Resources/Bitmap/SMC_hor_small.xbm -fg red
      frame .about.info.list
         text .about.info.list.l -relief sunken -bd 1 -bg $GDefs(ColorLight) -height 10 -width 50 \
            -yscrollcommand [list .about.info.list.s set]
         scrollbar .about.info.list.s -command ".about.info.list.l yview" -width 10 -bd 1
         pack .about.info.list.l -side left -fill both -expand true
         pack .about.info.list.s -side left -fill y
      pack .about.info.flag -side top -anchor nw -padx 5 -pady 5
      pack .about.info.list -side top -fill both -padx 5 -pady 5 -fill both -expand true

   button .about.close -text [lindex $Lbl(Close) $GDefs(Lang)] -command "destroy .about" -bd 1
   pack .about.info -fill both -side top -expand true
   pack .about.close -fill x -side top

   .about.info.list.l insert end "SPI version $GDefs(Version) $GDefs(StateSPI) (2010/02/02)\n\n"
   .about.info.list.l insert end "[lindex $Msg(Id) $GDefs(Lang)]\n"
   .about.info.list.l insert end "[lindex $Msg(Adress) $GDefs(Lang)]\n"
   .about.info.list.l insert end "[lindex $Msg(Mail) $GDefs(Lang)]\n"
   .about.info.list.l insert end "[lindex $Msg(Authors) 0]\n\n"
   .about.info.list.l insert end "[exec cat $GDefs(Dir)/License.txt]"
}

#----------------------------------------------------------------------------
# Nom      : <SPI::Dock>
# Creation : Mars 2004 - J.P. Gauthier - CMC/CMOE
#
# But      : Inserer (Dock) une fenetre dans l'interface SPI
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#----------------------------------------------------------------------------

proc SPI::Dock { Frame } {

   pack $Frame -before .pan -side right -fill y -anchor n

#   .pan add $Frame
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::DockTool>
# Creation : Octobre 2005 - J.P. Gauthier - CMC/CMOE -
#
# But      : Inserer la fenetre dans l'interface
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::DockTool { Tool { Command "" } } {
   variable Param

   upvar #0 ::${Tool}::Param param

   if { $param(Dock) } {
      set param(Dock) False
   } else {
      set param(Dock) True
   }
   destroy $param(Window)

   eval set proc \[info procs ::${Tool}::Window\]
   if { $proc!="" } {
      eval ${Tool}::Window
   }

   if { $Command!="" } {
      eval $Command
   }
}

#----------------------------------------------------------------------------
# Nom      : <SPI::Params>
# Creation : Octobre 2003 - J.P. Gauthier - CMC/CMOE
#
# But      : Definitions de la fenetres des option .
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#----------------------------------------------------------------------------

proc SPI::Params { } {
   global GDefs
   variable Lbl

   if { ![winfo exists .params] } {

      toplevel     .params -class Dialog
      wm withdraw  .params
      wm title     .params [lindex $Lbl(Params) $GDefs(Lang)]
      wm geometry  .params 330x390+[winfo rootx .]+[winfo rooty .]
#      wm resizable .params 0 0
      wm protocol  .params WM_DELETE_WINDOW { wm withdraw .params }
      wm transient .params .

      frame .params.command
         button .params.command.apply -text [lindex $Lbl(Apply) $GDefs(Lang)] -bd 1 -state disabled -command "SPI::ParamsApply"
         button .params.command.close -text [lindex $Lbl(Close) $GDefs(Lang)] -bd 1 -command "wm withdraw .params"
         pack .params.command.close .params.command.apply -side right

      TabFrame::Create .params.tab 2 ""

      pack .params.tab -side top -fill both -expand true -padx 5 -pady 5
      pack .params.command -side top -fill x -padx 5 -pady 5

      #----- Inserer les parametres des divers items
      Viewport::ParamFrame   .params.tab .params.command.apply
      FSTD::ParamFrame       .params.tab .params.command.apply
      Obs::ParamFrame        .params.tab .params.command.apply
      Trajectory::ParamFrame .params.tab .params.command.apply
      Page::ParamFrame       .params.tab .params.command.apply
      OpenGL::ParamFrame     .params.tab .params.command.apply

      TabFrame::Select .params.tab 0
   } else {
      if { ![winfo ismapped .params] } {
         .params.command.apply configure -state disabled
         wm geometry .params 330x390+[winfo rootx .]+[winfo rooty .]
      }
      update idletasks
      wm deiconify .params
      wm transient .params .
      raise .params .
      update idletasks
   }
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::ParamsApply>
# Creation : Octobre 2003 - J.P. Gauthier - CMC/CMOE
#
# But      : Effectue les modifications selon les parametres.
#
# Parametres  :
#
# Retour      :
#
# Remarque :
#    - Cette fonction effectue l'appel a la fonction "ParamApply" de tout
#      les "PlugIns" actifs.
#
#-------------------------------------------------------------------------------

proc SPI::ParamsApply { } {

   Viewport::ConfigSet $Page::Data(Frame)

   Page::ParamApply

   . config -cursor watch
   $Page::Data(Canvas) config -cursor watch
   update idletasks

   #----- Update every pages which could need it
   Page::Update        $Page::Data(Frame)
   Page::UpdateCommand $Page::Data(Frame)

   $Page::Data(Canvas) config -cursor left_ptr
   . config -cursor left_ptr
   .params.command.apply configure -state disabled
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::Init>
# Creation : Novembre 2009 - J.P. Gauthier - CMC/CMOE
#
# But      : Initialise les parametres d'interfaces.
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::Init { } {
   global GDefs env

   font create XFont6  -family Courier -weight bold -size -6
   font create XFont8  -family Courier -weight bold -size -8
   font create XFont9  -family Courier -weight bold -size -9
   font create XFont10 -family Courier -weight bold -size -10
   font create XFont12 -family Courier -weight bold -size -12
   font create XFont14 -family Courier -weight bold -size -14
   font create XFont16 -family Courier -weight bold -size -16
   font create XFont17 -family Courier -weight bold -size -17
   font create XFont18 -family Courier -weight bold -size -18
   font create XFont20 -family Courier -weight bold -size -20
   font create XFont24 -family Courier -weight bold -size -24

   font create XFontIcon -family Arial -weight bold -size -10

   option add *selectColor            $GDefs(ColorHighLight)
   option add *background             $GDefs(ColorFrame)
   option add *foreground             black
   option add *highlightThickness     0
   option add *font                   $GDefs(Font)
   option add *Menu*activeBorderWidth 0
   option add *Menu*tearOff           0
   option add *Menu*borderWidth       1

   #----- Mise en place de l'interface
   tk scaling 1.0

   if { $SPI::Param(Window) } {
      wm geometry . $SPI::Param(Geom)
   } else {
      wm withdraw .
   }

   #----- NVidia Antialiasing
   set env(__GL_FSAA_MODE) 1 ;#2x Bilenear Multisampling
   set env(__GL_FSAA_MODE) 2 ;#2x Quincunx Multisampling
   set env(__GL_FSAA_MODE) 4 ;#2x2 SuperSampling (Best for Quadro2 Pro)
   set env(__GL_FSAA_MODE) 5 ;#4x Gaussian Multisampling (Best for QuadroFX)

   if { ![info exists env(GDB_PATH)] } {
      set env(GDB_PATH) /cnfs/ops/production/DBGeo/data
   }
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::Window>
# Creation : Mai 2000 - J.P. Gauthier - CMC/CMOE
#
# But      : Initialise la fenetre principale.
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::Window { } {
   global GDefs env
   variable Lbl
   variable Data
   variable Bubble

   wm protocol  . WM_DELETE_WINDOW { SPI::Quit }
   wm deiconify .

   label .active -image MOUSE -relief raised -bd 1

   frame .menu -bd 1 -relief raised
      menubutton .menu.file -text [lindex $Lbl(File) $GDefs(Lang)]     -menu .menu.file.menu   -bd 1
      menubutton .menu.disp -text [lindex $Lbl(Display) $GDefs(Lang)]  -menu .menu.disp.menu   -bd 1
      menubutton .menu.tools -text [lindex $Lbl(Tools) $GDefs(Lang)]   -menu .menu.tools.menu  -bd 1
      menubutton .menu.window -text [lindex $Lbl(Window) $GDefs(Lang)] -menu .menu.window.menu -bd 1
      menubutton .menu.help -text [lindex $Lbl(Help) $GDefs(Lang)]     -menu .menu.help.menu   -bd 1
      pack .menu.file .menu.disp .menu.tools .menu.window -side left
      pack .menu.help -side right
   pack .menu -side top -fill x

   SPI::ToolBar .bar
   TabFrame::Create .mdi 1 "SPI::PageSetup" 0

   frame .info -bd 1 -relief raised
      menubutton .info.opt -image DOWN -menu .info.opt.menu -bd 1
      label .info.cooval -textvariable Page::Data(Coord) -bg $GDefs(ColorLight) -relief sunken -bd 1 -width 36
      label .info.altval -textvariable Page::Data(Altitude) -bg $GDefs(ColorLight) -relief sunken -bd 1 -width 9 -anchor e
      label .info.fldval -textvariable Page::Data(Value) -bg $GDefs(ColorLight) -relief sunken -bd 1 -width 10

      ttk::progressbar .info.job -variable ::SPI::Data(Percent) -orient horizontal -length 100 -maximum 100

      pack .info.opt -side left -fill y
      pack .info.cooval .info.altval -ipadx 2 -side left -fill y
      pack .info.fldval -side left -fill both -expand true
      pack .info.job -side left
   pack .info -side bottom -fill x

   menu .info.opt.menu
      .info.opt.menu add radiobutton -label [lindex $Lbl(Deg) $GDefs(Lang)] -variable Page::Data(CoordUnit) -value DEG \
         -command  "set Page::Data(CoordPrec) 10"
      .info.opt.menu add radiobutton -label [lindex $Lbl(Min) $GDefs(Lang)] -variable Page::Data(CoordUnit) -value MIN \
         -command  "set Page::Data(CoordPrec) 5"
      .info.opt.menu add separator
      .info.opt.menu add checkbutton -label [lindex $Lbl(Link) $GDefs(Lang)] -variable Page::Data(CoordLink)
      .info.opt.menu add separator
      .info.opt.menu add command -label [lindex $Lbl(Follower) $GDefs(Lang)] -command { Viewport::FollowerInfo $Page::Data(Frame) $Viewport::Data(VP) }

   panedwindow .pan -orient horizontal -showhandle False -opaqueresize False -bd 1
   panedwindow .pan.side -orient vertical -showhandle False -opaqueresize False -relief raised -bd 1 -sashrelief sunken
   pack .pan  -after .bar -side top -fill both -expand true
   .pan add .mdi
   raise .mdi

   Bubble::Create .info.opt    $Bubble(CoordsOpt)
   Bubble::Create .info.cooval $Bubble(Coords)
   Bubble::Create .info.altval $Bubble(Alt)
   Bubble::Create .info.fldval $Bubble(Val)
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::WindowLayout>
# Creation : Octobre 2003 - J.P. Gauthier - CMC/CMOE
#
# But      : Initialiser le layout des fenetres
#
# Parametres :
#   <Side>   : Positionnement des fenetre secondaires (right, top)
#   <Sizes>  : Liste des dimensions
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::WindowLayout { Side { Sizes {} } } {
   global GDefs
   variable Data
   variable Param

   set Nb [llength $Sizes]

   #----- Si on ne change que la position
   if { $Sizes==-1 } {
      set Nb [llength [.pan.side panes]]
      set maxw [winfo width  .pan.side]
      set maxh [winfo height .pan.side]
   } else {

      #----- Recuperer les dimensions maximales
      set maxw -1
      set maxh -1
      set i 0

      foreach size $Sizes {

         if { $size=="" } {
            if { [winfo exist .pan.side.win$i] } {
               set size [winfo width .pan.side.win$i]x[winfo height .pan.side.win$i]
            } else {
               set size 200x200
            }
            lset Sizes $i $size
         }

         set size [split $size x]
         set maxw [expr $maxw>[lindex $size 0]?$maxw:[lindex $size 0]]
         set maxh [expr $maxh>[lindex $size 1]?$maxh:[lindex $size 1]]
         incr i
      }
   }

   set mdiw [winfo width  .mdi]
   set mdih [winfo height .mdi]

   .pan forget .pan.side .mdi
   update

   set mdiw [expr [winfo width .pan]-$maxw]
   set mdih [expr [winfo height .pan]-$maxh]

   if { $mdiw<5 } {
      set mdiw 250
      set maxw [expr $maxw-250]
   }
   if { $mdih<5 } {
      set mdih 250
      set maxh [expr $maxh-250]
   }

   if { $Nb>0 } {

      switch $Side {
         "right" {
            .pan configure -orient horizontal
            .pan.side configure -orient vertical
            .pan add .mdi -width $mdiw
            .pan add .pan.side -after .mdi -width $maxw
         }
         "left" {
            .pan configure -orient horizontal
            .pan.side configure -orient vertical
            .pan add .pan.side -width $maxw
            .pan add .mdi -width $mdiw
         }
         "top" {
            .pan configure -orient vertical
            .pan.side configure -orient horizontal
            .pan add .pan.side -height $maxh
            .pan add .mdi -height $mdih
         }
         "bottom" {
            .pan configure -orient vertical
            .pan.side configure -orient horizontal
            .pan add .mdi -height $mdih
            .pan add .pan.side -height $maxh
         }
      }
   } else {
      .pan add .mdi
   }

   if { $Sizes!=-1 } {

      #----- Supprimer les panes de trops
      for { set i [expr [llength [.pan.side panes]]-1] } { $i>[expr $Nb-1] } { incr i -1 } {
         if { [winfo exist .pan.side.win$i] } {
            .pan.side forget .pan.side.win$i
            Page::Destroy .pan.side.win$i
            unset SPI::Data(Layout.pan.side.win$i)
            foreach item $Data(Items) {
               unset SPI::Data(Show$item.pan.side.win$i)
            }
         }
      }

      #----- Ajouter les panes manquants
      for { set i 0 } { $i<$Nb } { incr i } {

         set size [split [lindex $Sizes $i] x]

         if { ![winfo exists .pan.side.win$i] } {
            Page::Create .pan.side.win$i -1 -1

            .pan.side add .pan.side.win$i -width [lindex $size 0] -height [lindex $size 1]
            set SPI::Data(Layout.pan.side.win$i) ""
            foreach item $Data(Items) {
               set SPI::Data(Show$item.pan.side.win$i) 0
            }
         } else {
            .pan.side paneconfigure .pan.side.win$i -width [lindex $size 0] -height [lindex $size 1]
         }
      }
      set Param(Panes) $Sizes

      #----- Selectionner un frame actif
      if { $Page::Data(Frame)=="" } {
         set $Page::Data(Frame) [lindex $Page::Data(Frames) 0]
         Page::Activate $Page::Data(Frame)
      }
   }
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::WindowMenu>
# Creation : Octobre 2003 - J.P. Gauthier - CMC/CMOE
#
# But      : Initialiser le menu
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::WindowMenu { } {
   global GDefs
   variable Lbl
   variable Data
   variable Param

   menu .menu.file.menu
      .menu.file.menu add cascade -label [lindex $Lbl(Open) $GDefs(Lang)] -menu .menu.file.menu.type -underline 0 -image OPEN -compound left
      .menu.file.menu add separator
      .menu.file.menu add command -label [lindex $Lbl(Print) $GDefs(Lang)] \
         -command "PrintBox::Create \$Page::Data(Frame) PRINT \$SPI::Param(Layout)" -underline 0 -image PRINT -compound left
      .menu.file.menu add command -label [lindex $Lbl(Image) $GDefs(Lang)] \
         -command "PrintBox::Create \$Page::Data(Frame) SAVE \$SPI::Param(Layout)" -underline 0 -image SAVE -compound left
      .menu.file.menu add command -label [lindex $Lbl(Export) $GDefs(Lang)] -underline 0 -image OPENDOC -compound left \
         -command "Export::Window"
      .menu.file.menu add separator
      .menu.file.menu add command -label [lindex $Lbl(ProjectLoad) $GDefs(Lang)] -image BOOK -compound left -command { SPI::ProjectRead [FileBox::Create . "" Load [list $FileBox::Type(SPI)]]}
      .menu.file.menu add command -label [lindex $Lbl(ProjectSave) $GDefs(Lang)] -image BOOKSAVE -compound left -command { SPI::ProjectWindow }
      .menu.file.menu add separator
      .menu.file.menu add command -label [lindex $Lbl(Execute) $GDefs(Lang)] -command { SPI::Execute [FileBox::Create . "" Load [list $FileBox::Type(TCL)]] } -image DOCRUN -compound left
      .menu.file.menu add separator
      .menu.file.menu add command -label [lindex $Lbl(Quit) $GDefs(Lang)] -command "SPI::Quit" -underline 0 -image ERROR -compound left

   menu .menu.file.menu.type
      .menu.file.menu.type add command -label "[lindex $Lbl(FileRPN) $GDefs(Lang)] ..." \
         -command { SPI::FileOpen NEW FieldBox "" [list $FileBox::Type(FSTD)] "" }  -underline 0
      .menu.file.menu.type add command -label "[lindex $Lbl(FileGRIB) $GDefs(Lang)] ..." \
         -command { SPI::FileOpen NEW FieldBox "" [list $FileBox::Type(GRIB)] "" }  -underline 0
      .menu.file.menu.type add command -label "[lindex $Lbl(Trajectory) $GDefs(Lang)] ..." \
         -command { SPI::FileOpen NEW TrajBox "" [list $FileBox::Type(TRAJ) $FileBox::Type(HYSPLIT)] "" } -underline 0
      .menu.file.menu.type add command -label "[lindex $Lbl(Obs) $GDefs(Lang)] ..." \
         -command { SPI::FileOpen NEW ObsBox "" [list $FileBox::Type(OBS)] "" } -underline 0
      .menu.file.menu.type add command -label "[lindex $Lbl(MetObs) $GDefs(Lang)] ..." \
         -command { NowCaster::Window Obs; NowCaster::Obs::Add [FileBox::Create . "" Load ""] } -underline 0
      .menu.file.menu.type add command -label "[lindex $Lbl(Radar) $GDefs(Lang)] ..." \
         -command { NowCaster::Window Radar; NowCaster::Radar::Add [FileBox::Create . "" Load ""] } -underline 0
      .menu.file.menu.type add command -label "[lindex $Lbl(GeoOGR) $GDefs(Lang)] ..." \
         -command { Mapper::Window; Mapper::Read [FileBox::Create . "" LoadPath [concat [list $FileBox::Type(ALL)] $Mapper::Data(OGRFormats)]] False OGR } -underline 0
      .menu.file.menu.type add command -label "[lindex $Lbl(GeoGDAL) $GDefs(Lang)] ..." \
         -command { Mapper::Window; Mapper::Read [FileBox::Create . "" LoadPath [concat [list $FileBox::Type(ALL)] $Mapper::Data(GDALFormats)]] False GDAL } -underline 0
      .menu.file.menu.type add separator
      .menu.file.menu.type add command -label "[lindex $Lbl(Icons) $GDefs(Lang)] ..." \
         -command { SPI::IcoOpen [FileBox::Create . "" Load [list $FileBox::Type(ICO)]] }  -underline 0

   menu .menu.disp.menu -tearoff 1
      .menu.disp.menu add checkbutton -label [lindex $Lbl(Logo) $GDefs(Lang)] -variable SPI::Data(ShowLOGO) \
         -command "SPI::DrawImage \$Page::Data(Frame) LOGO 5 5 nw 1 0 0" -onvalue 1 -offvalue 0
      .menu.disp.menu add checkbutton -label [lindex $Lbl(Clock) $GDefs(Lang)] -variable SPI::Data(ShowClock) \
         -command "SPI::DrawClock \$Page::Data(Frame)" -onvalue 1 -offvalue 0
      .menu.disp.menu add checkbutton -label [lindex $Lbl(Compass) $GDefs(Lang)] -variable SPI::Data(ShowCompass) \
         -command "SPI::DrawCompass \$Page::Data(Frame)"
      .menu.disp.menu add checkbutton -label [lindex $Lbl(Scale) $GDefs(Lang)] -variable SPI::Data(ShowScale) \
         -command "SPI::DrawScale \$Page::Data(Frame)"
      .menu.disp.menu add checkbutton -label [lindex $Lbl(Test) $GDefs(Lang)] -variable SPI::Data(ShowTEST) \
         -command "SPI::DrawImage \$Page::Data(Frame) TEST \[winfo width \$Page::Data(Canvas)\] 5 ne 5 -128 128" \
         -onvalue 1 -offvalue 0
      .menu.disp.menu add checkbutton -label [lindex $Lbl(GeoLegend) $GDefs(Lang)] -variable SPI::Data(ShowGeoLegend) \
         -command "SPI::DrawGeoLegend \$Page::Data(Frame)"
      .menu.disp.menu add separator
      .menu.disp.menu add checkbutton -label [lindex $Lbl(DataBar) $GDefs(Lang)] -variable SPI::Data(ShowDataBar) \
         -command "DataBar::Update \$Page::Data(Frame) \$SPI::Data(ShowDataBar)"  -accelerator "Ctrl-L"
      .menu.disp.menu add checkbutton -label [lindex $Lbl(Colorbar) $GDefs(Lang)] -variable SPI::Data(ShowColorBar) \
         -command "ColorBar::Update \$Page::Data(Frame) \$SPI::Data(ShowColorBar)" -accelerator "Ctrl-C" -onvalue 1 -offvalue 0
      .menu.disp.menu add separator
      .menu.disp.menu add cascade -label [lindex $Lbl(Graph) $GDefs(Lang)] -menu .menu.disp.menu.graph
      .menu.disp.menu add cascade -label [lindex $Lbl(Traj) $GDefs(Lang)] -menu .menu.disp.menu.traj
      .menu.disp.menu add cascade -label [lindex $Lbl(Areas) $GDefs(Lang)] -menu .menu.disp.menu.areas
      .menu.disp.menu add cascade -label [lindex $Lbl(Icons) $GDefs(Lang)] -menu .menu.disp.menu.icons
      .menu.disp.menu add separator
      .menu.disp.menu add command -label [lindex $Lbl(Miniport) $GDefs(Lang)] -accelerator "Ctrl-M" \
         -command "Miniport::Create \$Page::Data(Frame)"
      .menu.disp.menu add command -label [lindex $Lbl(Viewport) $GDefs(Lang)]  -accelerator "Ctrl-P" \
         -command "SPI::ObjectAdd Viewport; Page::ModeSelect $Page::Data(Mode) $Page::Data(Frame)"

   menu .menu.disp.menu.graph -tearoff 1
      foreach graph $Graph::Data(Types) {
        eval set lbl \[lindex \$Graph::${graph}::Lbl(Title) $GDefs(Lang)\]
        .menu.disp.menu.graph add command -label $lbl -command "Graph::Params; SPI::ObjectAdd Graph ::$graph"
      }

   menu .menu.disp.menu.traj -tearoff 1
      .menu.disp.menu.traj add checkbutton -label [lindex $Lbl(TrajGraph) $GDefs(Lang)] -variable SPI::Data(ShowTrajGraph) \
         -command "SPI::DrawTrajGraph \$Page::Data(Frame)" -onvalue 1 -offvalue 0
      .menu.disp.menu.traj add checkbutton -label [lindex $Lbl(TrajHeight) $GDefs(Lang)] -variable SPI::Data(ShowTrajHeight) \
         -command "SPI::DrawTrajHeight \$Page::Data(Frame)" -onvalue 1 -offvalue 0
      .menu.disp.menu.traj add checkbutton -label [lindex $Lbl(TrajLegend) $GDefs(Lang)] -variable SPI::Data(ShowTrajLegend) \
         -command "SPI::DrawTrajLegend \$Page::Data(Frame)" -onvalue 1 -offvalue 0

   menu .menu.tools.menu
      .menu.tools.menu add command -label [lindex $Lbl(Animator) $GDefs(Lang)] -accelerator "Alt-A" -image VCRPLAYF -compound left \
         -command { Animator::Window }
      .menu.tools.menu add command -label [lindex $Lbl(Calculator) $GDefs(Lang)] -accelerator "Alt-C" -image CALC -compound left \
         -command { FieldCalc::Window }
      if { [string first "ec.gc.ca" [info hostname]] } {
         .menu.tools.menu add command -label [lindex $Lbl(Model) $GDefs(Lang)] -accelerator "Alt-M" -image MODEL  -compound left \
            -command { set Model::Param(Show) True; Model::Window }
      }
      .menu.tools.menu add separator

      foreach tool $Param(Tools) {
         eval set title \$${tool}::Param(Title)

         if { [info exists ${tool}::Param(Icon)] } {
            eval set icon \$${tool}::Param(Icon)
         } else {
            set icon TOOL
         }
         .menu.tools.menu add command -label "[lindex $title $GDefs(Lang)] ..." -image $icon -compound left -command "${tool}::Window"
      }
      .menu.tools.menu add separator

   bind . <Alt-a> ".menu.tools.menu invoke 0"
   bind . <Alt-c> ".menu.tools.menu invoke 1"
   bind . <Alt-m> ".menu.tools.menu invoke 2"
   bind . <Control-l> ".menu.disp.menu invoke 8"
   bind . <Control-c> ".menu.disp.menu invoke 9"
   bind . <Control-m> ".menu.disp.menu invoke 16"
   bind . <Control-p> ".menu.disp.menu invoke 17"

   Areas::CreateWidget .menu.disp.menu

   menu .menu.disp.menu.icons -tearoff 1
      .menu.disp.menu.icons add command -label "[lindex $Lbl(Font) $GDefs(Lang)] ..."  \
         -command "FontBox::Create . \"Page::UpdateItems \$Page::Data(Frame)\" XFontIcon"
      .menu.disp.menu.icons add checkbutton -label [lindex $Lbl(Id) $GDefs(Lang)] -variable SPI::Param(IconId) -onvalue True -offvalue False\
         -command "Page::UpdateItems \$Page::Data(Frame)"
      .menu.disp.menu.icons add checkbutton -label [lindex $Lbl(Icon) $GDefs(Lang)] -variable SPI::Param(IconImage) -onvalue True -offvalue False\
         -command "Page::UpdateItems \$Page::Data(Frame)"
      .menu.disp.menu.icons add separator

   menu .menu.window.menu
      .menu.window.menu add command -image FRAMEADD -compound left -command "SPI::PageNew False" -label [lindex $Lbl(PageNew) $GDefs(Lang)]
      .menu.window.menu add command -image FRAMEDEL -compound left -command "SPI::PageDel" -label [lindex $Lbl(PageDel) $GDefs(Lang)]
      .menu.window.menu add separator
      .menu.window.menu add command -image FRAMEEXT -compound left -command "SPI::PageNew True" -label [lindex $Lbl(PageOut) $GDefs(Lang)]
      .menu.window.menu add separator
      .menu.window.menu add command -image FRAME0 -compound left -command "SPI::WindowLayout right" -label [lindex $Lbl(Frame0) $GDefs(Lang)]
      .menu.window.menu add command -image FRAME1 -compound left -label [lindex $Lbl(Frame1) $GDefs(Lang)] \
         -command { SPI::WindowLayout $SPI::Param(PaneSide) { "" } }
      .menu.window.menu add command -image FRAME2 -compound left -label [lindex $Lbl(Frame2) $GDefs(Lang)] \
         -command { SPI::WindowLayout $SPI::Param(PaneSide) { "" "" } }
      .menu.window.menu add command -image FRAME3 -compound left -label [lindex $Lbl(Frame3) $GDefs(Lang)] \
         -command { SPI::WindowLayout $SPI::Param(PaneSide) { "" "" "" } }
      .menu.window.menu add cascade -image FRAMEPOS -compound left -label [lindex $Lbl(Side) $GDefs(Lang)] -menu .menu.window.menu.side

    menu .menu.window.menu.side
      .menu.window.menu.side add radiobutton -image FRAMER -compound left -variable SPI::Param(PaneSide) -value right  -label [lindex $Lbl(Right) $GDefs(Lang)] \
          -command { SPI::WindowLayout $SPI::Param(PaneSide) -1 }
      .menu.window.menu.side add radiobutton -image FRAMEL -compound left -variable SPI::Param(PaneSide) -value left   -label [lindex $Lbl(Left) $GDefs(Lang)] \
          -command { SPI::WindowLayout $SPI::Param(PaneSide) -1 }
      .menu.window.menu.side add radiobutton -image FRAMET -compound left -variable SPI::Param(PaneSide) -value top    -label [lindex $Lbl(Top) $GDefs(Lang)] \
          -command { SPI::WindowLayout $SPI::Param(PaneSide) -1 }
      .menu.window.menu.side add radiobutton -image FRAMEB -compound left -variable SPI::Param(PaneSide) -value bottom -label [lindex $Lbl(Bottom) $GDefs(Lang)] \
          -command { SPI::WindowLayout $SPI::Param(PaneSide) -1 }

   menu .menu.help.menu
       .menu.help.menu add checkbutton -image BUBBLE -label [lindex $Lbl(Bubble) $GDefs(Lang)] -variable SPI::Param(Bubble) -compound left \
         -onvalue True -offvalue False -command { Bubble::Activate $SPI::Param(Bubble) }
       .menu.help.menu add separator
       .menu.help.menu add command -label [lindex $Lbl(About) $GDefs(Lang)] -command "SPI::About"

   Bubble::Activate $Param(Bubble)
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::ToolBar>
# Creation : Octobre 2003 - J.P. Gauthier - CMC/CMOE
#
# But      : Initialiser la barre d'outils
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::ToolBar { Frame } {
   global GDefs
   variable Lbl
   variable Msg
   variable Bubble

   frame $Frame
      frame $Frame.opt -relief raised -bd 1
         button $Frame.opt.params -image PARAMS -relief flat -bd 0 -overrelief raised \
            -command "SPI::Params"
         button $Frame.opt.print  -image PRINT  -relief flat -bd 0 -overrelief raised \
            -command { PrintBox::Create $Page::Data(Frame) PRINT $SPI::Param(Layout) }
         button $Frame.opt.save  -image SAVE  -relief flat -bd 0 -overrelief raised \
            -command { PrintBox::Create $Page::Data(Frame) SAVE $SPI::Param(Layout) }
         pack $Frame.opt.save $Frame.opt.print $Frame.opt.params -side left -padx 2

      pack $Frame.opt -side left
      frame $Frame.tool -relief raised -bd 1
         checkbutton $Frame.tool.graph -image GRAPH -relief sunken -bd 1 -overrelief raised -offrelief flat -width 28 -anchor w  -selectcolor $GDefs(ColorLight)\
            -command { Graph::Params $Graph::Data(Graph) $Graph::Data(Type) True } -variable Graph::Data(Show) -onvalue True -offvalue False -indicatoron False
         menubutton $Frame.tool.graph.down -image OPTIONS -relief flat -bd 0 -menu $Frame.tool.graph.down.menu
         place $Frame.tool.graph.down -relx 1.0 -rely 0.0 -anchor ne -relheight 1.0
         menu $Frame.tool.graph.down.menu
         foreach graph $Graph::Data(Types) {
            eval set lbl \[lindex \$Graph::${graph}::Lbl(Title) $GDefs(Lang)\]
            $Frame.tool.graph.down.menu add command -label $lbl -command "set Graph::Data(Show) True; SPI::ObjectAdd Graph ::$graph; Graph::Params"
         }
         pack $Frame.tool.graph -side left -padx 2
         if { [string first "ec.gc.ca" [info hostname]] } {
            checkbutton $Frame.tool.model -image MODEL -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False -variable Model::Param(Show) \
               -onvalue True -offvalue False -command "Model::Window"  -selectcolor $GDefs(ColorLight)
            pack $Frame.tool.model -before $Frame.tool.graph -side left -padx 2
         }
      pack $Frame.tool -side left

      frame $Frame.cam -relief raised -bd 1
         radiobutton $Frame.cam.zoom -image MODEZOOM -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -variable Page::Data(Mode) -value Zoom -command { SPI::ToolMode SPI Zoom } -selectcolor $GDefs(ColorLight)
         radiobutton $Frame.cam.cam  -image MODECAM -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -variable Page::Data(Mode) -value Cam -command {  SPI::ToolMode SPI Cam } -selectcolor $GDefs(ColorLight)
         radiobutton $Frame.cam.fly  -image MODEFLY -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -variable Page::Data(Mode) -value Fly -command {  SPI::ToolMode SPI Fly } -selectcolor $GDefs(ColorLight)
         ComboBox::Create $Frame.cam.sel ProjCam::Data(Name) edit sorted nodouble -1 $ProjCam::Data(Names) 15 6 \
            "ProjCam::Select \$Page::Data(Frame) \$Page::Data(Frame) \$ProjCam::Data(Name)"
         button $Frame.cam.clr   -image WORLDRESET -relief flat -bd 0 -overrelief raised \
            -command { Viewport::Reset $Page::Data(Frame) }
         button $Frame.cam.down  -image CAMDOWN  -relief flat -bd 0 -overrelief raised \
            -command { ProjCam::Reset $Page::Data(Frame) False ; Page::Update $Page::Data(Frame) }
         button $Frame.cam.zclr  -image ZOOMCLR  -relief flat -bd 0 -overrelief raised \
            -command { ProjCam::ZoomOut $Page::Data(Frame) $Page::Data(Frame) $Viewport::Data(VP) True }
         button $Frame.cam.zback -image ZOOMBACK -relief flat -bd 0 -overrelief raised \
            -command { ProjCam::ZoomOut $Page::Data(Frame) $Page::Data(Frame) $Viewport::Data(VP) False True }
         button $Frame.cam.out   -image CAMSAVE  -relief flat -bd 0 -overrelief raised \
            -command "ProjCam::Save $Frame.cam.sel \[Dialog::Get . \$SPI::Bubble(CamSave) \$SPI::Msg(CamName)\]"
         button $Frame.cam.in    -image CAMDEL   -relief flat -bd 0 -overrelief raised \
            -command "ProjCam::Delete $Frame.cam.sel"
         pack $Frame.cam.clr $Frame.cam.down $Frame.cam.zclr $Frame.cam.zback $Frame.cam.zoom $Frame.cam.cam $Frame.cam.sel $Frame.cam.out $Frame.cam.in -side left -padx 2
      pack  $Frame.cam -side left
      frame $Frame.page -relief raised -bd 1
         ComboBox::Create $Frame.page.scale Page::Data(Scale) edit unsorted nodouble -1 { 1000 500 200 100 50 25 10 } 4 5
#            { set Page::Data(Full$Page::Data(Frame)) False ; Page::Scale $Page::Data(Frame) }
         button $Frame.page.out -image DOCOUT -relief flat -bd 0 -overrelief raised -state disabled \
            -command { set Page::Data(Full$Page::Data(Frame)) False ; Page::Scale $Page::Data(Frame) -10 }
         button $Frame.page.in  -image DOCIN -relief flat -bd 0 -overrelief raised -state disabled \
            -command { set Page::Data(Full$Page::Data(Frame)) False ; Page::Scale $Page::Data(Frame) 10 }
         checkbutton $Frame.page.full -image DOC -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False -selectcolor $GDefs(ColorLight) -state disabled \
            -variable Page::Data(Full) -onvalue True -offvalue False -command { set Page::Data(Full$Page::Data(Frame)) $Page::Data(Full) ; Page::ScaleSet $Page::Data(Frame) }
         pack $Frame.page.out $Frame.page.scale $Frame.page.in $Frame.page.full -side left -padx 2
#      pack  $Frame.page -side left
      frame $Frame.layout -relief raised -bd 1
         ComboBox::Create $Frame.layout.sel SPI::Param(Layout) edit sorted nodouble -1 $SPI::Param(Layouts) 15 5 \
            { SPI::LayoutLoad $Page::Data(Frame) $SPI::Param(Layout) }
         button $Frame.layout.save -image PAGESAVE -relief flat -bd 0 -overrelief raised \
            -command { SPI::LayoutSave $Page::Data(Frame) [Dialog::Get . $SPI::Bubble(LayoutSave) $SPI::Msg(LayoutName)] }
         button $Frame.layout.del -image PAGEDEL -relief flat -bd 0 -overrelief raised \
            -command { SPI::LayoutDelete }
         button $Frame.layout.run -image DOCRUN -relief flat -bd 0 -overrelief raised \
            -command { SPI::Execute [FileBox::Create . "" Load [list $FileBox::Type(TCL)]] }
         checkbutton $Frame.layout.mag  -image MODEMAG -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -variable Page::Data(Mode) -onvalue Mag -offvalue Zoom -command { SPI::ToolMode SPI $Page::Data(Mode) } -selectcolor $GDefs(ColorLight) -width 28 -anchor w
         menubutton $Frame.layout.mag.opt -image OPTIONS -relief flat -bd 0 -menu $Frame.layout.mag.opt.menu
            place $Frame.layout.mag.opt -relx 1.0 -rely 0.0 -anchor ne -relheight 1.0
            menu $Frame.layout.mag.opt.menu
               $Frame.layout.mag.opt.menu add radiobutton -label " 128 Pixels" -variable CVMagnifier::Param(Size) -value 128
               $Frame.layout.mag.opt.menu add radiobutton -label " 256 Pixels" -variable CVMagnifier::Param(Size) -value 256
               $Frame.layout.mag.opt.menu add separator
               $Frame.layout.mag.opt.menu add radiobutton -label " Zoom 2x" -variable CVMagnifier::Param(Zoom) -value 2
               $Frame.layout.mag.opt.menu add radiobutton -label " Zoom 4x" -variable CVMagnifier::Param(Zoom) -value 4
               $Frame.layout.mag.opt.menu add radiobutton -label " Zoom 8x" -variable CVMagnifier::Param(Zoom) -value 8
               $Frame.layout.mag.opt.menu add radiobutton -label " Zoom 16x" -variable CVMagnifier::Param(Zoom) -value 16
               $Frame.layout.mag.opt.menu add radiobutton -label " Zoom 32x" -variable CVMagnifier::Param(Zoom) -value 32

         pack $Frame.layout.sel $Frame.layout.save $Frame.layout.del $Frame.layout.run $Frame.layout.mag -side left -padx 2
      pack $Frame.layout -side left -fill x

      frame $Frame.win -relief raised -bd 1
         button $Frame.win.new -image FRAMEEXT -relief flat -bd 0 -overrelief raised \
            -command { SPI::PageNew True }
         button $Frame.win.add -image FRAMEADD -relief flat -bd 0 -overrelief raised \
            -command { SPI::PageNew False }
         button $Frame.win.del -image FRAMEDEL -relief flat -bd 0 -overrelief raised \
            -command { SPI::PageDel }
         pack $Frame.win.new $Frame.win.add $Frame.win.del -side left -padx 2
      pack $Frame.win -side left -fill x
   pack $Frame -side top -fill x

   pack [Mapper::Geo::Widget $Frame] -side left -fill x -expand true

   Bubble::Create $Frame.win.new     $Bubble(WinNew)
   Bubble::Create $Frame.win.add     $Bubble(WinAdd)
   Bubble::Create $Frame.win.del     $Bubble(WinDel)

   Bubble::Create $Frame.tool.graph  $Bubble(Graph)
   Bubble::Create $Frame.tool.model  $Bubble(Model)
   Bubble::Create $Frame.opt.params  $Bubble(Params)
   Bubble::Create $Frame.opt.print   $Bubble(Print)
   Bubble::Create $Frame.opt.save    $Bubble(Image)
   Bubble::Create $Frame.cam.zoom    $Bubble(Zoom)
   Bubble::Create $Frame.cam.cam     $Bubble(Cam)
   Bubble::Create $Frame.page.scale  $Bubble(PageScale)
   Bubble::Create $Frame.page.in     $Bubble(PageIn)
   Bubble::Create $Frame.page.out    $Bubble(PageOut)
   Bubble::Create $Frame.page.full   $Bubble(PageFull)
   Bubble::Create $Frame.layout.sel  $Bubble(LayoutName)
   Bubble::Create $Frame.layout.save $Bubble(LayoutSave)
   Bubble::Create $Frame.layout.del  $Bubble(LayoutDel)
   Bubble::Create $Frame.layout.run  $Bubble(LayoutRun)
   Bubble::Create $Frame.layout.mag  $Bubble(LayoutMag)
   Bubble::Create $Frame.cam.zback   $Bubble(ZoomBack)
   Bubble::Create $Frame.cam.zclr    $Bubble(ZoomClear)
   Bubble::Create $Frame.cam.clr     $Bubble(CamClear)
   Bubble::Create $Frame.cam.sel     $Bubble(CamName)
   Bubble::Create $Frame.cam.out     $Bubble(CamSave)
   Bubble::Create $Frame.cam.in      $Bubble(CamDel)
   Bubble::Create $Frame.cam.fly     $Bubble(CamFly)
   Bubble::Create $Frame.cam.down    $Bubble(CamDown)
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::ContextMenuProj>
# Creation : Octobre 2003 - J.P. Gauthier - CMC/CMOE
#
# But      : Creer le menu contextuel des projections
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::ContextMenuProj { } {
   global   GDefs
   variable Lbl
   variable Map

   #----- Creation du menu contextuel de la projection

   menu .mapmenu -type normal
   .mapmenu add command -label [lindex $Lbl(Zoom_Back) $GDefs(Lang)] -image ZOOMBACK -compound left \
      -command "ProjCam::ZoomOut \$Page::Data(Frame) \$Page::Data(Frame) \$Viewport::Data(VP) False True"
   .mapmenu add command -label [lindex $Lbl(Zoom_Reset) $GDefs(Lang)] -image ZOOMCLR -compound left \
      -command "ProjCam::ZoomOut \$Page::Data(Frame) \$Page::Data(Frame) \$Viewport::Data(VP) True True"
   .mapmenu add separator
   .mapmenu add radiobutton -label [lindex $Lbl(ModeZoom) $GDefs(Lang)] -variable Page::Data(Mode) -image MODEZOOM -compound left \
      -value Zoom -command { SPI::ToolMode SPI Zoom } -accelerator "F1"
   .mapmenu add radiobutton -label [lindex $Lbl(ModeCam) $GDefs(Lang)] -variable Page::Data(Mode) -image MODECAM -compound left \
      -value Cam -command  { SPI::ToolMode SPI Cam } -accelerator "F2"
   .mapmenu add radiobutton -label [lindex $Lbl(ModeTool) $GDefs(Lang)] -variable Page::Data(Mode) -image TOOL -compound left \
      -command  { SPI::ToolMode $SPI::Param(Tool) $SPI::Param(ToolMode) } -accelerator "F3"
   .mapmenu add separator
   .mapmenu add cascade -label [lindex $Lbl(LinkView) $GDefs(Lang)] -menu .mapmenu.link  -image LINK -compound left
   .mapmenu add command -label [lindex $Lbl(Lock) $GDefs(Lang)]  -image MAGLOCK -compound left \
      -command { Miniport::Lock $Page::Data(Frame) $Miniport::Params(Current) }
   .mapmenu add separator
   .mapmenu add command -label [lindex $Lbl(Print) $GDefs(Lang)]  -accelerator "Print" -image PRINT -compound left \
      -command "PrintBox::Create \$Page::Data(Frame) PRINT \$SPI::Param(Layout)"
   .mapmenu add command -label [lindex $Lbl(Image) $GDefs(Lang)] -image SAVE -compound left \
      -command "PrintBox::Create \$Page::Data(Frame) SAVE \$SPI::Param(Layout)"
   .mapmenu add command -label [lindex $Lbl(Params) $GDefs(Lang)] -accelerator "F9" -image PARAMS -compound left \
      -command "SPI::Params"

   menu .mapmenu.link -tearoff 0 -bd 1
      .mapmenu.link add command -label [lindex $Lbl(LinkSrc) $GDefs(Lang)] -image LINKSET -compound left\
         -command { Viewport::LinkSet }
      .mapmenu.link add command -label [lindex $Lbl(LinkDest) $GDefs(Lang)] -image LINK -compound left\
         -command { Viewport::Link }
      .mapmenu.link add command -label [lindex $Lbl(LinkUn) $GDefs(Lang)] -image UNLINK -compound left\
         -command { Viewport::UnLink }

   ProjCam::Read

   #----- Creation des evenements de touches rapide
   bind . <Key-Print>       ".mapmenu invoke 10"
   bind . <Key-F9>          ".mapmenu invoke 12"
   bind . <Key-F1>          ".mapmenu invoke 3"
   bind . <Key-F2>          ".mapmenu invoke 4"
   bind . <Key-F3>          ".mapmenu invoke 5"
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::ProjectWindow>
# Creation : Fevrier 2006 - J.P. Gauthier - CMC/CMOE -
#
# But      : Interface de sauvegarde de project
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::ProjectWindow { } {
   global GDefs
   variable Lbl

   toplevel .spiproject -class Dialog
   wm title .spiproject [lindex $Lbl(ProjectSave) $GDefs(Lang)]
   wm transient .spiproject .
   wm resizable .spiproject 0 0
   wm protocol .spiproject WM_DELETE_WINDOW { }

   if { $SPI::Project(File)=="" } {
      set SPI::Project(File) [pwd]/myproject.spi
   }
   frame .spiproject.what -relief raised -bd 1
      label .spiproject.what.lbl -text [lindex $Lbl(ProjectItems) $GDefs(Lang)] -width 7 -anchor w
      frame .spiproject.what.s -relief sunken -bd 1 -bg $GDefs(ColorLight)
         checkbutton .spiproject.what.s.win -text [lindex $Lbl(WindowLayout) $GDefs(Lang)] -bd 1 \
            -variable SPI::Project(Window) -onvalue True -offvalue False
         checkbutton .spiproject.what.s.page -text [lindex $Lbl(PageLayout) $GDefs(Lang)] -bd 1 \
            -variable SPI::Project(Layout) -onvalue True -offvalue False
         checkbutton .spiproject.what.s.cam -text [lindex $Lbl(Camera) $GDefs(Lang)] -bd 1 \
            -variable SPI::Project(Camera) -onvalue True -offvalue False
         checkbutton .spiproject.what.s.data -text [lindex $Lbl(Data) $GDefs(Lang)] -bd 1 \
            -variable SPI::Project(Data) -onvalue True -offvalue False
         checkbutton .spiproject.what.s.params -text [lindex $Lbl(Params) $GDefs(Lang)] -bd 1 \
            -variable SPI::Project(Params) -onvalue True -offvalue False
         pack .spiproject.what.s.win .spiproject.what.s.page .spiproject.what.s.cam .spiproject.what.s.data .spiproject.what.s.params -side top -anchor w
      pack .spiproject.what.lbl .spiproject.what.s -fill both -anchor w -expand true
   pack .spiproject.what -side top -fill x -expand true
   frame .spiproject.cmd
      button .spiproject.cmd.ok -text [lindex $Lbl(Save) $GDefs(Lang)] -bd 1 \
         -command { SPI::ProjectSave [FileBox::Create . "" Save [list $FileBox::Type(SPI)]] $SPI::Project(Window) $SPI::Project(Layout) $SPI::Project(Camera) $SPI::Project(Data) $SPI::Project(Params); destroy .spiproject }
      button .spiproject.cmd.cancel -text [lindex $Lbl(Cancel) $GDefs(Lang)] -bd 1  \
         -command { destroy .spiproject }
      pack .spiproject.cmd.ok .spiproject.cmd.cancel -side left -fill x -expand true
   pack .spiproject.cmd -fill x

   grab .spiproject
}

#-------------------------------------------------------------------------------
# Nom      : <SPI::ToolDef>
# Creation : Mars 2002 - J.P. Gauthier - CMC/CMOE
#
# But      : Installer un outils.
#
# Parametres :
#
# Retour:
#
# Remarques :
#
#-------------------------------------------------------------------------------

proc SPI::ToolDef { Path } {
   global   GDefs
   variable Data

   uplevel #0 source $Path

   set tool [file tail [file rootname $Path]]
   lappend SPI::Param(Tools) $tool
}
