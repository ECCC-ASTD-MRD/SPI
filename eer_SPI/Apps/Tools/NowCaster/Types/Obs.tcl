
#===============================================================================
# Environnement Canada
# Centre Meteorologique Canadian
# 2100 Trans-Canadienne
# Dorval, Quebec
#
# Projet   : Outils de "NowCasting" pour SPI.
# Fichier  : Obs.tcl
# Creation : Avril 2006 - J.P.Gauthier - CMC/CMOE
#
# Description:
#    Fonctions de manipulations des observations meteorologiques pour l'outils
#    de NowCasting de SPI.
#
# Remarques :
#
#===============================================================================

namespace eval NowCaster::Obs { } {
   variable Data
   variable Lbl
   variable Error
   variable Msg
   variable Bubble
   variable Param
   variable Tephi

   font create TEPHIFONT  -family arial  -size -10

   set Param(Title)      { "Observation" "Observation" }

   set Param(PathsSurf)  { }
   set Param(PathsUpper) { }
   set Param(MarkerOp)   AND
   set Param(Markers) {
      { 0   1        ADE   { "Élément modifié ou généré par l'ADE" "Element modified or generated by the ADE" } }
      { 1   2        ADE   { "Élément qui excède un extrême climatologique" "Element which exceeds a climatologic extreme" } }
      { 2   4        ADE   { "Élément erroné" "Wrong element" } }
      { 3   8        ADE   { "Élément peut-être erroné" "Might be wrong element" } }
      { 4   16       DERIV { "Élément douteux" "Doubtless element" } }
      { 5   32       DERIV { "Élément interpolé, généré par DERIVATE" "Interpolated element generated by the DERIVATE" } }
      { 6   64       DERIV { "Élément corrigé par DERIVATE ou correction de biais" "Corrected element by the DERIVATE or bias" } }
      { 7   128      DERIV { "Réservé" "Reserved" } }
      { 8   256      AO    { "Élément rejeté parce qu'il est sur une liste noire" "Rejected element by blacklist" } }
      { 9   512      AO    { "Élément rejeté par le CQ de l'AO (Background Check ou QC-Var)" "Rejected element by QC of OA (Background Check or QC-Var) " } }
      { 10  1024     AO    { "Élément généré par l'AO" "Element generated by OA" } }
      { 11  2048     AO    { "Élément rejeté par un processus de sélection (thinning ou canal)" "Rejected element by selection process (thinning or channel)" } }
      { 12  4096     AO    { "Élément assimilé (c'est-à-dire ayant influencé l'analyse)" "Assimilated element (influenced anaysis)" } }
      { 13  8192     AO    { "Comparaison contre le champ d'essai, niveau 1" "Comparison against trial field, level 1" } }
      { 14  16384    AO    { "Comparaison contre le champ d'essai, niveau 2" "Comparison against trial field, level 2" } }
      { 15  32768    AO    { "Comparaison contre le champ d'essai, niveau 3" "Comparison against trial field, level 3" } }
      { 16  65536    AO    { "Élément rejeté par la comparaison contre le champ d'essai (Background Check)" "Rejected element by comparing against trial field (Background Check)" } }
      { 17  131072   AO    { "Élément rejeté par le QC-Var" "Rejected element by QC-Var" } }
      { 18  262144   DERIV { "Élément non-utilisé à cause de l'orographie" "Non used element because of orography" } }
      { 19  524288   DERIV { "Élément non-utilisé à cause du masque terre-mer" "Non used element because of land-sea mask" } }
      { 20  1048576  DERIV { "Erreur de position d'avion décelée par TrackQc" "Plane position error found by TrackQc" } }
      { 21  2097152  QC    { "Inconsistance détectée par un processus de CQ" "Inconsistency detected by QC process" } } }

   set Param(FamilyOp) OR
   set Param(Familys) {
      { 3 8  { "Bulletin corrigé" "Corrected bulletin" } }
      { 4 16 { "Bulletin répété" "Repeated bulletin" } }
      { 5 32 { "Bulletin nouveau" "New bulletin" } } }

   set Param(Types) {
      { - -1 { "Toutes les données" "All data" } }
      { 0  0 { "Données de surface" "Surface data" } }
      { 1  1 { "Données en altitude" "Upper air data" } } }

   set Param(BKTypes) {
      { 000000  0 { "Observations (ADE)" "Observation (ADE)" } }
      { 000001  1 { "Observations brutes (non décodées)" "Raw observation (not decoded)" } }
      { 000010  2 { "Données dérivées, entrée à l'AO en altitude, modèle global" "Derivate data, global model altitude OA" } }
      { 000011  3 { "Données dérivées, entrée à l'AO en altitude, modèle régional" "Derivate data, regional model altitude OA" } }
      { 000100  4 { "Données dérivées, entrée à l'AO de surface, modèle global" "Derivate data, global model surface OA" } }
      { 000101  5 { "Données dérivées, entrée à l'AO de surface, modèle régional" "Derivate data, regional model surface OA" } }
      { 000110  6 { "Données vues par l'AO en altitude, modèle global" "Global model altitude OA data used" } }
      { 000111  7 { "Données vues par l'AO en altitude, modèle régional" "Regional model altitude OA data used" } }
      { 001000  8 { "Données vues par l'AO de surface, modèle global" "Global model surface OA data used" } }
      { 001001  9 { "Données vues par l'AO de surface, modèle régional" "Regional model surface OA data used" } }
      { 001010 10 { "Profils verticaux, AO en altitude, modèle global" "Global model altitude vertical profile OA data" } }
      { 001011 11 { "Profils verticaux, AO en altitude, modèle régional" "Regional model altitude vertical profile OA data" } }
      { 001100 12 { "En réserve" "Reserved" } }
      { 001101 13 { "En réserve" "Reserved" } }
      { 001110 14 { "Valeurs analysées (incluant résidus) par AO en altitude, modèle global" "Global model OA analysed altitude values (inclufing residuals)" } }
      { 001111 15 { "Valeurs analysées (incluant résidus) par AO en altitude, modèle régional" "Regional model OA analysed altitude values (inclufing residuals)" } }
      { 010000 16 { "Valeurs analysées (incluant résidus) par AO de surface, modèle global" "Global model OA analysed surface values (inclufing residuals)" } }
      { 010001 17 { "Valeurs analysées (incluant résidus) par AO de surface, modèle régional" "Regional model OA analysed surface values (inclufing residuals)" } }
      { 010010 18 { "Prévisions, modèle global" "Global model prognostics" } }
      { 010011 19 { "Prévisions, modèle régional" "Regional model prognostics" } }
      { 010100 20 { "Statistiques des éléments du temps (projet PENSÉ)" "Weather elements statistics (PENSÉ project)" } }
      { 010101 21 { "Statistiques des éléments du temps (filtres de Kalman, projet PENSÉ)" "Weather elements statistics (PENSÉ project, kalman filters)" } }
      { 010110 22 { "Données SSMI" "SSMI data" } }
      { 010111 23 { "Prévisions, système d'ensemble global" "Global ensemble suite prognostics" } }
      { 011000 24 { "Prévisions, système d'ensemble régional" "Regional ensemble suite prognostics" } }
      { 011001 25 { "Prévisions probabilistes" "Probabilistic prognostics" } }
      { 011010 26 { "Prévisions déterministes" "Deterministic prognostics" } }
      { 011011 27 { "QC éléments du temps (QCOBS)" "QC Weathe elements (QCOBS)" } } }

   for { set b 0 } { $b<63 } { incr b } {
      set Param(BKSTypes0-$b) { }
      set Param(BKSTypes1-$b) { }
   }

   set Param(BKSTypes0-0) {
      { 0000 0 { "Valeur observée" "Observed value" } }
      { 0001 1 { "Correction de la postition et/ou de l'identificateur" "Correction of position and/or identificator" } } }
   set Param(BKSTypes1-0) {
      { 0000  0 { "Non défini" "Undefined" } }
      { 0001  1 { "RADAT (TEMP) ou Ts de SATOB ou SATEM ou TOVS/température" "RADAT (TEMP) or Ts of SATOB or SATEM or TOVS/température" } }
      { 0010  2 { "Partie A (SATEM, TEMP, PILOT, SATOB) ou TOVS/luminance" "A Partie (SATEM, TEMP, PILOT, SATOB) or TOVS/luminance" } }
      { 0011  3 { "Partie B (SATEM, TEMP, PILOT)" "B Part (SATEM, TEMP, PILOT)" } }
      { 0100  4 { "Partie C (SATEM, TEMP, PILOT)" "C Part (SATEM, TEMP, PILOT)" } }
      { 0101  5 { "Partie D (SATEM, TEMP, PILOT)" "D Part (SATEM, TEMP, PILOT)" } }
      { 0110  6 { "Délais de réception pour messages à parties multiples (ex. SATEM, TEMP, PILOT et SATOB)" "Reception delai for multiple part messages (ex. SATEM, TEMP, PILOT et SATOB)" } }
      { 0111  7 { "Statistiques d'observations" "Observation statistics" } }
      { 1000  8 { "statistiques de champs" "Field statistics" } }
      { 1001  9 { "statistiques NN de champs" "Field NN statistics" } }
      { 1010 10 { "statistiques de différences" "Difference statistics" } }
      { 1011 11 { "Bloc A, SSMI, (19H, 19V, 22V, 37H, 37V) *64" "Bloc A, SSMI, (19H, 19V, 22V, 37H, 37V) *64" } }
      { 1100 12 { "Bloc B, SSMI, (85H, 85V) *128 points, 1/2" "Bloc B, SSMI, (85H, 85V) *128 points, 1/2" } }
      { 1101 13 { "Bloc C, SSMI, (85H, 85V) *128 points, 2/2" "Bloc C, SSMI, (85H, 85V) *128 points, 2/2" } } }

   set Param(BKSTypes0-1) $Param(BKSTypes0-0)
   set Param(BKSTypes1-1) $Param(BKSTypes1-0)

   set Param(BKSTypes0-2) {
      { 0000  0 { "Non défini sauf pour TEMP et PILOT" "Undefined but TEMP and PILOT" } }
      { 0001  1 { "Surface provenant d'un SYNOP (défini pour TEMP et PILOT seulement)" "SYNOP surface (defined for TEMP and PILOT only)" } }
      { 0010  2 { "Surface provenant d'un TEMP (défini pour TEMP et PILOT seulement)" "TEMP surface (defined for TEMP and PILOT only)" } }
      { 0011  3 { "Surface provenant d'un SA (défini pour TEMP et PILOT seulement)" "SA surface (defined for TEMP and PILOT only)" } }
      { 0100  4 { "En réserve" "Reserved" } }
      { 0101  5 { "En réserve" "Reserved" } }
      { 0110  6 { "En réserve" "Reserved" } }
      { 0111  7 { "En réserve" "Reserved" } }
      { 1000  8 { "Statistiques de champs" "Field statistics" } }
      { 1001  9 { "Statistiques NN de champs" "Field NN statistics" } }
      { 1010 10 { "Statistiques de différences" "Difference statistics" } } }
   set Param(BKSTypes1-2) {
      { 0000  0 { "Non défini" "Undefined" } }
      { 0001  1 { "En réserve" "Reserved" } }
      { 0001  2 { "En réserve" "Reserved" } }
      { 0001  3 { "En réserve" "Reserved" } }
      { 0001  4 { "En réserve" "Reserved" } }
      { 0001  5 { "En réserve" "Reserved" } }
      { 0001  6 { "En réserve" "Reserved" } }
      { 0111  7 { "Statistiques d'observations" "Observation statistics" } }
      { 1000  8 { "Statistiques de champs" "Field statistics" } }
      { 1001  9 { "Statistiques NN de champs" "Field NN statistics" } }
      { 1010 10 { "Statistiques de différences" "Difference statistics" } } }

   set Param(BKSTypes0-3) $Param(BKSTypes0-2)
   set Param(BKSTypes1-3) $Param(BKSTypes1-2)

   set Param(BKSTypes0-4) {
      { 0000  0 { "Non défini" "Undefined" } }
      { 0001  1 { "En réserve" "Reserved" } }
      { 0001  2 { "En réserve" "Reserved" } }
      { 0001  3 { "En réserve" "Reserved" } }
      { 0001  4 { "En réserve" "Reserved" } }
      { 0001  5 { "En réserve" "Reserved" } }
      { 0001  6 { "En réserve" "Reserved" } }
      { 0111  7 { "En réserve" "Reserved" } }
      { 1000  8 { "Statistiques de champs" "Field statistics" } }
      { 1001  9 { "Statistiques NN de champs" "Field NN statistics" } }
      { 1010 10 { "Statistiques de différences" "Difference statistics" } } }
   set Param(BKSTypes1-4) { }

   set Param(BKSTypes0-5) $Param(BKSTypes0-4)
   set Param(BKSTypes1-5) $Param(BKSTypes1-4)

   set Param(BKSTypes0-6) {
      { 0000  0 { "Valeur observée" "Observed value" } }
      { 0001  1 { "Probabilité d'erreur du QCvar" "Error probability from QCvar" } }
      { 0001  2 { "En réserve" "Reserved" } }
      { 0001  3 { "En réserve" "Reserved" } }
      { 0001  4 { "En réserve" "Reserved" } }
      { 0001  5 { "En réserve" "Reserved" } }
      { 0001  6 { "En réserve" "Reserved" } }
      { 0111  7 { "En réserve" "Reserved" } }
      { 1000  8 { "Statistiques de champs" "Field statistics" } }
      { 1001  9 { "Statistiques NN de champs" "Field NN statistics" } }
      { 1010 10 { "Statistiques de différences (résidus)" "Difference statistics (residual)" } }
      { 1011 11 { "Statistiques de résidus" "Residual statistics" } }
      { 1100 12 { "Statistiques de NN résidus" "Residual NN statistics" } }
      { 1101 13 { "En réserve" "Reserved" } }
      { 1110 14 { "Statistiques d'erreur d'observation" "Observation error statistics" } }
      { 1111 15 { "Statistiques d'erreur de prévision" "Prognostic error statistics" } } }
   set Param(BKSTypes1-6) {
      { 0000  0 { "Valeur observée" "Observed value" } }
      { 0001  1 { "Probabilité d'erreur du QCvar" "Error probability from QCvar" } }
      { 0001  2 { "En réserve" "Reserved" } }
      { 0001  3 { "En réserve" "Reserved" } }
      { 0001  4 { "En réserve" "Reserved" } }
      { 0001  5 { "En réserve" "Reserved" } }
      { 0001  6 { "En réserve" "Reserved" } }
      { 0111  7 { "En réserve" "Reserved" } }
      { 1000  8 { "Statistiques de champs" "Field statistics" } }
      { 1001  9 { "Statistiques NN de champs" "Field NN statistics" } }
      { 1010 10 { "Statistiques de différences (résidus)" "Difference statistics (residual)" } }
      { 1011 11 { "Statistiques de résidus" "Residual statistics" } }
      { 1100 12 { "Statistiques de NN résidus" "Residual NN statistics" } }
      { 1101 13 { "En réserve" "Reserved" } }
      { 1110 14 { "Statistiques d'erreur d'observation" "Observation error statistics" } }
      { 1111 15 { "Statistiques d'erreur de prévision" "Prognostic error statistics" } } }

   set Param(BKSTypes0-7) $Param(BKSTypes0-6)
   set Param(BKSTypes1-7) $Param(BKSTypes1-6)

   set Param(BKSTypes0-8) {
      { 0000  0 { "Valeur observée" "Observed value" } }
      { 0001  1 { "En réserve" "Reserved" } }
      { 0001  2 { "En réserve" "Reserved" } }
      { 0001  3 { "En réserve" "Reserved" } }
      { 0001  4 { "En réserve" "Reserved" } }
      { 0001  5 { "En réserve" "Reserved" } }
      { 0001  6 { "En réserve" "Reserved" } }
      { 0111  7 { "En réserve" "Reserved" } }
      { 1000  8 { "Statistiques de champs" "Field statistics" } }
      { 1001  9 { "Statistiques NN de champs" "Field NN statistics" } }
      { 1010 10 { "Statistiques de différences (résidus)" "Difference statistics (residual)" } }
      { 1011 11 { "Statistiques de résidus" "Residual statistics" } }
      { 1100 12 { "Statistiques de NN résidus" "Residual NN statistics" } }
      { 1101 13 { "Statistiques d'erreur d'estimation de l'OI" "OI estimation error statistics" } }
      { 1110 14 { "Statistiques d'erreur d'observation" "Observation error statistics" } }
      { 1111 15 { "Statistiques d'erreur de prévision" "Prognostic error statistics" } } }
   set Param(BKSTypes1-8) { }

   set Param(BKSTypes0-9) $Param(BKSTypes0-8)
   set Param(BKSTypes1-9) $Param(BKSTypes1-8)

   set Param(BKSTypes0-10) { }
   set Param(BKSTypes1-10) {
      { 0000  0 { "Non défini" "Undefined" } }
      { 0001  1 { "Prévu par champ d'essai" "Trial fied forecast" } }
      { 0010  2 { "prévu par modèle" "Model forecast" } }
      { 0011  3 { "Analysé" "Analysed" } } }

   set Param(BKSTypes0-11) $Param(BKSTypes0-10)
   set Param(BKSTypes1-11) $Param(BKSTypes1-10)

   set Param(BKSTypes0-12) { }
   set Param(BKSTypes1-12) { }

   set Param(BKSTypes0-13) $Param(BKSTypes0-12)
   set Param(BKSTypes1-13) $Param(BKSTypes1-12)

   set Param(BKSTypes0-14) {
      { 0000  0 { "O-A" "O-A" } }
      { 0001  1 { "O-F" "O-F" } }
      { 0010  2 { "O-I" "O-I" } }
      { 0001  3 { "En réserve" "Reserved" } }
      { 0001  4 { "En réserve" "Reserved" } }
      { 0001  5 { "En réserve" "Reserved" } }
      { 0001  6 { "En réserve" "Reserved" } }
      { 0111  7 { "En réserve" "Reserved" } }
      { 1000  8 { "Statistiques de champs" "Field statistics" } }
      { 1001  9 { "Statistiques de NN champs" "Field NN statistics" } }
      { 1010 10 { "Statistiques de différences" "Difference statistics" } } }
   set Param(BKSTypes1-14) { }

   set Param(BKSTypes0-15) $Param(BKSTypes0-14)
   set Param(BKSTypes1-15) $Param(BKSTypes1-14)

   set Param(BKSTypes0-16) $Param(BKSTypes0-14)
   set Param(BKSTypes1-16) $Param(BKSTypes1-14)

   set Param(BKSTypes0-17) $Param(BKSTypes0-14)
   set Param(BKSTypes1-17) $Param(BKSTypes1-14)

   set Param(BKSTypes0-18) {
      { 0000  0 { "Champs d'essai de AO" "OA trial fields" } }
      { 0001  1 { "Sortie de modèle de prévisions" "Prognostic model output" } }
      { 0010  2 { "Statistiques" "Statistics" } }
      { 0001  3 { "En réserve" "Reserved" } }
      { 0001  4 { "En réserve" "Reserved" } }
      { 0001  5 { "En réserve" "Reserved" } }
      { 0001  6 { "En réserve" "Reserved" } }
      { 0111  7 { "En réserve" "Reserved" } }
      { 1000  8 { "Statistiques de champs" "Field statistics" } }
      { 1001  9 { "Statistiques de NN champs" "Field NN statistics" } }
      { 1010 10 { "Statistiques de différences" "Difference statistics" } } }
   set Param(BKSTypes1-18) { }

   set Param(BKSTypes0-19) $Param(BKSTypes0-18)
   set Param(BKSTypes1-19) $Param(BKSTypes1-18)

   set Param(BKSTypes0-20) { }
   set Param(BKSTypes1-20) { }

   set Param(BKSTypes0-21) $Param(BKSTypes0-20)
   set Param(BKSTypes1-21) $Param(BKSTypes1-20)

   set Param(BKSTypes0-22) { }
   set Param(BKSTypes1-22) {
      { 0000  0 { "A (données, Multi), basse densité" "A (Multi-data), low density" } }
      { 0001  1 { "B (données, Multi), basse densité" "B (Multi-data), low density" } }
      { 0010  2 { "C (3-D, Multi), basse densité" "C (3-D, Multi), low density" } }
      { 0011  3 { "D (3-D, Multi), basse densité" "D (3-D, Multi), low density" } }
      { 0100  4 { "E (données, Multi), type de surface, basse densité" "E (Multi-data), surface type, low density" } }
      { 0101  5 { "F (données, Multi), type de surface, basse densité" "F (Multi-data), surface type, low density" } } }

   set Param(BKSTypes0-23) { }
   set Param(BKSTypes1-23) { }

   set Param(BKSTypes0-24) { }
   set Param(BKSTypes1-24) { }

   set Param(BKSTypes0-25) { }
   set Param(BKSTypes1-25) { }

   set Param(BKSTypes0-26) { }
   set Param(BKSTypes1-26) { }

   set Param(BKSTypes0-27) {
      { 0000  0 { "Valeur observée" "Observed value" } }
      { 0001  1 { "Valeur estimée" "Estimated value" } }
      { 0010  2 { "Probabilité d'erreur" "Error probability" } } }
   set Param(BKSTypes1-27) { }


   set Data(Frame)       ""

   set Data(ModelName)   ""
   set Data(Models)      { }
   set Data(Obs)         { }
   set Data(Topo)        ""
   set Data(CurrentObs)  NONE
   set Data(NVal)        -1
   set Data(Marker)      0
   set Data(Family)      0
   set Data(Type)        -1
   set Data(Spacing)     25
   set Data(Crowd)       0
   set Data(Flat)        0
   set Data(Elems)       { }
   set Data(Item)        ""
   set Data(InfoObs)     ""
   set Data(InfoTag)     ""
   set Data(InfoId)      ""
   set Data(InfoAll)     False
   set Data(Id)          ""
   set Data(Report)      False

   set Tephi(Dry)   True
   set Tephi(Wet)   True
   set Tephi(Dew)   True
   set Tephi(Wind)  True
   set Tephi(Info)  False

   set Lbl(And)      { "Et" "And" }
   set Lbl(Or)       { "Ou" "Or" }
   set Lbl(Var0)     { "Variable  " "Variable  " }
   set Lbl(Var1)     { "Direction " "Direction " }
   set Lbl(Yes)      { "Oui" "Yes" }
   set Lbl(No)       { "Non" "No" }
   set Lbl(Topo)     { "Élévation " "Elevation " }
   set Lbl(Data)     { "Données" "Data" }
   set Lbl(Model)    { "Modèle de pointage" "Plotting model" }
   set Lbl(ModelN)   { "Modèle" "Model" }
   set Lbl(Spacing)  { "Espacement" "Spacing" }
   set Lbl(Crowd)    { "Peuplement" "Crowding" }
   set Lbl(Flat)     { "Projeté" "Projected" }
   set Lbl(Info)     { "Information" "Information" }
   set Lbl(Pos)      { "Position" "Position" }
   set Lbl(Elem)     { "Élements" "Elements" }
   set Lbl(Report)   { "Rapports" "Reports" }
   set Lbl(Find)     { "Trouver une station" "Find station" }
   set Lbl(Surface)  { "Surface" "Surface" }
   set Lbl(Upper)    { "Upper" "Upper" }
   set Lbl(Tephi)    { "Tephigramme" "Tephigram" }
   set Lbl(All)      { "Tous" "All" }
   set Lbl(Current)  { "Courant" "Current" }
   set Lbl(Flags)    { "BURP Flags" "BURP Flags" }
   set Lbl(Sequence) { "Séquence " "Sequence" }
   set Lbl(Level)    { "Niveau   " "Level   " }
   set Lbl(Type)     { "Type     " "Type    " }
   set Lbl(SType)    { "Sous-type" "Sub-type" }

   set Msg(Read)   { "Lecture des données d'observations" "Reading observation data" }
   set Msg(Exist)  { "Un model de ce nom existe déja, désirez vous le remplacer ?"
                     "A model by this name already exists, do you we to replace it ?" }
   set Msg(Del)    { "Voulez-vous vraiment supprimer de modèle ?"
                     "do you really want to suppress this model ?" }

   set Error(File)  { "Fichier d'observation invalide." "Invalid observation file." }
   set Error(Elems) { "Il n'y a aucun element dans ce fichier." "No element foun in this file." }

   set Bubble(Find)       { "Rechercher un station et centrer la vue sur celle-ci" "Find a station and locate the viewport on it" }
   set Bubble(Mode)       { "Activer le mode de sélection des observations\n\nBouton gauche: Sélection\nBouton centre: Déplacer une localisation" "Activate observation selection mode\n\nLeft button  : Select location\nMiddle button: Move location" }
   set Bubble(Graph)      { "Activer les graphs dans la bulle d'information" "Enable graphs wirhin information bubble" }
   set Bubble(Params)     { "Paramêtres d'affichage" "Display parameters" }
   set Bubble(Add)        { "Ajouter une observation" "Add an observation" }
   set Bubble(Del)        { "Supprimer l'observation courante" "Delete current observation" }
   set Bubble(Model)      { "Nom du modèle de pointage" "Plotting model name" }
   set Bubble(ModelSave)  { "Sauvegarde du modèle de pointage courant" "Save the current plotting model" }
   set Bubble(ModelDel)   { "Supprimer le modèle de pointage courant" "Delete the current plotting model" }
   set Bubble(ModelClear) { "Effacer le modèle de pointage courant" "Clear the current plotting model" }
   set Bubble(Variable0)  { "Element à affiche\n(Composante de vitesse en configuration vectorielle)" "Element to display\n(Speed component in vectorial configuration)" }
   set Bubble(Variable1)  { "Element à afficher comme composante\ndirection en configuration vectorielle" "Direction component when\nin vectorial configuration" }
   set Bubble(Topo)       { "Variable definnisant l'élévation" "Variable definning the elevation" }
   set Bubble(Spacing)    { "Espacement entre les éléments de pointage" "Spacing between the plotted elements" }
   set Bubble(Crowd)      { "Espacement entre les pointages (0, aucun)" "Spacing between the plottings (0, none)" }
   set Bubble(Grid)       { "Sélection du positionnement des élément\nrelativement à la position centrale en blanc" "Element position selection relative\not the central location in white" }
   set Bubble(Flat)       { "Affichage applati" "Flat display" }
   set Bubble(Flags)      { "Sélection du type/famille/marqueur d'observation" "Select type/family/marker of observation" }
}

#----------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Window>
# Creation : Juillet 2004 - J.P. Gauthier - CMC/CMOE
#
# But      : Affiche l'interface de manipulation des observations.
#
# Parametres :
#  <Frame>   : Frame de l'interface
#
# Retour:
#
# Remarques :
#
#----------------------------------------------------------------------------

proc NowCaster::Obs::Window { Frame } {
   global GDefs
   variable Data
   variable Lbl
   variable Bubble
   variable Param

   set Data(Frame) $Frame

   frame $Frame.head
      checkbutton $Frame.head.mode -variable Page::Data(ToolMode) -onvalue NowCaster::Obs -offvalue SPI \
         -image ARROW -indicatoron 0 -relief sunken -bd 1 -overrelief raised -offrelief flat -selectcolor $GDefs(ColorFrame) \
         -command { SPI::ToolMode $Page::Data(ToolMode) Data True }
      checkbutton $Frame.head.graph -image BUBBLEGRAPH -relief sunken -bd 1 -overrelief raised -offrelief flat -anchor w -selectcolor $GDefs(ColorLight)\
         -variable Obs::Param(BubbleGraph) -onvalue True -offvalue False -indicatoron False
      button $Frame.head.params -image PARAMS -bd 0 -relief flat -overrelief raised -command { SPI::Params; TabFrame::Select .params.tab 2 }
      menubutton $Frame.head.add -image PLUS -bd 0 -relief flat -menu $Frame.head.add.list
      button $Frame.head.del -image DELETE -bd 1 -relief flat -overrelief raised \
         -command "catch { NowCaster::Obs::Delete \[$Frame.select.list get \[$Frame.select.list curselection\]\] }"
      pack $Frame.head.mode $Frame.head.graph $Frame.head.params  -side left
      pack $Frame.head.del $Frame.head.add -side right -padx 2
   pack $Frame.head -side top -fill x

   menu $Frame.head.add.list -bd 1 -tearoff 0
   foreach path $Param(PathsSurf) {
      set type [file tail $path]
      $Frame.head.add.list add command -label $type -command "NowCaster::Obs::Add $path"
   }
   $Frame.head.add.list add separator
   foreach path $Param(PathsUpper) {
      set type [file tail $path]
      $Frame.head.add.list add command -label $type -command "NowCaster::Obs::Add $path"
   }
   $Frame.head.add.list add separator
   $Frame.head.add.list add command -label ... -command "NowCaster::Obs::Add  \[FileBox::Create . \"\" Load \"\"\]"

   frame $Frame.select
      listbox $Frame.select.list -relief sunken -bd 1 -yscrollcommand "$Frame.select.scroll set" -selectmode single \
         -width 1 -height 1 -background white -listvar nnn -selectbackground $GDefs(ColorHighLight) -selectforeground black \
         -listvariable NowCaster::Obs::Data(Obs) -exportselection false
      scrollbar $Frame.select.scroll -relief sunken -command "$Frame.select.list yview" -bd 1 -width 10
      pack $Frame.select.list -side left -fill both -expand true
      pack $Frame.select.scroll -side left -fill y
   pack $Frame.select -side top -fill both -expand true

   labelframe $Frame.find -text [lindex $Lbl(Find) $GDefs(Lang)]
      entry $Frame.find.name -textvariable NowCaster::Obs::Data(Id) -bg $GDefs(ColorLight) -bd 1
      button  $Frame.find.go -image FINGER -bd 0 -relief flat -overrelief raised \
         -command { NowCaster::Obs::Find $NowCaster::Obs::Data(CurrentObs) }
      pack $Frame.find.name -side left -fill both -expand True -padx 2 -pady 2
      pack $Frame.find.go -side left -padx 2 -pady 2
      bind $Frame.find.name <Return> { NowCaster::Obs::Find $NowCaster::Obs::Data(CurrentObs)}

   labelframe $Frame.elem -text [lindex $Lbl(Elem) $GDefs(Lang)]
      frame $Frame.elem.var0
         label $Frame.elem.var0.lbl -text [lindex $Lbl(Var0) $GDefs(Lang)] -width 11 -anchor w
         ComboBox::Create $Frame.elem.var0.sel NowCaster::Obs::Data(Var0) edit sorted nodouble -1 { } 2 15 NowCaster::Obs::ModelApply
         pack $Frame.elem.var0.lbl -side left
         pack $Frame.elem.var0.sel -side left -fill x -expand True
      pack $Frame.elem.var0 -side top -fill x -padx 2 -expand True

      frame $Frame.elem.var1
         label $Frame.elem.var1.lbl -text [lindex $Lbl(Var1) $GDefs(Lang)] -width 11 -anchor w
         ComboBox::Create $Frame.elem.var1.sel NowCaster::Obs::Data(Var1) edit sorted nodouble -1 { } 2 15 NowCaster::Obs::ModelApply
         pack $Frame.elem.var1.lbl -side left
         pack $Frame.elem.var1.sel -side left -fill x -expand True
      pack $Frame.elem.var1 -side top -fill x -padx 2 -pady 2 -expand True

      frame $Frame.elem.topo
         label $Frame.elem.topo.lbl -text [lindex $Lbl(Topo) $GDefs(Lang)] -width 11 -anchor w
         ComboBox::Create $Frame.elem.topo.sel NowCaster::Obs::Data(Topo) edit sorted nodouble -1 { } 2 15 set NowCaster::Obs::Data(Topo\$NowCaster::Obs::Data(CurrentObs)) \[lindex \$NowCaster::Obs::Data(Topo) 0\]\; NowCaster::Obs::ModelApply
         pack $Frame.elem.topo.lbl -side left
         pack $Frame.elem.topo.sel -side left -fill x -expand True
      pack $Frame.elem.topo -side top -fill x -padx 2 -pady 2 -expand True

   labelframe $Frame.flags -text [lindex $Lbl(Flags) $GDefs(Lang)]
      frame $Frame.flags.bfam
         label $Frame.flags.bfam.lbl -text BFAM -width 11 -anchor w
         entry $Frame.flags.bfam.ent -bg $GDefs(ColorLight) -textvariable NowCaster::Obs::Data(Family)
         menubutton $Frame.flags.bfam.sel -menu $Frame.flags.bfam.sel.menu -bitmap @$GDefs(Dir)/Resources/Bitmap/down.xbm
         menu $Frame.flags.bfam.sel.menu -tearoff 1
         $Frame.flags.bfam.sel.menu add radiobutton -value AND -label [lindex $Lbl(And) $GDefs(Lang)] \
            -variable NowCaster::Obs::Param(FamilyOp) -command NowCaster::Obs::Update
         $Frame.flags.bfam.sel.menu add radiobutton -value OR -label [lindex $Lbl(Or) $GDefs(Lang)] \
            -variable NowCaster::Obs::Param(FamilyOp) -command NowCaster::Obs::Update
         $Frame.flags.bfam.sel.menu add separator
         foreach family $Param(Familys) {
            set NowCaster::Obs::Data(Family[lindex $family 0]) 0
            $Frame.flags.bfam.sel.menu add checkbutton -offvalue 0 -onvalue [lindex $family 1] -label [lindex [lindex $family 2] $GDefs(Lang)] \
               -variable NowCaster::Obs::Data(Family[lindex $family 0]) -command { NowCaster::Obs::UpdateFlags False }
         }
         pack $Frame.flags.bfam.lbl $Frame.flags.bfam.sel -side left -fill y
         pack $Frame.flags.bfam.ent -side left -fill x -expand True

      frame $Frame.flags.bktyp
         label $Frame.flags.bktyp.lbl -text BKTYP -width 11 -anchor w
         menubutton $Frame.flags.bktyp.sel -menu $Frame.flags.bktyp.sel.menu -bitmap @$GDefs(Dir)/Resources/Bitmap/down.xbm
         entry $Frame.flags.bktyp.ent -bg $GDefs(ColorLight) -textvariable NowCaster::Obs::Data(Type)
         menu $Frame.flags.bktyp.sel.menu -tearoff 1
         foreach type $Param(Types) {
            $Frame.flags.bktyp.sel.menu add radiobutton -value [lindex $type 1] -label [lindex [lindex $type 2] $GDefs(Lang)] \
               -variable NowCaster::Obs::Data(Type) -command { NowCaster::Obs::UpdateFlags False }
         }
         pack $Frame.flags.bktyp.lbl $Frame.flags.bktyp.sel -side left -fill y
         pack $Frame.flags.bktyp.ent -side left -fill x -expand True

      frame $Frame.flags.mark
         label $Frame.flags.mark.lbl -text MARKER -width 11 -anchor w
         entry $Frame.flags.mark.ent -bg $GDefs(ColorLight) -textvariable NowCaster::Obs::Data(Marker)
         menubutton $Frame.flags.mark.sel -menu $Frame.flags.mark.sel.menu -bitmap @$GDefs(Dir)/Resources/Bitmap/down.xbm
         menu $Frame.flags.mark.sel.menu -tearoff 1
         $Frame.flags.mark.sel.menu add radiobutton -value AND -label [lindex $Lbl(And) $GDefs(Lang)] \
            -variable NowCaster::Obs::Param(MarkerOp) -command NowCaster::Obs::Update
         $Frame.flags.mark.sel.menu add radiobutton -value OR -label [lindex $Lbl(Or) $GDefs(Lang)] \
            -variable NowCaster::Obs::Param(MarkerOp) -command NowCaster::Obs::Update
         $Frame.flags.mark.sel.menu add separator
         foreach marker $Param(Markers) {
            set NowCaster::Obs::Data(Marker[lindex $marker 0]) 0
            $Frame.flags.mark.sel.menu add checkbutton -offvalue 0 -onvalue [lindex $marker 1] -label [format "%-5s %s" [lindex $marker 2] [lindex [lindex $marker 3] $GDefs(Lang)]] \
               -variable NowCaster::Obs::Data(Marker[lindex $marker 0]) -command { NowCaster::Obs::UpdateFlags False }
         }
         pack $Frame.flags.mark.lbl $Frame.flags.mark.sel -side left -fill y
         pack $Frame.flags.mark.ent -side left -fill x -expand True

      frame $Frame.flags.nval
         label $Frame.flags.nval.lbl -text NVAL -width 13 -anchor w
         spinbox $Frame.flags.nval.ent -textvariable NowCaster::Obs::Data(NVal) -width 3 -from -1 -to 999 -wrap 1 -bd 1 -bg $GDefs(ColorLight) \
            -command {  NowCaster::Obs::UpdateFlags True }
         pack $Frame.flags.nval.lbl -side left -fill y
         pack $Frame.flags.nval.ent -side left -fill x -expand True

      pack $Frame.flags.bfam $Frame.flags.bktyp $Frame.flags.mark $Frame.flags.nval -side top -fill x -padx 2 -pady 2 -expand True

      bind $Frame.flags.bfam.ent <Return>  { NowCaster::Obs::UpdateFlags True }
      bind $Frame.flags.bktyp.ent <Return> { NowCaster::Obs::UpdateFlags True }
      bind $Frame.flags.mark.ent <Return>  { NowCaster::Obs::UpdateFlags True }
      bind $Frame.flags.nval.ent <Return>  { NowCaster::Obs::UpdateFlags True }

   labelframe $Frame.model -text [lindex $Lbl(ModelN) $GDefs(Lang)]
      frame $Frame.model.sel
         ComboBox::Create $Frame.model.sel.name NowCaster::Obs::Data(ModelName) edit sorted nodouble -1 $NowCaster::Obs::Data(Models) 2 6 \
            "NowCaster::Obs::ModelSelect \$NowCaster::Obs::Data(ModelName)"
         button $Frame.model.sel.new  -image PINNEW  -relief flat -bd 0 -overrelief raised \
            -command { NowCaster::Obs::ModelSelect \$NowCaster::Obs::Data(ModelName) { { 0 0 0 } } }
         button $Frame.model.sel.save  -image PINSAVE  -relief flat -bd 0 -overrelief raised \
            -command { NowCaster::Obs::ModelAdd $NowCaster::Obs::Data(ModelName) [NowCaster::Obs::ModelParse] }
         button $Frame.model.sel.del    -image PINDEL   -relief flat -bd 0 -overrelief raised \
            -command { NowCaster::Obs::ModelDel $NowCaster::Obs::Data(ModelName) }
         pack $Frame.model.sel.name -side left -fill x -expand True -padx 2
         pack $Frame.model.sel.new $Frame.model.sel.save $Frame.model.sel.del -side left
      pack $Frame.model.sel -side top -fill x

      frame $Frame.model.crowd
         label $Frame.model.crowd.lbl -text [lindex $Lbl(Crowd) $GDefs(Lang)] -width 11 -anchor w
         label $Frame.model.crowd.txt -textvariable NowCaster::Obs::Data(Crowd) -width 4 -anchor w -relief sunken -bd 1 -bg $GDefs(ColorLight)
         scale $Frame.model.crowd.val -bd 1 -relief flat -width 15 -sliderlength 10 -from 0 -to 25 -variable NowCaster::Obs::Data(Crowd) \
            -orient horizontal -showvalue False -command { set NowCaster::Obs::Data(Crowd$NowCaster::Obs::Data(CurrentObs)) $NowCaster::Obs::Data(Crowd); NowCaster::Obs::ModelApply; catch }
         pack $Frame.model.crowd.lbl $Frame.model.crowd.txt -side left
         pack $Frame.model.crowd.val -side left -fill x -expand True
      pack  $Frame.model.crowd -side bottom -anchor w -padx 2 -pady 2 -fill x

      frame $Frame.model.spc
         label $Frame.model.spc.lbl -text [lindex $Lbl(Spacing) $GDefs(Lang)] -width 11 -anchor w
         label $Frame.model.spc.txt -textvariable NowCaster::Obs::Data(Spacing) -width 4 -anchor w -relief sunken -bd 1 -bg $GDefs(ColorLight)
         scale $Frame.model.spc.val -bd 1 -relief flat -width 15 -sliderlength 10 -from 0 -to 100 -variable NowCaster::Obs::Data(Spacing) \
            -orient horizontal -showvalue False -command { set NowCaster::Obs::Data(Spacing$NowCaster::Obs::Data(CurrentObs)) $NowCaster::Obs::Data(Spacing); NowCaster::Obs::ModelApply; catch }
         pack $Frame.model.spc.lbl $Frame.model.spc.txt -side left
         pack $Frame.model.spc.val -side left -fill x -expand True
      pack  $Frame.model.spc -side bottom -anchor w -padx 2 -pady 2 -fill x

      pack  $Frame.model.spc -side bottom -anchor w -padx 2 -pady 2 -fill x
      frame $Frame.model.flat
         label $Frame.model.flat.lbl -text [lindex $Lbl(Flat) $GDefs(Lang)] -width 11 -anchor w
         checkbutton $Frame.model.flat.sel -variable NowCaster::Obs::Data(Flat) -relief sunken -bd 1 -overrelief raised -offrelief flat \
            -selectcolor $GDefs(ColorFrame) -onvalue 0 -offvalue 1 -indicatoron False \
            -command { set NowCaster::Obs::Data(Flat$NowCaster::Obs::Data(CurrentObs)) $NowCaster::Obs::Data(Flat); NowCaster::Obs::ModelApply }
         pack $Frame.model.flat.lbl -side left
         pack $Frame.model.flat.sel -side left -fill x -expand True
      pack $Frame.model.flat -side bottom -fill x -padx 2 -expand True

      frame $Frame.model.items -relief sunken -bd 1
         set n 0
         for { set x -2 } { $x <= 2 } { incr x  } {
            for { set y -2 } { $y <= 2 } { incr y } {
               set NowCaster::Obs::Data(Model.$x.$y) ""
               radiobutton $Frame.model.items.def$n -textvariable NowCaster::Obs::Data(Set.$x.$y) -relief raised -bd 1  -width 2 \
                  -variable NowCaster::Obs::Data(Item) -value .$x.$y -indicatoron False \
                  -command "set NowCaster::Obs::Data(Var0) \[NowCaster::Obs::VarSet \[lindex \$NowCaster::Obs::Data(Model.$x.$y) 0\]\]
                              set NowCaster::Obs::Data(Var1) \[NowCaster::Obs::VarSet \[lindex \$NowCaster::Obs::Data(Model.$x.$y) 1\]\]"
               grid $Frame.model.items.def$n -row [expr $y+2] -column [expr $x+2] -sticky nsew
               incr n
            }
         }
         $Frame.model.items.def12 configure -bg white

         set NowCaster::Obs::Data(Model.0.3) ""
         radiobutton $Frame.model.items.def$n -textvariable NowCaster::Obs::Data(Set.0.3) -relief raised -bd 1 -width 5 \
            -variable NowCaster::Obs::Data(Item) -value .0.3  -indicatoron False \
            -command { set NowCaster::Obs::Data(Var0) [NowCaster::Obs::VarSet [lindex $NowCaster::Obs::Data(Model.0.3) 0]
                        set NowCaster::Obs::Data(Var1) [NowCaster::Obs::VarSet [lindex $NowCaster::Obs::Data(Model.0.3) 1] }
         grid $Frame.model.items.def$n -row 5 -column 1 -columnspan 3 -sticky nsew
      pack $Frame.model.items -side bottom -padx 5 -pady 5

   pack $Frame.find $Frame.elem $Frame.flags $Frame.model -side top -fill x -padx 2 -pady 2

   bind $Frame.select.list <ButtonRelease-1>  "catch { NowCaster::Obs::ObsSelect \[$Frame.select.list get \[$Frame.select.list curselection\]\] }"

   Bubble::Create $Frame.head.mode   $Bubble(Mode)
   Bubble::Create $Frame.head.graph  $Bubble(Graph)
   Bubble::Create $Frame.head.params $Bubble(Params)
   Bubble::Create $Frame.head.add    $Bubble(Add)
   Bubble::Create $Frame.head.del    $Bubble(Del)
   Bubble::Create $Frame.find        $Bubble(Find)

   Bubble::Create $Frame.model.sel.name $Bubble(Model)
   Bubble::Create $Frame.model.sel.save $Bubble(ModelSave)
   Bubble::Create $Frame.model.sel.del  $Bubble(ModelDel)
   Bubble::Create $Frame.model.sel.new  $Bubble(ModelClear)
   Bubble::Create $Frame.model.items    $Bubble(Grid)
   Bubble::Create $Frame.model.spc      $Bubble(Spacing)
   Bubble::Create $Frame.model.crowd    $Bubble(Crowd)
   Bubble::Create $Frame.model.flat     $Bubble(Flat)

   Bubble::Create $Frame.elem.var0.sel  $Bubble(Variable0)
   Bubble::Create $Frame.elem.var1.sel  $Bubble(Variable1)
   Bubble::Create $Frame.elem.topo.sel  $Bubble(Topo)
   Bubble::Create $Frame.elem.status    $Bubble(Flags)

   NowCaster::Obs::ModelLoad
}

proc NowCaster::Obs::VarSet { Var } {

   if { $Var!="" } {
      return [list $Var [lindex [metobs table -desc $Var] 0]]
   } else {
      return $Var
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Cast>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Mise a jour des donnees pour la date specifiee.
#
# Parametres :
#   <Sec>    : Date en secondes (0 -> utilise la date globale)
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Cast { Sec } {
   variable Data

   foreach obs $Data(Obs) {
      metobs define $obs -VALID $Sec False
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Now>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Initialisation de l'evenement de rafraichissement des donnees.
#
# Parametres :
#   <Sec>    : Date en secondes (0 -> utilise la date globale)
#   <Check>  :
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Now { Sec { Check False } } {
   global GDefs
   variable Data

   foreach obs $Data(Obs) {
      if { [set file [lindex [lsort -dictionary [glob -nocomplain $Data(Path$obs)/*_]] end]]!="" } {
         file stat $file valid

         if { $valid(mtime)>$Data(Valid$obs) } {
            Log::Print INFO "Change in $obs $file"
            NowCaster::Obs::Read $obs $file
         }
         metobs define $obs -VALID $Sec False
      }
   }

   if { $Data(InfoObs)!="" && [winfo exists .nowcasterinfo] } {
      NowCaster::Obs::Info $Data(InfoObs) $Data(InfoId) $Data(InfoTag) $Data(InfoAll)
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ReadProcess >
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Extraire les information pertinentes suite a la lecture d'un fichier
#            et afficher le resultat.
#
# Parametres :
#   <Obs>    : Objet observation
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ReadProcess { Obs } {
   global GDefs
   variable Data
   variable Error

   Viewport::Assign $Page::Data(Frame) $Viewport::Data(VP) $Obs

   #----- Define default model
   if { ![llength [set Data(Elems$Obs) [metobs define $Obs -ELEMENT]]] } {
      Dialog::Error .nowcaster $Error(Elems)
   } else {
      if { ![llength $Data(Model$Obs)] } {
         set Data(Model$Obs) [list [list 0 0 [lindex $Data(Elems$Obs) 0]]]
         NowCaster::Obs::ObsSelect $Obs
      }
      NowCaster::SetTimeScale [metobs define $Obs -DATE0] [metobs define $Obs -DATE1]
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Read>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Lire un fichier de donnees.
#
# Parametres :
#   <Obs>    : Objet observation a modifier
#   <File>   : Fichier a lire
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Read { Obs Files } {
   global GDefs
   variable Msg
   variable Data
   variable Error

   if { ![llength $Files] } {
      Dialog::Error .nowcaster $Error(File)
      return
   }

   set NowCaster::Data(Job) [lindex $Msg(Read) $GDefs(Lang)]
   update idletasks;

   #----- Create the Obs object

   if { ![metobs is $Obs] } {
      metobs create $Obs
      set Data(Valid$Obs) 0
      set Data(Model$Obs) {}
      set Data(Elems$Obs) {}
   }

   #----- Get the latest validity time

   file stat [lindex $Files 0] valid
   set Data(Valid$Obs) [expr $Data(Valid$Obs)<$valid(mtime)?$valid(mtime):$Data(Valid$Obs)]

   #----- Create the reading thread

   set id [thread::create {
      package require TkViewport

      proc NowCasterObsReader { Obs Files { Thread 0 } } {

         #----- Make sure the layout is initialised, wait for a viewport to be created
         set vp ""
         while { $vp=="" } {
            thread::send $Thread "set a \$Viewport::Data(VP)" vp
         }

         foreach file $Files {
            thread::send -async $Thread "set NowCaster::Data(Job) \"\[lindex \$NowCaster::Obs::Msg(Read) \$GDefs(Lang)\] $file\""
            if { [catch { metobs read $Obs $file }] } {
               thread::send -async $Thread "Dialog::ErrorListing .nowcaster \$NowCaster::Obs::Error(File) \"$file\n\""
            } else {
               file stat $file valid
               if { $Thread!="0" } {
                  thread::send -async $Thread [list NowCaster::Obs::ReadProcess $Obs]
               }
            }
         }
         thread::send -async $Thread "set NowCaster::Data(Job) \"\""
         thread::release
      }
      thread::wait
    }]

   #----- Start the thread

   thread::send -async $id [list NowCasterObsReader $Obs $Files [thread::id]]
}

proc NowCaster::Obs::ExportSCIPUFF { Obs File Type } {

   if { [$File=="" } {
      return
   }

   set f [open w $File]

   if { $Type=="SURFACE" } {
      puts $f "SURFACE"
      puts $f "12"
      puts $f "ID      LAT     LON     YEAR    MONTH   DAY     HOUR    DIR     WSPD    T"
      puts $f "Q       P"
      puts $f "NONE    N       W                               HRS             M/S     C"
      puts $f "%       MBAR"
      puts $f "-999.00"

      foreach loc $Locations {
         foreach date [metobs define $Obs -DATE $loc] {
            set coord [metobs define $Obs -COORD $loc]
            set pre   [metobs define $Obs -ELEMENT $loc "PRESSURE" $date]
            set dir   [metobs define $Obs -ELEMENT $loc "WIND DIRECTION AT 10M" $date]
            set spd   [metobs define $Obs -ELEMENT $loc "WIND SPEED AT 10M" $date]
            set tmp   [metobs define $Obs -ELEMENT $loc "DRY BULB TEMPERATURE AT 2M" $date]
            set dew   [metobs define $Obs -ELEMENT $loc "DEW POINT TEMPERATURE AT 2M" $date]
            set hum   [metobs define $Obs -ELEMENT $loc "RELATIVE HUMIDITY" $date]
            puts $f [format "%5.5s %6.2f %7.2f %4.4d %s %s %6.3f %4d %6.2f %6.2f %8.2f" \
               $loc [lindex $coord 0] [lindex $coord 1] [clock format "%Y" $date] [clock format "%m" $date] [clock format "%m" $d] \
               $dir $spd [expr $tmp-273.16] $dew [expr $hum/100.0]]

         }
      }
   } else {
      puts $f "PROFILE"
      puts $f "13"
      puts $f "ID      LAT     LON     YEAR    MONTH   DAY     HOUR    Z       DIR     WSPD"
      puts $f "T       Q       PP"
      puts $f "NONE    N       W                               HRS     M               M/S"
      puts $f "C       %       MBAR"
      puts $f "-999.00"

      foreach loc $Locations {
         foreach date [metobs define $Obs -DATE $loc] {
            set coord [metobs define $Obs -COORD $loc]
            set hgts   [metobs define $Obs -ELEMENT $loc "GEOPOTENTIAL HEIGHT" $date]
            set pres   [metobs define $Obs -ELEMENT $loc "PRESSURE" $date]
            set dirs   [metobs define $Obs -ELEMENT $loc "WIND DIRECTION AT 10M" $date]
            set spds   [metobs define $Obs -ELEMENT $loc "WIND SPEED AT 10M" $date]
            set tmps   [metobs define $Obs -ELEMENT $loc "DRY BULB TEMPERATURE AT 2M" $date]
            set dews   [metobs define $Obs -ELEMENT $loc "DEW POINT TEMPERATURE AT 2M" $date]
            set hums   [metobs define $Obs -ELEMENT $loc "RELATIVE HUMIDITY" $date]

            foreach hgt $hgts pre $pres dir $dirs spd $spds tmp $tmps dew $dews hum $hums {
               if { $hgt=="" } { set hgt -999.00 }
               if { $pre=="" } { set pre -999.00 }
               if { $dir=="" } { set dir -999.00 }
               if { $spd=="" } { set spd -999.00 }
               if { $tmp=="" } { set tmp -999.00 }
               if { $dew=="" } { set dew -999.00 }
               if { $hum=="" } { set hum -999.00 }

               puts $f [format "%5.5s %6.2f %7.2f %4.4d %s %s %6.3f %4d %6.2f %6.2f %8.2f" \
                  $loc [lindex $coord 0] [lindex $coord 1] [clock format "%Y" $date] [clock format "%m" $date] [clock format "%m" $d] \
                  $dir $spd [expr $tmp-273.16] $dew [expr $hum/100.0]]
            }
         }
      }
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Add>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Ajouter une observation a la liste courante.
#
# Parametres :
#   <Path>   : Path complet du fichier a lire
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Add { Path } {
   variable Data

   if { $Path=="" } {
      return
   }

   set path [lindex $Path 0]

   #----- Figure out a unique number
   set obs [set file [file tail $path]]

   if { [metobs is $obs] } {
      set no 0
      while [metobs is $obs-$no] {
         incr no
      }
      set obs $obs-$no
   }
   lappend Data(Obs) $obs

   catch { $Data(Frame).select.list selection clear 0 end
           $Data(Frame).select.list selection set end }

   #----- Define default model
   set Data(Path$obs) $path
   set Data(ModelName$obs) ""
   set Data(Topo$obs)      ""
   set Data(Param$obs)     {}
   set Data(Spacing$obs)   $Data(Spacing)
   set Data(Crowd$obs)     $Data(Crowd)
   set Data(Flat$obs)      $Data(Flat)
   set Data(NVal$obs)      $Data(NVal)
   set Data(Family$obs)    $Data(Family)
   set Data(Marker$obs)    $Data(Marker)
   set Data(Type$obs)      $Data(Type)

   #----- Read in the data
   if { [file isdirectory $path] } {
      set files [lsort -decreasing -dictionary [glob -nocomplain $path/2*_]]
      NowCaster::Obs::Read $obs [lrange $files 0 4]
   } else {
      NowCaster::Obs::Read $obs $Path
   }

   Page::Update        $Page::Data(Frame)
   Page::UpdateCommand $Page::Data(Frame)
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Delete>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Supprimer une observation a la liste courante.
#
# Parametres :
#   <Obs>    : Observation a supprimer
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Delete { Obs } {
   variable Data

   if { [set idx [lsearch -exact $Data(Obs) $Obs]]!=-1 } {
      set Data(Obs) [lreplace $Data(Obs) $idx $idx]
   }

   if { [Viewport::AssignedTo $Obs page vp] } {
      Viewport::UnAssign $page $vp $Obs
   }
   Obs::UnRegister $Obs
   NowCaster::Obs::PageUpdate $Obs

   if { $Obs==$Data(InfoObs) } {
      set Data(InfoObs) ""
      set Data(InfoTag) ""
      set Data(InfoId)  ""
   }

   metobs free $Obs
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::PageUpdate>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Mettre a jour l'affichage de la Page et du Viewport dans lesquel
#            l'Obs est assignee.
#
# Parametres :
#   <Obs>    : Observation
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::PageUpdate { Obs } {

   if { [Viewport::AssignedTo $Obs page vp] } {
      Viewport::LinkDo $vp

      Page::Update        $page
      Page::UpdateCommand $page
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::UpdateFlags>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Initialiser les parametres d'affichage.
#
# Parametres :
#   <Manual> : Update by hand ?
#   <Obs>    : Observation
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::UpdateFlags { Manual { Obs {} } } {
   variable Data
   variable Param

   if { ![llength $Obs] } {
      set Obs $Data(Obs)
   }

   if { $Manual } {
      set bit 0x1
      foreach marker $Param(Markers) {
         set Data(Marker[lindex $marker 0]) [expr $Data(Marker)&$bit]
         set bit [expr $bit<<1]
      }

      set bit 0x1
      foreach family $Param(Familys) {
         set Data(Family[lindex $family 0]) [expr $Data(Family)&$bit]
         set bit [expr $bit<<1]
      }

   } else {
      set Data(Marker) 0x00
      foreach marker $Param(Markers) {
         set Data(Marker) [expr $Data(Marker)|$Data(Marker[lindex $marker 0])]
      }

      set Data(Family) 0x00
      foreach family $Param(Familys) {
         set Data(Family) [expr $Data(Family)|$Data(Family[lindex $family 0])]
      }
   }

   set Data(Family$Obs) $Data(Family)
   set Data(Type$Obs)   $Data(Type)
   set Data(Marker$Obs) $Data(Marker)
   set Data(NVal$Obs)   $Data(NVal)

   NowCaster::Obs::Update
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Update>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Initialiser les parametres d'affichage.
#
# Parametres :
#   <Obs>    : Observation
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Update { { Obs {} } } {
   variable Data
   variable Param

   if { ![llength $Obs] } {
      set Obs $Data(Obs)
   }

   foreach obs $Obs {
      set model [metobs define $obs -MODEL]
      metmodel define $model -items $Data(Model$obs) -spacing $Data(Spacing$obs) -overspace $Data(Crowd$obs) -flat $Data(Flat$obs) -topography $Data(Topo$obs)
      metobs define $obs -VALID $NowCaster::Data(Sec) False -PERSISTANCE $NowCaster::Data(Persistance) -FAMILY $Data(Family$obs) \
         -MARKER $Data(Marker$obs) -MARKEROP $Param(MarkerOp) -FAMILYOP $Param(FamilyOp) -TYPE $Data(Type$Obs) -NVAL $Data(NVal$Obs)

      foreach item $Data(Model$obs) {
         set code [lindex $item 2]
         set desc [metobs table -desc $code]

         if { ![dataspec is $code] } {
            dataspec create $code
            dataspec configure $code -desc [lindex $desc 0] -unit [lindex $desc end] -set 0
         }
         metmodel configure $model [lindex $item 2] -dataspec $code
      }
   }
   Obs::ParamUpdate
   NowCaster::Obs::PageUpdate $Obs

   #----- Update reports
   if { [winfo exists .nowcasterinfo] } {
      NowCaster::Obs::Info $Data(InfoObs) $Data(InfoId) $Data(InfoTag) $Data(InfoAll)
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ObsSelect>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Effectuer la selection d'une observation.
#
# Parametres :
#   <Obs>    : Observation
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ObsSelect { Obs } {
   variable Data

   if { [metobs is $Obs] } {
      set Data(CurrentObs) $Obs
      set Data(Elems)      $Data(Elems$Obs)
      set Data(ModelName)  $Data(ModelName$Obs)
      set Data(Family)     $Data(Family$Obs)
      set Data(Type)       $Data(Type$Obs)
      set Data(Marker)     $Data(Marker$Obs)
      set Data(NVal)       $Data(NVal$Obs)

      if { [winfo exists .nowcaster] } {
         ComboBox::DelAll  $Data(Frame).elem.var0.sel
         ComboBox::DelAll  $Data(Frame).elem.var1.sel
         ComboBox::DelAll  $Data(Frame).elem.topo.sel
          foreach elem  $Data(Elems$Obs) {
            set info "$elem [lindex [metobs table -desc $elem] 0]"

            ComboBox::Add $Data(Frame).elem.var0.sel $info
            ComboBox::Add $Data(Frame).elem.var1.sel $info
            ComboBox::Add $Data(Frame).elem.topo.sel $info
         }
         ComboBox::Add $Data(Frame).elem.var0.sel ""
         ComboBox::Add $Data(Frame).elem.var1.sel ""
         ComboBox::Add $Data(Frame).elem.topo.sel ""
      }
      NowCaster::Obs::ModelSelect $Obs $Data(Model$Obs)
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ModelApply>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Appliquer la selection de l'usager aux parametres du modele de pointage.
#
# Parametres :
#   <Model>  : Nom du modele
#   <List>   : Parametres du modele
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ModelApply { } {
   variable Data

   set Data(ModelName) ""

   if { $Data(Var0)=="" && $Data(Var1)=="" } {
      set Data(Model$Data(Item)) {}
      set Data(Set$Data(Item))   ""
   } else {
      set Data(Model$Data(Item)) [list [lindex [split $Data(Var0)] 0] [lindex [split $Data(Var1)] 0]]
      set Data(Set$Data(Item))   #
   }
   set Data(Model$Data(CurrentObs)) [NowCaster::Obs::ModelParse]

   if { [metobs is $Data(CurrentObs)] } {
      NowCaster::Obs::Update $Data(CurrentObs)
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ModelSelect>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Effectuer la selection d'un modele de pointage.
#
# Parametres :
#   <Model>  : Nom du modele
#   <List>   : Parametres du modele
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ModelSelect { Model { List { } } } {
   variable Data

   if { ![metobs is $Data(CurrentObs)] } {
      return
   }

   if { [llength $List] } {
      set model $List
   } else {
      set model $Data(Models$Model)
   }

   #----- Reset

   for { set x -2 } { $x <= 2 } { incr x  } {
      for { set y -2 } { $y <= 2 } { incr y } {
         set Data(Model.$x.$y) {}
         set Data(Set.$x.$y)   ""
      }
   }
   set Data(Model.0.3) {}
   set Data(Set.0.3)   ""

   #----- Set

   foreach part $model {
      set dx [lindex $part 0]
      set dy [lindex $part 1]

      set Data(Model.$dx.$dy) [lrange $part 2 end]
      set Data(Item) .$dx.$dy
      set Data(Set.$dx.$dy) #
   }

   if { $Data(Item)!="" } {
      set Data(Var0) [NowCaster::Obs::VarSet [lindex $Data(Model$Data(Item)) 0]]
      set Data(Var1) [NowCaster::Obs::VarSet [lindex $Data(Model$Data(Item)) 1]]

      if { [set topo [metmodel define [metobs define $Data(CurrentObs) -MODEL] -topography]] } {
         set Data(Topo) "$topo [lindex [metobs table -desc $topo] 0]"
      } else {
         set Data(Topo) ""
      }
   }

   set Data(ModelName$Data(CurrentObs)) $Data(ModelName)
   if { $Data(ModelName)=="" } {
      set Data(Model$Data(CurrentObs))     [NowCaster::Obs::ModelParse]
   } else {
      set Data(Model$Data(CurrentObs))     $Data(Models$Data(ModelName))
   }

   if { [info exists ::NowCaster::Obs::Data(Param$Model)] } {
      set code ""
      foreach param $Data(Param$Model) {
         set code [lindex $param 2]
         if { ![dataspec is $code] } {
            dataspec create $code
         }
         eval $param
      }
      Obs::ParamGet $code
      Obs::ParamPut
   }
   if { [metobs is $Data(CurrentObs)] } {
      NowCaster::Obs::Update $Data(CurrentObs)
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ModelDel>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Suppression d'un modele de pointage.
#
# Parametres :
#   <Model>  : Nom du modele
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ModelDel { Model } {
   global GDefs
   variable Data
   variable Lbl
   variable Msg

   if { [set idx [lsearch -exact $Data(Models) $Model]]!=-1 } {
      if { ![Dialog::Default $Data(Frame) 200 WARNING $Msg(Del) "\n\n\t$Model" 1 $Lbl(Yes) $Lbl(No)] } {
         set Data(Models) [lreplace $Data(Models) $idx $idx]
      }
      NowCaster::Obs::ModelSave
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ModelAdd>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Ajout d'un modele de pointage.
#
# Parametres :
#   <Model>  : Nom du modele
#   <Params> : Parametres du modele
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ModelAdd { Model Params } {
   global GDefs
   variable Data
   variable Lbl
   variable Msg

   if { $Model!= "" } {
      if { [set idx [lsearch -exact $Data(Models) $Model]]!=-1 } {
         if { ![Dialog::Default $Data(Frame) 200 INFO $Msg(Exist) "" 1 $Lbl(Yes) $Lbl(No)] } {
            set Data(Models$Model) $Params
         }
      } else {
         lappend Data(Models) $Model
         set Data(Models$Model) $Params
      }
      NowCaster::Obs::ModelSave
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ModelLoad>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Lire les modeles de pointage sauvegarde.
#
# Parametres :
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ModelLoad { } {
   global env
   variable Data

   set Data(Models) {}

   if {[file exists $env(HOME)/.spi/ObsModel] } {
      set f [open $env(HOME)/.spi/ObsModel r]
      while { ![eof $f] } {
         gets $f line
         if { [string index $line 0] != "#" && [string length $line] > 0 } {
            set name [lindex $line 0]
            lappend Data(Models) $name
            set Data(Models$name) [lindex $line 1]
            set Data(Param$name)  [lindex $line 2]
         }
      }
      close $f
   }

   ComboBox::DelAll  $Data(Frame).model.sel.name
   ComboBox::AddList $Data(Frame).model.sel.name $Data(Models)
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ModelSave>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Sauvegarder la liste des modeles de pointage.
#
# Parametres :
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ModelSave { } {
   global env
   variable Data

   if {[file exists $env(HOME)/.spi/ObsModel] } {
      file rename -force $env(HOME)/.spi/ObsModel $env(HOME)/.spi/ObsModel.old
   }

   set f [open $env(HOME)/.spi/ObsModel w]
   foreach model $Data(Models) {
      set mparam {}
      set msave $Data(Models$model)

      #----- Convert code to description
      set m 0
      foreach item $Data(Models$model) {

         set code [lindex $item 2]
         Obs::ParamGet $var
         lappend mparam "dataspec configure $code -factor $Obs::Param(Factor)  -delta $Obs::Param(Delta) -value $Obs::Param(Order) $Obs::Param(Mantisse) \
            -width $Obs::Param(Width) -size $Obs::Param(Size) -style $Obs::Param(Style) -icon \"$Obs::Param(Icon)\" -color \"$Obs::Param(Color)\"\
            -unit \"$Obs::Param(Unit)\" -desc \"$Obs::Param(Desc)\"  -mapall $Obs::Param(MapAll) -topography $Obs::Param(Topo) \
            -rendervector $Obs::Param(Vector) -rendertexture $Obs::Param(Texture) -rendervolume $Obs::Param(Volume)\
            -rendercoord $Obs::Param(Coord) -rendervalue $Obs::Param(Value) -renderlabel $Obs::Param(Label)\
            -min \"$Obs::Param(Min)\" -max \"$Obs::Param(Max)\" -intervals \"$Obs::Param(Inters)\" -interlabels \"$Obs::Param(Labels)\" \
            -intervalmode $Obs::Param(IntervalMode) $Obs::Param(IntervalParam)"
         incr m
      }
      puts $f "\"$model\" { $msave } { $mparam }"
   }
   close $f

   ComboBox::DelAll  $Data(Frame).model.sel.name
   ComboBox::AddList $Data(Frame).model.sel.name $Data(Models)
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::ModelParse>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Creer la liste des parametres du modele selon la selection de l'usager.
#
# Parametres :
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::ModelParse { } {
   variable Data

   set model {}
   for { set x -2 } { $x <= 2 } { incr x  } {
      for { set y -2 } { $y <= 2 } { incr y } {
         if { [llength $Data(Model.$x.$y)] } {
            set mx [lindex $Data(Model.$x.$y) 0]
            set my [lindex $Data(Model.$x.$y) 1]
            lappend model [list $x $y $mx $my]
         }
      }
   }
   if { [llength $Data(Model.0.3)] } {
      set mx [lindex $Data(Model.0.3) 0]
      set my [lindex $Data(Model.0.3) 1]
      lappend model [list 0 3 $mx $my]
   }
   return $model
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::InfoWindow>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Recuperer toutes les informations sur un station en particulier et
#            afficher le tout dans une fenetre d'edition.
#
# Parametres :
#   <Obs>    : Observation
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::InfoWindow { { Obs "" } } {
   global GDefs
   variable Lbl

   if { [winfo exists .nowcasterinfo]} {
      raise .nowcasterinfo
   } else {
      toplevel .nowcasterinfo
      wm transient .nowcasterinfo .
      wm geometry .nowcasterinfo 800x600

      TabFrame::Create .nowcasterinfo.tab 1 ""
      set tab [TabFrame::Add .nowcasterinfo.tab 1 [lindex $Lbl(Report) $GDefs(Lang)] True]
      frame ${tab}.bar -relief flat
         radiobutton ${tab}.bar.cur -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -text [lindex $Lbl(Current) $GDefs(Lang)] -variable NowCaster::Obs::Data(InfoAll) -value False -selectcolor $GDefs(ColorLight) \
            -command { NowCaster::Obs::Info $NowCaster::Obs::Data(InfoObs) $NowCaster::Obs::Data(InfoId) $NowCaster::Obs::Data(InfoTag) $NowCaster::Obs::Data(InfoAll) }
         radiobutton ${tab}.bar.all -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -text [lindex $Lbl(All) $GDefs(Lang)] -variable NowCaster::Obs::Data(InfoAll) -value True -selectcolor $GDefs(ColorLight) \
            -command { NowCaster::Obs::Info $NowCaster::Obs::Data(InfoObs) $NowCaster::Obs::Data(InfoId) $NowCaster::Obs::Data(InfoTag) $NowCaster::Obs::Data(InfoAll) }
         pack ${tab}.bar.cur ${tab}.bar.all -side left -pady 2 -ipady 2 -ipadx 2
     pack ${tab}.bar -side top -fill x -padx 5 -pady 5

      frame ${tab}.info -relief flat
         text ${tab}.info.text -relief sunken -bd 1 -yscrollcommand "${tab}.info.scrolly set"  -xscrollcommand "${tab}.info.scrollx set" \
           -width 1 -height 1 -bg $GDefs(ColorLight) -wrap none
         scrollbar ${tab}.info.scrolly -relief sunken -command "${tab}.info.text yview" -bd 1 -width 10
         scrollbar ${tab}.info.scrollx -relief sunken -command "${tab}.info.text xview" -bd 1 -width 10 -orient horizontal

         pack ${tab}.info.scrollx -side bottom -fill x -anchor s
         pack ${tab}.info.text -side left -expand true -fill both
         pack ${tab}.info.scrolly -side left -fill y
      pack ${tab}.info -side top -fill both -expand true -padx 5 -pady 5

      set tab [TabFrame::Add .nowcasterinfo.tab 1 [lindex $Lbl(Elem) $GDefs(Lang)] True]
      frame ${tab}.bar -relief flat
         radiobutton ${tab}.bar.cur -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -text [lindex $Lbl(Current) $GDefs(Lang)] -variable NowCaster::Obs::Data(InfoAll) -value False -selectcolor $GDefs(ColorLight) \
            -command { NowCaster::Obs::Info $NowCaster::Obs::Data(InfoObs) $NowCaster::Obs::Data(InfoId) $NowCaster::Obs::Data(InfoTag) $NowCaster::Obs::Data(InfoAll) }
         radiobutton ${tab}.bar.all -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -text [lindex $Lbl(All) $GDefs(Lang)] -variable NowCaster::Obs::Data(InfoAll) -value True -selectcolor $GDefs(ColorLight) \
            -command { NowCaster::Obs::Info $NowCaster::Obs::Data(InfoObs) $NowCaster::Obs::Data(InfoId) $NowCaster::Obs::Data(InfoTag) $NowCaster::Obs::Data(InfoAll) }
         pack ${tab}.bar.cur ${tab}.bar.all -side left -pady 2 -ipady 2 -ipadx 2
     pack ${tab}.bar -side top -fill x -padx 5 -pady 5
      frame ${tab}.info -relief flat
         text ${tab}.info.text -relief sunken -bd 1 -yscrollcommand "${tab}.info.scrolly set"  -xscrollcommand "${tab}.info.scrollx set" \
           -width 1 -height 1 -bg $GDefs(ColorLight) -wrap none
         scrollbar ${tab}.info.scrolly -relief sunken -command "${tab}.info.text yview" -bd 1 -width 10
         scrollbar ${tab}.info.scrollx -relief sunken -command "${tab}.info.text xview" -bd 1 -width 10 -orient horizontal

         pack ${tab}.info.scrollx -side bottom -fill x -anchor s
         pack ${tab}.info.text -side left -expand true -fill both
         pack ${tab}.info.scrolly -side left -fill y
      pack ${tab}.info -side top -fill both -expand true -padx 5 -pady 5

      set tab [TabFrame::Add .nowcasterinfo.tab 1 [lindex $Lbl(Tephi) $GDefs(Lang)] True]
      frame ${tab}.bar -relief flat
         checkbutton ${tab}.bar.dry -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -text "DRY " -variable NowCaster::Obs::Tephi(Dry) -selectcolor $GDefs(ColorLight) -image LINE -compound right \
            -command { NowCaster::Obs::Graph } -onvalue True -offvalue False
         checkbutton ${tab}.bar.wet -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -text "WET " -variable NowCaster::Obs::Tephi(Wet) -selectcolor $GDefs(ColorLight) -image DASH2 -compound right \
            -command { NowCaster::Obs::Graph } -onvalue True -offvalue False
         checkbutton ${tab}.bar.dew -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -text "DEW " -variable NowCaster::Obs::Tephi(Dew) -selectcolor $GDefs(ColorLight) -image DASH1 -compound right \
            -command { NowCaster::Obs::Graph } -onvalue True -offvalue False
         checkbutton ${tab}.bar.wind -relief sunken -bd 1 -overrelief raised -offrelief flat -indicatoron False \
            -text "Wind " -variable NowCaster::Obs::Tephi(Wind)  -selectcolor $GDefs(ColorLight) -image BARB -compound right \
            -command { NowCaster::Obs::Graph } -onvalue True -offvalue False
         menubutton ${tab}.bar.info -text "Info:" -relief flat -bd 0 -menu ${tab}.bar.info.menu
         menu ${tab}.bar.info.menu
         foreach info { "False" "pressure" "drybulb" "wetbulb" "dewpoint" "SPREAD" "HEIGHT" "RELATIVEHUMIDITY" } {
            ${tab}.bar.info.menu add command -label "$info" -command "${tab}.bar.info configure -text \"Info: $info\"; set NowCaster::Obs::Tephi(Info) $info; NowCaster::Obs::Graph"
         }
         pack ${tab}.bar.wet ${tab}.bar.dew ${tab}.bar.wind ${tab}.bar.info -side left -pady 2 -ipadx 2
      pack ${tab}.bar -side top -fill x -padx 5 -pady 5
      glcanvas ${tab}.glcanvas -width 0 -height 0 -bg white -relief sunken -bd 1 -highlightthickness 0
      pack ${tab}.glcanvas -side left -fill both -expand true -padx 5 -pady 5

      frame ${tab}.info -relief flat
         text ${tab}.info.text -relief sunken -bd 1 -yscrollcommand "${tab}.info.scrolly set" \
           -width 32 -height 1 -bg $GDefs(ColorLight) -wrap none
         scrollbar ${tab}.info.scrolly -relief sunken -command "${tab}.info.text yview" -bd 1 -width 10
         pack ${tab}.info.text -side left -expand true -fill both
         pack ${tab}.info.scrolly -side left -fill y
      pack ${tab}.info -side right -fill y -padx 5 -pady 5

      ${tab}.glcanvas create graph -x 0 -y 0 -width 1 -height 1 -anchor nw -xlegend 5 -ylegend 5 -command "gr" -legend True \
         -fg black -bg gray75 -fill white -tags "TEPHI" -font XFont12 -title "" -type TEPHI -tag TEPHI
      pack .nowcasterinfo.tab -side top -fill both -expand true -padx 5 -pady 5

      CVMagnifier::Create ${tab}.glcanvas

      bind ${tab}.glcanvas <Configure>       "update idletasks; ${tab}.glcanvas itemconfigure TEPHI -width \[winfo width ${tab}.glcanvas\] -height \[winfo height ${tab}.glcanvas\];"

      #----- Creation des unite de l'echelle

      if { ![graphaxis is TEPHIAXIST] } {
         graphaxis create TEPHIAXIST
         graphaxis create TEPHIAXISTH
         graphaxis create TEPHIAXISP
         graphaxis create TEPHIAXISMIX

         graphaxis configure TEPHIAXIST  -font TEPHIFONT -color black -gridcolor black -gridwidth 1 -position LL -width 1 -unit T \
            -min -70 -max 72 -increment 10 -intervals { -60 -50 -40 -30 -20 -10 0 10 20 30 40 50 60 70 } -highlightwidth 2 -highlight { 0 } -format INTEGER
         graphaxis configure TEPHIAXISP  -font TEPHIFONT -color black -gridcolor black -gridwidth 1 -position LL -width 1 -unit P \
            -min 1050 -max 10  -increment 50  -intervals { 1050 1000 950 900 850 800 750 700 650 600 550 500 450 400 350 300 250 200 150 100 50 40 30 20 } \
            -highlightwidth 2 -highlight { 1000 850 700 500 250 }
         graphaxis configure TEPHIAXISTH -font TEPHIFONT -color black -gridcolor black -gridwidth 1  -position LL -width 1 -unit TH \
            -min 220 -max 520 -increment 10 -format INTEGER -type LN -highlightwidth 2 -highlight { 300 }
         graphaxis configure TEPHIAXISMIX -font TEPHIFONT -color black -gridcolor gray75 -gridwidth 1 -position LL -width 2 -unit MIX \
            -min 0.02 -max 50 -increment 10 -format FIT \
            -intervals { 0.02 0.05 0.15 0.3 0.6 1.0 1.5 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 12.0 14.0 16.0 18.0 20.0 25.0 30.0 35.0 40.0 50.0 } \
            -labels { 0.02 0.05 0.15 0.3 0.6 1 1.5 2 3 4 5 6 7 8 9 10 12 14 16 18 20 25 30 35 40 50 }
      }

      TabFrame::Select .nowcasterinfo.tab 0
    }

    wm title .nowcasterinfo "[lindex $Lbl(Info) $GDefs(Lang)]: $Obs"
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::InfoBKType>
# Creation : Decembre 2010 - J.P. Gauthier - CMC/CMOE
#
# But      : Extraire les informations relatives au rapport a partir des
#            BFAM, BKTYP et BKSTYP.
#
# Parametres :
#   <Report> : Rapport
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::InfoBKType { Report } {
   global GDefs
   variable Param
   variable Lbl

   set bfam  [metreport define $Report -FAMILY]
   set type  [metreport define $Report -TYPE]
   set stype [metreport define $Report -STYPE]

   set no  [expr $bfam&0x7]
   set fam [expr $bfam>>3&0x07]
   set fam [expr $fam==0?2:$fam==1?0:1]

   set fam [lindex $Param(Familys) $fam]
   set alt [lindex $Param(Types)   [expr ($type>>6)+1]]
   set bk  [lindex $Param(BKTypes) [expr $type&0x3F]]
   set st  [lindex $Param(BKSTypes[expr ($type>>6)]-[expr $type&0x3F]) $stype]

   return "[lindex $Lbl(Sequence) $GDefs(Lang)]: [lindex [lindex $fam end] $GDefs(Lang)] ($no) (BFAM=$bfam)
[lindex $Lbl(Level) $GDefs(Lang)]: [lindex [lindex $alt end] $GDefs(Lang)]
[lindex $Lbl(Type) $GDefs(Lang)]: [lindex [lindex $bk end] $GDefs(Lang)] (BKTP=$type)
[lindex $Lbl(SType) $GDefs(Lang)]: [lindex [lindex $st end] $GDefs(Lang)] (BKSTP=$stype)"
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Info>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Recuperer toutes les informations sur un station en particulier et
#            afficher le tout dans une fenetre d'edition.
#
# Parametres :
#   <Obs>    : Observation
#   <Id>     : Identificateur de la station
#   <Tag>    : Identificateur unique de la station
#   <All>    : Display all messages
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Info { Obs Id Tag { All False } } {
   global GDefs
   variable Data
   variable Lbl

   if { [metobs is $Obs] } {
      NowCaster::Obs::InfoWindow "$Obs (Station:$Id)"

      set datev [metobs define $Obs -VALID]

      if { $All } {
         set dates [metobs define $Obs -DATE $Tag]
      } else {
         set dates $datev
      }

      #----- Per report
      .nowcasterinfo.tab.frame0.info.text delete 0.0 end
      foreach date $dates {
         .nowcasterinfo.tab.frame0.info.text insert end "[clock format $date  -format "%Y%m%d %H:%M" -gmt true]\n"
         foreach report [metobs define $Obs -REPORT $Tag $date] {
            .nowcasterinfo.tab.frame0.info.text insert end "\n---------------------------------------------------------------\n"
            .nowcasterinfo.tab.frame0.info.text insert end [NowCaster::Obs::InfoBKType $report]\n\n
            foreach code [metreport define $report -CODE] desc [metreport define $report -DESC] unit [metreport define $report -UNIT] values [metreport define $report -VALUE] {
               .nowcasterinfo.tab.frame0.info.text insert end [format "%06i %-43s (%-10s): " $code $desc $unit]
               set l 0
               foreach value $values {
                  foreach v $value {
                     catch { .nowcasterinfo.tab.frame0.info.text insert end [format "%g " $v] }
                  }
                  if { [incr l]<[llength $values] } {
                     .nowcasterinfo.tab.frame0.info.text insert end [format "%-66s" "\n"]
                  }
               }
               .nowcasterinfo.tab.frame0.info.text insert end "\n"
            }
#         metreport free $report
         }
         .nowcasterinfo.tab.frame0.info.text insert end "\n"
      }

      #----- Per element
      .nowcasterinfo.tab.frame1.info.text delete 0.0 end
      set elems [metobs define $Obs -ELEMENT $Tag]
      foreach elem $elems {
         set info [metobs table -desc $elem]
         .nowcasterinfo.tab.frame1.info.text insert end  "[format %06i $elem] [lindex $info 0] ([lindex $info 1])\n"
         .nowcasterinfo.tab.frame1.info.text insert end "---------------------------------------------------------------\n"
         foreach date $dates {
            .nowcasterinfo.tab.frame1.info.text insert end "[clock format $date  -format "%Y%m%d %H:%M" -gmt true]"
            set values [metobs define $Obs -ELEMENT $Tag $elem $date]
            set l 0
            foreach value $values {
               foreach v $value {
                  if { $v!="" } {
                     .nowcasterinfo.tab.frame1.info.text insert end " [format "%g " $v]"
                  }
               }
               if { [incr l]<[llength $values] } {
                  .nowcasterinfo.tab.frame1.info.text insert end [format "%-15s" "\n"]
               }
            }
            .nowcasterinfo.tab.frame1.info.text insert end  "\n"
         }
         .nowcasterinfo.tab.frame1.info.text insert end  "\n"
      }

      #----- Get Tephi temp profile
      vector free TEPHIPROF
      vector create TEPHIPROF
      vector dim TEPHIPROF { PRES DRY WET DEW  }
      vector stats TEPHIPROF -nodata -999.0

      foreach report [metobs define $Obs -REPORT $Tag $datev] {
         foreach pres [metreport define $report -ELEMENT 007004] temp [metreport define $report -ELEMENT { 012001 012101 }] wet [metreport define $report -ELEMENT 012102] dew [metreport define $report -ELEMENT { 012192 }] {
            if { $pres!=-999.0 && $pres!="" && $temp!=-999.0 } {
               catch { vector append TEPHIPROF  [list [expr $pres/100.0] [expr $temp-273.15] -999 [expr $dew!=-999.0?($temp-$dew-273.15):-999]] }
            }
         }
      }
      vector sort -unique TEPHIPROF PRES

      #----- Get Tephi wind profile
      vector free TEPHIWIND
      vector create TEPHIWIND
      vector dim TEPHIWIND { PRES SPD DIR  }
      foreach report [metobs define $Obs -REPORT $Tag $datev] {
         foreach pres [metreport define $report -ELEMENT 007004] spd [metreport define $report -ELEMENT 011002] dir [metreport define $report -ELEMENT 011001] {
            if { $pres!=-999.0 && $spd!=-999.0 && $dir!=-999.0 } {
               catch { vector append TEPHIWIND [list [expr $pres/100.0] [expr $spd*1.94384617179] $dir] }
            }
         }
      }
      vector sort -unique TEPHIWIND PRES

      if { [vector length TEPHIPROF] } {
         #----- Display graph data
         if { ![graphitem is TEPHIITEM] } {
            graphitem create TEPHIITEM
         }
         graphitem configure TEPHIITEM -desc "Station $Id"
         NowCaster::Obs::Graph

         #----- Display text data
         .nowcasterinfo.tab.frame2.info.text delete 0.0 end
         .nowcasterinfo.tab.frame2.info.text insert end "Pres(mb) Dry(°C) Wet(°C) Dew(°C)\n"

         foreach pres [vector get TEPHIPROF.PRES] dry [vector get TEPHIPROF.DRY] wet [vector get TEPHIPROF.WET] dew [vector get TEPHIPROF.DEW] {
            .nowcasterinfo.tab.frame2.info.text insert end [format "%6.1f   " $pres]
            if { [catch { .nowcasterinfo.tab.frame2.info.text insert end [format "%5.1f   " $dry] } ] } {
               .nowcasterinfo.tab.frame2.info.text insert end "        "
            }
            if { [catch { .nowcasterinfo.tab.frame2.info.text insert end [format "%5.1f   " $dry] }] } {
               .nowcasterinfo.tab.frame2.info.text insert end "        "
            }
            if { [catch { .nowcasterinfo.tab.frame2.info.text insert end [format "%5.1f\n" $dew] }] } {
               .nowcasterinfo.tab.frame2.info.text insert end "\n"
            }
         }

         .nowcasterinfo.tab.frame2.info.text insert end "\nPres(mb) Speed(Kt) Dir(Deg)\n"
         foreach pres [vector get TEPHIWIND.PRES] spd [vector get TEPHIWIND.SPD] dir [vector get TEPHIWIND.DIR] {
            catch { .nowcasterinfo.tab.frame2.info.text insert end [format "%6.1f   %5.1f     %5.1f\n" $pres $spd $dir] }
         }
      }
   }
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Graph>
# Creation : Fevrier 2007 - J.P. Gauthier - CMC/CMOE
#
# But      : Configurer et mettre a jour le tephigrammme
#
# Parametres :
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Graph { } {
   variable Tephi

   graphitem configure TEPHIITEM -paxis TEPHIAXISP -taxis TEPHIAXIST -thaxis TEPHIAXISTH -mixaxis TEPHIAXISMIX \
      -pressure TEPHIPROF.PRES -drybulb TEPHIPROF.DRY -wetbulb [expr $Tephi(Wet)?"TEPHIPROF.WET":""] \
      -dewpoint [expr $Tephi(Dew)?"TEPHIPROF.DEW":""] -windpres TEPHIWIND.PRES \
      -speed [expr $Tephi(Wind)?"TEPHIWIND.SPD":""] -dir [expr $Tephi(Wind)?"TEPHIWIND.DIR":""] \
      -type LINE -width 2 -outline blue -value $Tephi(Info) -font XFont12 -anchor w -size 15

   .nowcasterinfo.tab.frame2.glcanvas itemconfigure TEPHI -item { TEPHIITEM }
   update idletasks
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Find>
# Creation : Fevrier 2007 - J.P. Gauthier - CMC/CMOE
#
# But      : Centrer la projection sur la station specifie.
#
# Parametres :
#   <Obs>    : Observation
#   <Id>     : Identificateur de la station
#
# Retour    :
#
# Remarque :
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::Find { Obs { Id "" } } {
   variable Data

   if { $Id!="" } {
      set Data(Id) $Id
   }
   set Data(Id) [string toupper $Data(Id)]

   if { [winfo exists .nowcasterinfo] } {
      set Data(InfoObs) $Obs
      set Data(InfoId)  $Data(Id)
      set Data(InfoTag) $Data(Id)
      NowCaster::Obs::Info $Data(InfoObs) $Data(InfoId) $Data(InfoTag) $Data(InfoAll)
   }

   set coord [metobs define $Obs -COORD $Data(Id)]
   Viewport::GoTo $Page::Data(Frame) [lindex $coord 0] [lindex $coord 1]
}

#-------------------------------------------------------------------------------
# Nom      : <NowCaster::Obs::Draw...>
# Creation : Avril 2006 - J.P. Gauthier - CMC/CMOE
#
# But      : Fonctions de manipulations de la selection sur la projection.
#
# Parametres :
#   <Frame>  : Identificateur de Page
#   <VP>     : Identificateur du Viewport
#
# Remarques :
#    - Ces fonctions sont appele par le package Page au besoin.
#
#-------------------------------------------------------------------------------

proc NowCaster::Obs::DrawInit  { Frame VP } {
   global GDefs
   variable Data
   variable Lbl

   set Data(X) $Viewport::Map(X)
   set Data(Y) $Viewport::Map(Y)

   if { [llength [set picked [$VP -pick $Data(X) $Data(Y) { metobs }]]] } {
      set Data(InfoObs) [lindex $picked 1]
      set Data(InfoTag) [lindex $picked 2]
      set Data(InfoId)  [metobs define $Data(InfoObs) -ID $Data(InfoTag)]
   } else {
      set Data(InfoId)  ""
      set Data(InfoTag) ""
      set Data(InfoObs) ""
   }
   NowCaster::Obs::Info $Data(InfoObs) $Data(InfoId) $Data(InfoTag) $Data(InfoAll)
}

proc NowCaster::Obs::Draw      { Frame VP } {
}

proc NowCaster::Obs::DrawDone { Frame VP } {
}

proc NowCaster::Obs::MoveInit { Frame VP } {
   variable Data

   set Data(X) $Viewport::Map(X)
   set Data(Y) $Viewport::Map(Y)

   if { [llength [set picked [$VP -pick $Data(X) $Data(Y) { metobs }]]] } {
      set Data(InfoObs) [lindex $picked 1]
      set Data(InfoTag) [lindex $picked 2]
      set Data(InfoId)  [metobs define $Data(InfoObs) -ID $Data(InfoTag)]
      if { $Data(Flat$Data(InfoObs)) } {
         set Data(X)  $Viewport::Data(X$VP)
         set Data(Y)  $Viewport::Data(Y$VP)
         set Data(X0) 0
         set Data(Y0) 0
      } else {
         set xy [metobs define $Data(InfoObs) -PIXEL $Data(InfoTag)]
         set Data(X0) [lindex $xy 0]
         set Data(Y0) [lindex $xy 1]
      }
   } else {
      set Data(InfoId)  ""
      set Data(InfoTag) ""
      set Data(InfoObs) ""
   }
}

proc NowCaster::Obs::Move { Frame VP } {
   variable Data

   if { $Data(InfoId)!="" && $Data(InfoObs)!="" } {
      set xy [metobs define $Data(InfoObs) -PIXEL $Data(InfoTag)]
      metobs define $Data(InfoObs) -PIXEL $Data(InfoTag) [expr $Data(X0)+($Viewport::Map(X)-$Data(X))] [expr $Data(Y0)+($Viewport::Map(Y)-$Data(Y))]
      Page::Update $Page::Data(Frame)
   }
}

proc NowCaster::Obs::MoveDone { Frame VP } {
}
